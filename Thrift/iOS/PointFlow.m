/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "PointFlow.h"

@implementation TGeoLocation

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.latitude = 0;

  self.longitude = 0;

#endif
  return self;
}

- (id) initWithLatitude: (double) latitude longitude: (double) longitude updateTime: (Timestamp) updateTime
{
  self = [super init];
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __updateTime = updateTime;
  __updateTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateTime"])
  {
    __updateTime = [decoder decodeInt64ForKey: @"updateTime"];
    __updateTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__updateTime_isset)
  {
    [encoder encodeInt64: __updateTime forKey: @"updateTime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __latitude_isset ? 2654435761 : 0;
  if (__latitude_isset)
  {
    hash = (hash * 31) ^ [@(__latitude) hash];
  }
  hash = (hash * 31) ^ __longitude_isset ? 2654435761 : 0;
  if (__longitude_isset)
  {
    hash = (hash * 31) ^ [@(__longitude) hash];
  }
  hash = (hash * 31) ^ __updateTime_isset ? 2654435761 : 0;
  if (__updateTime_isset)
  {
    hash = (hash * 31) ^ [@(__updateTime) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TGeoLocation class]]) {
    return NO;
  }
  TGeoLocation *other = (TGeoLocation *)anObject;
  if ((__latitude_isset != other->__latitude_isset) ||
      (__latitude_isset && (__latitude != other->__latitude))) {
    return NO;
  }
  if ((__longitude_isset != other->__longitude_isset) ||
      (__longitude_isset && (__longitude != other->__longitude))) {
    return NO;
  }
  if ((__updateTime_isset != other->__updateTime_isset) ||
      (__updateTime_isset && (__updateTime != other->__updateTime))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (int64_t) updateTime {
  return __updateTime;
}

- (void) setUpdateTime: (int64_t) updateTime {
  __updateTime = updateTime;
  __updateTime_isset = YES;
}

- (BOOL) updateTimeIsSet {
  return __updateTime_isset;
}

- (void) unsetUpdateTime {
  __updateTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TGeoLocation"];
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__updateTime_isset) {
    [outProtocol writeFieldBeginWithName: @"updateTime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __updateTime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TGeoLocation("];
  [ms appendString: @"latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",updateTime:"];
  [ms appendFormat: @"%qi", __updateTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.tzOffset = 0;

#endif
  return self;
}

- (id) initWithSessionKey: (Text) sessionKey organizationName: (Text) organizationName email: (Text) email fName: (Text) fName lName: (Text) lName sex: (Text) sex InboxFolder: (Text) InboxFolder userId: (Text) userId groupId: (int32_t) groupId tzOffset: (int32_t) tzOffset maxUsersPerShare: (int32_t) maxUsersPerShare maxFileSize: (int64_t) maxFileSize location: (TGeoLocation *) location error: (int32_t) error
{
  self = [super init];
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  __organizationName = [organizationName retain_stub];
  __organizationName_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __fName = [fName retain_stub];
  __fName_isset = YES;
  __lName = [lName retain_stub];
  __lName_isset = YES;
  __sex = [sex retain_stub];
  __sex_isset = YES;
  __InboxFolder = [InboxFolder retain_stub];
  __InboxFolder_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __groupId = groupId;
  __groupId_isset = YES;
  __tzOffset = tzOffset;
  __tzOffset_isset = YES;
  __maxUsersPerShare = maxUsersPerShare;
  __maxUsersPerShare_isset = YES;
  __maxFileSize = maxFileSize;
  __maxFileSize_isset = YES;
  __location = [location retain_stub];
  __location_isset = YES;
  __error = error;
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"organizationName"])
  {
    __organizationName = [[decoder decodeObjectForKey: @"organizationName"] retain_stub];
    __organizationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"fName"])
  {
    __fName = [[decoder decodeObjectForKey: @"fName"] retain_stub];
    __fName_isset = YES;
  }
  if ([decoder containsValueForKey: @"lName"])
  {
    __lName = [[decoder decodeObjectForKey: @"lName"] retain_stub];
    __lName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sex"])
  {
    __sex = [[decoder decodeObjectForKey: @"sex"] retain_stub];
    __sex_isset = YES;
  }
  if ([decoder containsValueForKey: @"InboxFolder"])
  {
    __InboxFolder = [[decoder decodeObjectForKey: @"InboxFolder"] retain_stub];
    __InboxFolder_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"groupId"])
  {
    __groupId = [decoder decodeInt32ForKey: @"groupId"];
    __groupId_isset = YES;
  }
  if ([decoder containsValueForKey: @"tzOffset"])
  {
    __tzOffset = [decoder decodeInt32ForKey: @"tzOffset"];
    __tzOffset_isset = YES;
  }
  if ([decoder containsValueForKey: @"maxUsersPerShare"])
  {
    __maxUsersPerShare = [decoder decodeInt32ForKey: @"maxUsersPerShare"];
    __maxUsersPerShare_isset = YES;
  }
  if ([decoder containsValueForKey: @"maxFileSize"])
  {
    __maxFileSize = [decoder decodeInt64ForKey: @"maxFileSize"];
    __maxFileSize_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [decoder decodeInt32ForKey: @"error"];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
  if (__organizationName_isset)
  {
    [encoder encodeObject: __organizationName forKey: @"organizationName"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__fName_isset)
  {
    [encoder encodeObject: __fName forKey: @"fName"];
  }
  if (__lName_isset)
  {
    [encoder encodeObject: __lName forKey: @"lName"];
  }
  if (__sex_isset)
  {
    [encoder encodeObject: __sex forKey: @"sex"];
  }
  if (__InboxFolder_isset)
  {
    [encoder encodeObject: __InboxFolder forKey: @"InboxFolder"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__groupId_isset)
  {
    [encoder encodeInt32: __groupId forKey: @"groupId"];
  }
  if (__tzOffset_isset)
  {
    [encoder encodeInt32: __tzOffset forKey: @"tzOffset"];
  }
  if (__maxUsersPerShare_isset)
  {
    [encoder encodeInt32: __maxUsersPerShare forKey: @"maxUsersPerShare"];
  }
  if (__maxFileSize_isset)
  {
    [encoder encodeInt64: __maxFileSize forKey: @"maxFileSize"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__error_isset)
  {
    [encoder encodeInt32: __error forKey: @"error"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  hash = (hash * 31) ^ __organizationName_isset ? 2654435761 : 0;
  if (__organizationName_isset)
  {
    hash = (hash * 31) ^ [__organizationName hash];
  }
  hash = (hash * 31) ^ __email_isset ? 2654435761 : 0;
  if (__email_isset)
  {
    hash = (hash * 31) ^ [__email hash];
  }
  hash = (hash * 31) ^ __fName_isset ? 2654435761 : 0;
  if (__fName_isset)
  {
    hash = (hash * 31) ^ [__fName hash];
  }
  hash = (hash * 31) ^ __lName_isset ? 2654435761 : 0;
  if (__lName_isset)
  {
    hash = (hash * 31) ^ [__lName hash];
  }
  hash = (hash * 31) ^ __sex_isset ? 2654435761 : 0;
  if (__sex_isset)
  {
    hash = (hash * 31) ^ [__sex hash];
  }
  hash = (hash * 31) ^ __InboxFolder_isset ? 2654435761 : 0;
  if (__InboxFolder_isset)
  {
    hash = (hash * 31) ^ [__InboxFolder hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __groupId_isset ? 2654435761 : 0;
  if (__groupId_isset)
  {
    hash = (hash * 31) ^ [@(__groupId) hash];
  }
  hash = (hash * 31) ^ __tzOffset_isset ? 2654435761 : 0;
  if (__tzOffset_isset)
  {
    hash = (hash * 31) ^ [@(__tzOffset) hash];
  }
  hash = (hash * 31) ^ __maxUsersPerShare_isset ? 2654435761 : 0;
  if (__maxUsersPerShare_isset)
  {
    hash = (hash * 31) ^ [@(__maxUsersPerShare) hash];
  }
  hash = (hash * 31) ^ __maxFileSize_isset ? 2654435761 : 0;
  if (__maxFileSize_isset)
  {
    hash = (hash * 31) ^ [@(__maxFileSize) hash];
  }
  hash = (hash * 31) ^ __location_isset ? 2654435761 : 0;
  if (__location_isset)
  {
    hash = (hash * 31) ^ [__location hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [@(__error) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TUser class]]) {
    return NO;
  }
  TUser *other = (TUser *)anObject;
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  if ((__organizationName_isset != other->__organizationName_isset) ||
      (__organizationName_isset && ((__organizationName || other->__organizationName) && ![__organizationName isEqual:other->__organizationName]))) {
    return NO;
  }
  if ((__email_isset != other->__email_isset) ||
      (__email_isset && ((__email || other->__email) && ![__email isEqual:other->__email]))) {
    return NO;
  }
  if ((__fName_isset != other->__fName_isset) ||
      (__fName_isset && ((__fName || other->__fName) && ![__fName isEqual:other->__fName]))) {
    return NO;
  }
  if ((__lName_isset != other->__lName_isset) ||
      (__lName_isset && ((__lName || other->__lName) && ![__lName isEqual:other->__lName]))) {
    return NO;
  }
  if ((__sex_isset != other->__sex_isset) ||
      (__sex_isset && ((__sex || other->__sex) && ![__sex isEqual:other->__sex]))) {
    return NO;
  }
  if ((__InboxFolder_isset != other->__InboxFolder_isset) ||
      (__InboxFolder_isset && ((__InboxFolder || other->__InboxFolder) && ![__InboxFolder isEqual:other->__InboxFolder]))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__groupId_isset != other->__groupId_isset) ||
      (__groupId_isset && (__groupId != other->__groupId))) {
    return NO;
  }
  if ((__tzOffset_isset != other->__tzOffset_isset) ||
      (__tzOffset_isset && (__tzOffset != other->__tzOffset))) {
    return NO;
  }
  if ((__maxUsersPerShare_isset != other->__maxUsersPerShare_isset) ||
      (__maxUsersPerShare_isset && (__maxUsersPerShare != other->__maxUsersPerShare))) {
    return NO;
  }
  if ((__maxFileSize_isset != other->__maxFileSize_isset) ||
      (__maxFileSize_isset && (__maxFileSize != other->__maxFileSize))) {
    return NO;
  }
  if ((__location_isset != other->__location_isset) ||
      (__location_isset && ((__location || other->__location) && ![__location isEqual:other->__location]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && (__error != other->__error))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sessionKey release_stub];
  [__organizationName release_stub];
  [__email release_stub];
  [__fName release_stub];
  [__lName release_stub];
  [__sex release_stub];
  [__InboxFolder release_stub];
  [__userId release_stub];
  [__location release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (NSString *) organizationName {
  return [[__organizationName retain_stub] autorelease_stub];
}

- (void) setOrganizationName: (NSString *) organizationName {
  [organizationName retain_stub];
  [__organizationName release_stub];
  __organizationName = organizationName;
  __organizationName_isset = YES;
}

- (BOOL) organizationNameIsSet {
  return __organizationName_isset;
}

- (void) unsetOrganizationName {
  [__organizationName release_stub];
  __organizationName = nil;
  __organizationName_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) fName {
  return [[__fName retain_stub] autorelease_stub];
}

- (void) setFName: (NSString *) fName {
  [fName retain_stub];
  [__fName release_stub];
  __fName = fName;
  __fName_isset = YES;
}

- (BOOL) fNameIsSet {
  return __fName_isset;
}

- (void) unsetFName {
  [__fName release_stub];
  __fName = nil;
  __fName_isset = NO;
}

- (NSString *) lName {
  return [[__lName retain_stub] autorelease_stub];
}

- (void) setLName: (NSString *) lName {
  [lName retain_stub];
  [__lName release_stub];
  __lName = lName;
  __lName_isset = YES;
}

- (BOOL) lNameIsSet {
  return __lName_isset;
}

- (void) unsetLName {
  [__lName release_stub];
  __lName = nil;
  __lName_isset = NO;
}

- (NSString *) sex {
  return [[__sex retain_stub] autorelease_stub];
}

- (void) setSex: (NSString *) sex {
  [sex retain_stub];
  [__sex release_stub];
  __sex = sex;
  __sex_isset = YES;
}

- (BOOL) sexIsSet {
  return __sex_isset;
}

- (void) unsetSex {
  [__sex release_stub];
  __sex = nil;
  __sex_isset = NO;
}

- (NSString *) InboxFolder {
  return [[__InboxFolder retain_stub] autorelease_stub];
}

- (void) setInboxFolder: (NSString *) InboxFolder {
  [InboxFolder retain_stub];
  [__InboxFolder release_stub];
  __InboxFolder = InboxFolder;
  __InboxFolder_isset = YES;
}

- (BOOL) InboxFolderIsSet {
  return __InboxFolder_isset;
}

- (void) unsetInboxFolder {
  [__InboxFolder release_stub];
  __InboxFolder = nil;
  __InboxFolder_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (int32_t) groupId {
  return __groupId;
}

- (void) setGroupId: (int32_t) groupId {
  __groupId = groupId;
  __groupId_isset = YES;
}

- (BOOL) groupIdIsSet {
  return __groupId_isset;
}

- (void) unsetGroupId {
  __groupId_isset = NO;
}

- (int32_t) tzOffset {
  return __tzOffset;
}

- (void) setTzOffset: (int32_t) tzOffset {
  __tzOffset = tzOffset;
  __tzOffset_isset = YES;
}

- (BOOL) tzOffsetIsSet {
  return __tzOffset_isset;
}

- (void) unsetTzOffset {
  __tzOffset_isset = NO;
}

- (int32_t) maxUsersPerShare {
  return __maxUsersPerShare;
}

- (void) setMaxUsersPerShare: (int32_t) maxUsersPerShare {
  __maxUsersPerShare = maxUsersPerShare;
  __maxUsersPerShare_isset = YES;
}

- (BOOL) maxUsersPerShareIsSet {
  return __maxUsersPerShare_isset;
}

- (void) unsetMaxUsersPerShare {
  __maxUsersPerShare_isset = NO;
}

- (int64_t) maxFileSize {
  return __maxFileSize;
}

- (void) setMaxFileSize: (int64_t) maxFileSize {
  __maxFileSize = maxFileSize;
  __maxFileSize_isset = YES;
}

- (BOOL) maxFileSizeIsSet {
  return __maxFileSize_isset;
}

- (void) unsetMaxFileSize {
  __maxFileSize_isset = NO;
}

- (TGeoLocation *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (TGeoLocation *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (int32_t) error {
  return __error;
}

- (void) setError: (int32_t) error {
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInboxFolder: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGroupId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTzOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMaxUsersPerShare: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMaxFileSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRUCT) {
          TGeoLocation *fieldValue = [[TGeoLocation alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setError: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TUser"];
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organizationName_isset) {
    if (__organizationName != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __organizationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fName_isset) {
    if (__fName != nil) {
      [outProtocol writeFieldBeginWithName: @"fName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __fName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lName_isset) {
    if (__lName != nil) {
      [outProtocol writeFieldBeginWithName: @"lName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __lName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sex_isset) {
    if (__sex != nil) {
      [outProtocol writeFieldBeginWithName: @"sex" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __sex];
      [outProtocol writeFieldEnd];
    }
  }
  if (__InboxFolder_isset) {
    if (__InboxFolder != nil) {
      [outProtocol writeFieldBeginWithName: @"InboxFolder" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __InboxFolder];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__groupId_isset) {
    [outProtocol writeFieldBeginWithName: @"groupId" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __groupId];
    [outProtocol writeFieldEnd];
  }
  if (__tzOffset_isset) {
    [outProtocol writeFieldBeginWithName: @"tzOffset" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __tzOffset];
    [outProtocol writeFieldEnd];
  }
  if (__maxUsersPerShare_isset) {
    [outProtocol writeFieldBeginWithName: @"maxUsersPerShare" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __maxUsersPerShare];
    [outProtocol writeFieldEnd];
  }
  if (__maxFileSize_isset) {
    [outProtocol writeFieldBeginWithName: @"maxFileSize" type: TType_I64 fieldID: 12];
    [outProtocol writeI64: __maxFileSize];
    [outProtocol writeFieldEnd];
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 13];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__error_isset) {
    [outProtocol writeFieldBeginWithName: @"error" type: TType_I32 fieldID: 14];
    [outProtocol writeI32: __error];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__sessionKey_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'sessionKey' is not set."];
  }
  if (!__organizationName_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'organizationName' is not set."];
  }
  if (!__email_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'email' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TUser("];
  [ms appendString: @"sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @",organizationName:"];
  [ms appendFormat: @"\"%@\"", __organizationName];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",fName:"];
  [ms appendFormat: @"\"%@\"", __fName];
  [ms appendString: @",lName:"];
  [ms appendFormat: @"\"%@\"", __lName];
  [ms appendString: @",sex:"];
  [ms appendFormat: @"\"%@\"", __sex];
  [ms appendString: @",InboxFolder:"];
  [ms appendFormat: @"\"%@\"", __InboxFolder];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",groupId:"];
  [ms appendFormat: @"%i", __groupId];
  [ms appendString: @",tzOffset:"];
  [ms appendFormat: @"%i", __tzOffset];
  [ms appendString: @",maxUsersPerShare:"];
  [ms appendFormat: @"%i", __maxUsersPerShare];
  [ms appendString: @",maxFileSize:"];
  [ms appendFormat: @"%qi", __maxFileSize];
  [ms appendString: @",location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%i", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTask

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id name: (Text) name desc: (Text) desc priority: (int32_t) priority owner: (Text) owner assignee: (Text) assignee processDefinitionId: (Text) processDefinitionId processInstanceId: (Text) processInstanceId executionId: (Text) executionId createTime: (Date) createTime dueDate: (Date) dueDate taskDefinitionKey: (Text) taskDefinitionKey isSuspended: (BOOL) isSuspended
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __priority = priority;
  __priority_isset = YES;
  __owner = [owner retain_stub];
  __owner_isset = YES;
  __assignee = [assignee retain_stub];
  __assignee_isset = YES;
  __processDefinitionId = [processDefinitionId retain_stub];
  __processDefinitionId_isset = YES;
  __processInstanceId = [processInstanceId retain_stub];
  __processInstanceId_isset = YES;
  __executionId = [executionId retain_stub];
  __executionId_isset = YES;
  __createTime = [createTime retain_stub];
  __createTime_isset = YES;
  __dueDate = [dueDate retain_stub];
  __dueDate_isset = YES;
  __taskDefinitionKey = [taskDefinitionKey retain_stub];
  __taskDefinitionKey_isset = YES;
  __isSuspended = isSuspended;
  __isSuspended_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"priority"])
  {
    __priority = [decoder decodeInt32ForKey: @"priority"];
    __priority_isset = YES;
  }
  if ([decoder containsValueForKey: @"owner"])
  {
    __owner = [[decoder decodeObjectForKey: @"owner"] retain_stub];
    __owner_isset = YES;
  }
  if ([decoder containsValueForKey: @"assignee"])
  {
    __assignee = [[decoder decodeObjectForKey: @"assignee"] retain_stub];
    __assignee_isset = YES;
  }
  if ([decoder containsValueForKey: @"processDefinitionId"])
  {
    __processDefinitionId = [[decoder decodeObjectForKey: @"processDefinitionId"] retain_stub];
    __processDefinitionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"processInstanceId"])
  {
    __processInstanceId = [[decoder decodeObjectForKey: @"processInstanceId"] retain_stub];
    __processInstanceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"executionId"])
  {
    __executionId = [[decoder decodeObjectForKey: @"executionId"] retain_stub];
    __executionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [[decoder decodeObjectForKey: @"createTime"] retain_stub];
    __createTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"dueDate"])
  {
    __dueDate = [[decoder decodeObjectForKey: @"dueDate"] retain_stub];
    __dueDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"taskDefinitionKey"])
  {
    __taskDefinitionKey = [[decoder decodeObjectForKey: @"taskDefinitionKey"] retain_stub];
    __taskDefinitionKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"isSuspended"])
  {
    __isSuspended = [decoder decodeBoolForKey: @"isSuspended"];
    __isSuspended_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__priority_isset)
  {
    [encoder encodeInt32: __priority forKey: @"priority"];
  }
  if (__owner_isset)
  {
    [encoder encodeObject: __owner forKey: @"owner"];
  }
  if (__assignee_isset)
  {
    [encoder encodeObject: __assignee forKey: @"assignee"];
  }
  if (__processDefinitionId_isset)
  {
    [encoder encodeObject: __processDefinitionId forKey: @"processDefinitionId"];
  }
  if (__processInstanceId_isset)
  {
    [encoder encodeObject: __processInstanceId forKey: @"processInstanceId"];
  }
  if (__executionId_isset)
  {
    [encoder encodeObject: __executionId forKey: @"executionId"];
  }
  if (__createTime_isset)
  {
    [encoder encodeObject: __createTime forKey: @"createTime"];
  }
  if (__dueDate_isset)
  {
    [encoder encodeObject: __dueDate forKey: @"dueDate"];
  }
  if (__taskDefinitionKey_isset)
  {
    [encoder encodeObject: __taskDefinitionKey forKey: @"taskDefinitionKey"];
  }
  if (__isSuspended_isset)
  {
    [encoder encodeBool: __isSuspended forKey: @"isSuspended"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __priority_isset ? 2654435761 : 0;
  if (__priority_isset)
  {
    hash = (hash * 31) ^ [@(__priority) hash];
  }
  hash = (hash * 31) ^ __owner_isset ? 2654435761 : 0;
  if (__owner_isset)
  {
    hash = (hash * 31) ^ [__owner hash];
  }
  hash = (hash * 31) ^ __assignee_isset ? 2654435761 : 0;
  if (__assignee_isset)
  {
    hash = (hash * 31) ^ [__assignee hash];
  }
  hash = (hash * 31) ^ __processDefinitionId_isset ? 2654435761 : 0;
  if (__processDefinitionId_isset)
  {
    hash = (hash * 31) ^ [__processDefinitionId hash];
  }
  hash = (hash * 31) ^ __processInstanceId_isset ? 2654435761 : 0;
  if (__processInstanceId_isset)
  {
    hash = (hash * 31) ^ [__processInstanceId hash];
  }
  hash = (hash * 31) ^ __executionId_isset ? 2654435761 : 0;
  if (__executionId_isset)
  {
    hash = (hash * 31) ^ [__executionId hash];
  }
  hash = (hash * 31) ^ __createTime_isset ? 2654435761 : 0;
  if (__createTime_isset)
  {
    hash = (hash * 31) ^ [__createTime hash];
  }
  hash = (hash * 31) ^ __dueDate_isset ? 2654435761 : 0;
  if (__dueDate_isset)
  {
    hash = (hash * 31) ^ [__dueDate hash];
  }
  hash = (hash * 31) ^ __taskDefinitionKey_isset ? 2654435761 : 0;
  if (__taskDefinitionKey_isset)
  {
    hash = (hash * 31) ^ [__taskDefinitionKey hash];
  }
  hash = (hash * 31) ^ __isSuspended_isset ? 2654435761 : 0;
  if (__isSuspended_isset)
  {
    hash = (hash * 31) ^ [@(__isSuspended) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTask class]]) {
    return NO;
  }
  TTask *other = (TTask *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__priority_isset != other->__priority_isset) ||
      (__priority_isset && (__priority != other->__priority))) {
    return NO;
  }
  if ((__owner_isset != other->__owner_isset) ||
      (__owner_isset && ((__owner || other->__owner) && ![__owner isEqual:other->__owner]))) {
    return NO;
  }
  if ((__assignee_isset != other->__assignee_isset) ||
      (__assignee_isset && ((__assignee || other->__assignee) && ![__assignee isEqual:other->__assignee]))) {
    return NO;
  }
  if ((__processDefinitionId_isset != other->__processDefinitionId_isset) ||
      (__processDefinitionId_isset && ((__processDefinitionId || other->__processDefinitionId) && ![__processDefinitionId isEqual:other->__processDefinitionId]))) {
    return NO;
  }
  if ((__processInstanceId_isset != other->__processInstanceId_isset) ||
      (__processInstanceId_isset && ((__processInstanceId || other->__processInstanceId) && ![__processInstanceId isEqual:other->__processInstanceId]))) {
    return NO;
  }
  if ((__executionId_isset != other->__executionId_isset) ||
      (__executionId_isset && ((__executionId || other->__executionId) && ![__executionId isEqual:other->__executionId]))) {
    return NO;
  }
  if ((__createTime_isset != other->__createTime_isset) ||
      (__createTime_isset && ((__createTime || other->__createTime) && ![__createTime isEqual:other->__createTime]))) {
    return NO;
  }
  if ((__dueDate_isset != other->__dueDate_isset) ||
      (__dueDate_isset && ((__dueDate || other->__dueDate) && ![__dueDate isEqual:other->__dueDate]))) {
    return NO;
  }
  if ((__taskDefinitionKey_isset != other->__taskDefinitionKey_isset) ||
      (__taskDefinitionKey_isset && ((__taskDefinitionKey || other->__taskDefinitionKey) && ![__taskDefinitionKey isEqual:other->__taskDefinitionKey]))) {
    return NO;
  }
  if ((__isSuspended_isset != other->__isSuspended_isset) ||
      (__isSuspended_isset && (__isSuspended != other->__isSuspended))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__name release_stub];
  [__desc release_stub];
  [__owner release_stub];
  [__assignee release_stub];
  [__processDefinitionId release_stub];
  [__processInstanceId release_stub];
  [__executionId release_stub];
  [__createTime release_stub];
  [__dueDate release_stub];
  [__taskDefinitionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (int32_t) priority {
  return __priority;
}

- (void) setPriority: (int32_t) priority {
  __priority = priority;
  __priority_isset = YES;
}

- (BOOL) priorityIsSet {
  return __priority_isset;
}

- (void) unsetPriority {
  __priority_isset = NO;
}

- (NSString *) owner {
  return [[__owner retain_stub] autorelease_stub];
}

- (void) setOwner: (NSString *) owner {
  [owner retain_stub];
  [__owner release_stub];
  __owner = owner;
  __owner_isset = YES;
}

- (BOOL) ownerIsSet {
  return __owner_isset;
}

- (void) unsetOwner {
  [__owner release_stub];
  __owner = nil;
  __owner_isset = NO;
}

- (NSString *) assignee {
  return [[__assignee retain_stub] autorelease_stub];
}

- (void) setAssignee: (NSString *) assignee {
  [assignee retain_stub];
  [__assignee release_stub];
  __assignee = assignee;
  __assignee_isset = YES;
}

- (BOOL) assigneeIsSet {
  return __assignee_isset;
}

- (void) unsetAssignee {
  [__assignee release_stub];
  __assignee = nil;
  __assignee_isset = NO;
}

- (NSString *) processDefinitionId {
  return [[__processDefinitionId retain_stub] autorelease_stub];
}

- (void) setProcessDefinitionId: (NSString *) processDefinitionId {
  [processDefinitionId retain_stub];
  [__processDefinitionId release_stub];
  __processDefinitionId = processDefinitionId;
  __processDefinitionId_isset = YES;
}

- (BOOL) processDefinitionIdIsSet {
  return __processDefinitionId_isset;
}

- (void) unsetProcessDefinitionId {
  [__processDefinitionId release_stub];
  __processDefinitionId = nil;
  __processDefinitionId_isset = NO;
}

- (NSString *) processInstanceId {
  return [[__processInstanceId retain_stub] autorelease_stub];
}

- (void) setProcessInstanceId: (NSString *) processInstanceId {
  [processInstanceId retain_stub];
  [__processInstanceId release_stub];
  __processInstanceId = processInstanceId;
  __processInstanceId_isset = YES;
}

- (BOOL) processInstanceIdIsSet {
  return __processInstanceId_isset;
}

- (void) unsetProcessInstanceId {
  [__processInstanceId release_stub];
  __processInstanceId = nil;
  __processInstanceId_isset = NO;
}

- (NSString *) executionId {
  return [[__executionId retain_stub] autorelease_stub];
}

- (void) setExecutionId: (NSString *) executionId {
  [executionId retain_stub];
  [__executionId release_stub];
  __executionId = executionId;
  __executionId_isset = YES;
}

- (BOOL) executionIdIsSet {
  return __executionId_isset;
}

- (void) unsetExecutionId {
  [__executionId release_stub];
  __executionId = nil;
  __executionId_isset = NO;
}

- (NSString *) createTime {
  return [[__createTime retain_stub] autorelease_stub];
}

- (void) setCreateTime: (NSString *) createTime {
  [createTime retain_stub];
  [__createTime release_stub];
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  [__createTime release_stub];
  __createTime = nil;
  __createTime_isset = NO;
}

- (NSString *) dueDate {
  return [[__dueDate retain_stub] autorelease_stub];
}

- (void) setDueDate: (NSString *) dueDate {
  [dueDate retain_stub];
  [__dueDate release_stub];
  __dueDate = dueDate;
  __dueDate_isset = YES;
}

- (BOOL) dueDateIsSet {
  return __dueDate_isset;
}

- (void) unsetDueDate {
  [__dueDate release_stub];
  __dueDate = nil;
  __dueDate_isset = NO;
}

- (NSString *) taskDefinitionKey {
  return [[__taskDefinitionKey retain_stub] autorelease_stub];
}

- (void) setTaskDefinitionKey: (NSString *) taskDefinitionKey {
  [taskDefinitionKey retain_stub];
  [__taskDefinitionKey release_stub];
  __taskDefinitionKey = taskDefinitionKey;
  __taskDefinitionKey_isset = YES;
}

- (BOOL) taskDefinitionKeyIsSet {
  return __taskDefinitionKey_isset;
}

- (void) unsetTaskDefinitionKey {
  [__taskDefinitionKey release_stub];
  __taskDefinitionKey = nil;
  __taskDefinitionKey_isset = NO;
}

- (BOOL) isSuspended {
  return __isSuspended;
}

- (void) setIsSuspended: (BOOL) isSuspended {
  __isSuspended = isSuspended;
  __isSuspended_isset = YES;
}

- (BOOL) isSuspendedIsSet {
  return __isSuspended_isset;
}

- (void) unsetIsSuspended {
  __isSuspended_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPriority: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOwner: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAssignee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProcessDefinitionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProcessInstanceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExecutionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDueDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTaskDefinitionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsSuspended: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TTask"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__priority_isset) {
    [outProtocol writeFieldBeginWithName: @"priority" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __priority];
    [outProtocol writeFieldEnd];
  }
  if (__owner_isset) {
    if (__owner != nil) {
      [outProtocol writeFieldBeginWithName: @"owner" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __owner];
      [outProtocol writeFieldEnd];
    }
  }
  if (__assignee_isset) {
    if (__assignee != nil) {
      [outProtocol writeFieldBeginWithName: @"assignee" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __assignee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__processDefinitionId_isset) {
    if (__processDefinitionId != nil) {
      [outProtocol writeFieldBeginWithName: @"processDefinitionId" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __processDefinitionId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__processInstanceId_isset) {
    if (__processInstanceId != nil) {
      [outProtocol writeFieldBeginWithName: @"processInstanceId" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __processInstanceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__executionId_isset) {
    if (__executionId != nil) {
      [outProtocol writeFieldBeginWithName: @"executionId" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __executionId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createTime_isset) {
    if (__createTime != nil) {
      [outProtocol writeFieldBeginWithName: @"createTime" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __createTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dueDate_isset) {
    if (__dueDate != nil) {
      [outProtocol writeFieldBeginWithName: @"dueDate" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __dueDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__taskDefinitionKey_isset) {
    if (__taskDefinitionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"taskDefinitionKey" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __taskDefinitionKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isSuspended_isset) {
    [outProtocol writeFieldBeginWithName: @"isSuspended" type: TType_BOOL fieldID: 13];
    [outProtocol writeBool: __isSuspended];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__priority_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'priority' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTask("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",priority:"];
  [ms appendFormat: @"%i", __priority];
  [ms appendString: @",owner:"];
  [ms appendFormat: @"\"%@\"", __owner];
  [ms appendString: @",assignee:"];
  [ms appendFormat: @"\"%@\"", __assignee];
  [ms appendString: @",processDefinitionId:"];
  [ms appendFormat: @"\"%@\"", __processDefinitionId];
  [ms appendString: @",processInstanceId:"];
  [ms appendFormat: @"\"%@\"", __processInstanceId];
  [ms appendString: @",executionId:"];
  [ms appendFormat: @"\"%@\"", __executionId];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"\"%@\"", __createTime];
  [ms appendString: @",dueDate:"];
  [ms appendFormat: @"\"%@\"", __dueDate];
  [ms appendString: @",taskDefinitionKey:"];
  [ms appendFormat: @"\"%@\"", __taskDefinitionKey];
  [ms appendString: @",isSuspended:"];
  [ms appendFormat: @"%i", __isSuspended];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TAssignee

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id name: (Text) name email: (Text) email apiKey: (Text) apiKey
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __apiKey = [apiKey retain_stub];
  __apiKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"apiKey"])
  {
    __apiKey = [[decoder decodeObjectForKey: @"apiKey"] retain_stub];
    __apiKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__apiKey_isset)
  {
    [encoder encodeObject: __apiKey forKey: @"apiKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __email_isset ? 2654435761 : 0;
  if (__email_isset)
  {
    hash = (hash * 31) ^ [__email hash];
  }
  hash = (hash * 31) ^ __apiKey_isset ? 2654435761 : 0;
  if (__apiKey_isset)
  {
    hash = (hash * 31) ^ [__apiKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TAssignee class]]) {
    return NO;
  }
  TAssignee *other = (TAssignee *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__email_isset != other->__email_isset) ||
      (__email_isset && ((__email || other->__email) && ![__email isEqual:other->__email]))) {
    return NO;
  }
  if ((__apiKey_isset != other->__apiKey_isset) ||
      (__apiKey_isset && ((__apiKey || other->__apiKey) && ![__apiKey isEqual:other->__apiKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__name release_stub];
  [__email release_stub];
  [__apiKey release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) apiKey {
  return [[__apiKey retain_stub] autorelease_stub];
}

- (void) setApiKey: (NSString *) apiKey {
  [apiKey retain_stub];
  [__apiKey release_stub];
  __apiKey = apiKey;
  __apiKey_isset = YES;
}

- (BOOL) apiKeyIsSet {
  return __apiKey_isset;
}

- (void) unsetApiKey {
  [__apiKey release_stub];
  __apiKey = nil;
  __apiKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApiKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TAssignee"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__apiKey_isset) {
    if (__apiKey != nil) {
      [outProtocol writeFieldBeginWithName: @"apiKey" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __apiKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TAssignee("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",apiKey:"];
  [ms appendFormat: @"\"%@\"", __apiKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TProcess

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id label: (Text) label desc: (Text) desc status: (Text) status
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __label = [label retain_stub];
  __label_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __status = [status retain_stub];
  __status_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain_stub];
    __label_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain_stub];
    __status_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __label_isset ? 2654435761 : 0;
  if (__label_isset)
  {
    hash = (hash * 31) ^ [__label hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [__status hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TProcess class]]) {
    return NO;
  }
  TProcess *other = (TProcess *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__label_isset != other->__label_isset) ||
      (__label_isset && ((__label || other->__label) && ![__label isEqual:other->__label]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && ((__status || other->__status) && ![__status isEqual:other->__status]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__label release_stub];
  [__desc release_stub];
  [__status release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) label {
  return [[__label retain_stub] autorelease_stub];
}

- (void) setLabel: (NSString *) label {
  [label retain_stub];
  [__label release_stub];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release_stub];
  __label = nil;
  __label_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) status {
  return [[__status retain_stub] autorelease_stub];
}

- (void) setStatus: (NSString *) status {
  [status retain_stub];
  [__status release_stub];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release_stub];
  __status = nil;
  __status_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TProcess"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __status];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TProcess("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",status:"];
  [ms appendFormat: @"\"%@\"", __status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTaskInput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRelateds: (NSMutableArray *) relateds options: (NSMutableArray *) options fields: (NSMutableArray *) fields facts: (NSMutableDictionary *) facts form: (Text) form
{
  self = [super init];
  __relateds = [relateds retain_stub];
  __relateds_isset = YES;
  __options = [options retain_stub];
  __options_isset = YES;
  __fields = [fields retain_stub];
  __fields_isset = YES;
  __facts = [facts retain_stub];
  __facts_isset = YES;
  __form = [form retain_stub];
  __form_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"relateds"])
  {
    __relateds = [[decoder decodeObjectForKey: @"relateds"] retain_stub];
    __relateds_isset = YES;
  }
  if ([decoder containsValueForKey: @"options"])
  {
    __options = [[decoder decodeObjectForKey: @"options"] retain_stub];
    __options_isset = YES;
  }
  if ([decoder containsValueForKey: @"fields"])
  {
    __fields = [[decoder decodeObjectForKey: @"fields"] retain_stub];
    __fields_isset = YES;
  }
  if ([decoder containsValueForKey: @"facts"])
  {
    __facts = [[decoder decodeObjectForKey: @"facts"] retain_stub];
    __facts_isset = YES;
  }
  if ([decoder containsValueForKey: @"form"])
  {
    __form = [[decoder decodeObjectForKey: @"form"] retain_stub];
    __form_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__relateds_isset)
  {
    [encoder encodeObject: __relateds forKey: @"relateds"];
  }
  if (__options_isset)
  {
    [encoder encodeObject: __options forKey: @"options"];
  }
  if (__fields_isset)
  {
    [encoder encodeObject: __fields forKey: @"fields"];
  }
  if (__facts_isset)
  {
    [encoder encodeObject: __facts forKey: @"facts"];
  }
  if (__form_isset)
  {
    [encoder encodeObject: __form forKey: @"form"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __relateds_isset ? 2654435761 : 0;
  if (__relateds_isset)
  {
    hash = (hash * 31) ^ [__relateds hash];
  }
  hash = (hash * 31) ^ __options_isset ? 2654435761 : 0;
  if (__options_isset)
  {
    hash = (hash * 31) ^ [__options hash];
  }
  hash = (hash * 31) ^ __fields_isset ? 2654435761 : 0;
  if (__fields_isset)
  {
    hash = (hash * 31) ^ [__fields hash];
  }
  hash = (hash * 31) ^ __facts_isset ? 2654435761 : 0;
  if (__facts_isset)
  {
    hash = (hash * 31) ^ [__facts hash];
  }
  hash = (hash * 31) ^ __form_isset ? 2654435761 : 0;
  if (__form_isset)
  {
    hash = (hash * 31) ^ [__form hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTaskInput class]]) {
    return NO;
  }
  TTaskInput *other = (TTaskInput *)anObject;
  if ((__relateds_isset != other->__relateds_isset) ||
      (__relateds_isset && ((__relateds || other->__relateds) && ![__relateds isEqual:other->__relateds]))) {
    return NO;
  }
  if ((__options_isset != other->__options_isset) ||
      (__options_isset && ((__options || other->__options) && ![__options isEqual:other->__options]))) {
    return NO;
  }
  if ((__fields_isset != other->__fields_isset) ||
      (__fields_isset && ((__fields || other->__fields) && ![__fields isEqual:other->__fields]))) {
    return NO;
  }
  if ((__facts_isset != other->__facts_isset) ||
      (__facts_isset && ((__facts || other->__facts) && ![__facts isEqual:other->__facts]))) {
    return NO;
  }
  if ((__form_isset != other->__form_isset) ||
      (__form_isset && ((__form || other->__form) && ![__form isEqual:other->__form]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__relateds release_stub];
  [__options release_stub];
  [__fields release_stub];
  [__facts release_stub];
  [__form release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) relateds {
  return [[__relateds retain_stub] autorelease_stub];
}

- (void) setRelateds: (NSMutableArray *) relateds {
  [relateds retain_stub];
  [__relateds release_stub];
  __relateds = relateds;
  __relateds_isset = YES;
}

- (BOOL) relatedsIsSet {
  return __relateds_isset;
}

- (void) unsetRelateds {
  [__relateds release_stub];
  __relateds = nil;
  __relateds_isset = NO;
}

- (NSMutableArray *) options {
  return [[__options retain_stub] autorelease_stub];
}

- (void) setOptions: (NSMutableArray *) options {
  [options retain_stub];
  [__options release_stub];
  __options = options;
  __options_isset = YES;
}

- (BOOL) optionsIsSet {
  return __options_isset;
}

- (void) unsetOptions {
  [__options release_stub];
  __options = nil;
  __options_isset = NO;
}

- (NSMutableArray *) fields {
  return [[__fields retain_stub] autorelease_stub];
}

- (void) setFields: (NSMutableArray *) fields {
  [fields retain_stub];
  [__fields release_stub];
  __fields = fields;
  __fields_isset = YES;
}

- (BOOL) fieldsIsSet {
  return __fields_isset;
}

- (void) unsetFields {
  [__fields release_stub];
  __fields = nil;
  __fields_isset = NO;
}

- (NSMutableDictionary *) facts {
  return [[__facts retain_stub] autorelease_stub];
}

- (void) setFacts: (NSMutableDictionary *) facts {
  [facts retain_stub];
  [__facts release_stub];
  __facts = facts;
  __facts_isset = YES;
}

- (BOOL) factsIsSet {
  return __facts_isset;
}

- (void) unsetFacts {
  [__facts release_stub];
  __facts = nil;
  __facts_isset = NO;
}

- (NSString *) form {
  return [[__form retain_stub] autorelease_stub];
}

- (void) setForm: (NSString *) form {
  [form retain_stub];
  [__form release_stub];
  __form = form;
  __form_isset = YES;
}

- (BOOL) formIsSet {
  return __form_isset;
}

- (void) unsetForm {
  [__form release_stub];
  __form = nil;
  __form_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setRelateds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            NSString * _elem5 = [inProtocol readString];
            [fieldValue addObject: _elem5];
          }
          [inProtocol readListEnd];
          [self setOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            NSString * _elem8 = [inProtocol readString];
            [fieldValue addObject: _elem8];
          }
          [inProtocol readListEnd];
          [self setFields: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size9;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size9];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size9];
          int _i10;
          for (_i10 = 0; _i10 < _size9; ++_i10)
          {
            NSString * _key11 = [inProtocol readString];
            NSString * _val12 = [inProtocol readString];
            [fieldValue setObject: _val12 forKey: _key11];
          }
          [inProtocol readMapEnd];
          [self setFacts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setForm: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TTaskInput"];
  if (__relateds_isset) {
    if (__relateds != nil) {
      [outProtocol writeFieldBeginWithName: @"relateds" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__relateds count]];
        int idx14;
        for (idx14 = 0; idx14 < [__relateds count]; idx14++)
        {
          [outProtocol writeString: [__relateds objectAtIndex: idx14]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__options_isset) {
    if (__options != nil) {
      [outProtocol writeFieldBeginWithName: @"options" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__options count]];
        int idx16;
        for (idx16 = 0; idx16 < [__options count]; idx16++)
        {
          [outProtocol writeString: [__options objectAtIndex: idx16]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__fields_isset) {
    if (__fields != nil) {
      [outProtocol writeFieldBeginWithName: @"fields" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__fields count]];
        int idx18;
        for (idx18 = 0; idx18 < [__fields count]; idx18++)
        {
          [outProtocol writeString: [__fields objectAtIndex: idx18]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__facts_isset) {
    if (__facts != nil) {
      [outProtocol writeFieldBeginWithName: @"facts" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__facts count]];
        NSEnumerator * _iter19 = [__facts keyEnumerator];
        id key20;
        while ((key20 = [_iter19 nextObject]))
        {
          [outProtocol writeString: key20];
          [outProtocol writeString: [__facts objectForKey: key20]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__form_isset) {
    if (__form != nil) {
      [outProtocol writeFieldBeginWithName: @"form" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __form];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTaskInput("];
  [ms appendString: @"relateds:"];
  [ms appendFormat: @"%@", __relateds];
  [ms appendString: @",options:"];
  [ms appendFormat: @"%@", __options];
  [ms appendString: @",fields:"];
  [ms appendFormat: @"%@", __fields];
  [ms appendString: @",facts:"];
  [ms appendFormat: @"%@", __facts];
  [ms appendString: @",form:"];
  [ms appendFormat: @"\"%@\"", __form];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTaskHistory

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEntries: (NSMutableArray *) entries
{
  self = [super init];
  __entries = [entries retain_stub];
  __entries_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"entries"])
  {
    __entries = [[decoder decodeObjectForKey: @"entries"] retain_stub];
    __entries_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__entries_isset)
  {
    [encoder encodeObject: __entries forKey: @"entries"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __entries_isset ? 2654435761 : 0;
  if (__entries_isset)
  {
    hash = (hash * 31) ^ [__entries hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTaskHistory class]]) {
    return NO;
  }
  TTaskHistory *other = (TTaskHistory *)anObject;
  if ((__entries_isset != other->__entries_isset) ||
      (__entries_isset && ((__entries || other->__entries) && ![__entries isEqual:other->__entries]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__entries release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) entries {
  return [[__entries retain_stub] autorelease_stub];
}

- (void) setEntries: (NSMutableArray *) entries {
  [entries retain_stub];
  [__entries release_stub];
  __entries = entries;
  __entries_isset = YES;
}

- (BOOL) entriesIsSet {
  return __entries_isset;
}

- (void) unsetEntries {
  [__entries release_stub];
  __entries = nil;
  __entries_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size21;
          [inProtocol readListBeginReturningElementType: NULL size: &_size21];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size21];
          int _i22;
          for (_i22 = 0; _i22 < _size21; ++_i22)
          {
            NSString * _elem23 = [inProtocol readString];
            [fieldValue addObject: _elem23];
          }
          [inProtocol readListEnd];
          [self setEntries: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TTaskHistory"];
  if (__entries_isset) {
    if (__entries != nil) {
      [outProtocol writeFieldBeginWithName: @"entries" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__entries count]];
        int idx25;
        for (idx25 = 0; idx25 < [__entries count]; idx25++)
        {
          [outProtocol writeString: [__entries objectAtIndex: idx25]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTaskHistory("];
  [ms appendString: @"entries:"];
  [ms appendFormat: @"%@", __entries];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTaskDetail

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTask: (TTask *) task assignee: (TAssignee *) assignee process: (TProcess *) process input: (TTaskInput *) input history: (TTaskHistory *) history
{
  self = [super init];
  __task = [task retain_stub];
  __task_isset = YES;
  __assignee = [assignee retain_stub];
  __assignee_isset = YES;
  __process = [process retain_stub];
  __process_isset = YES;
  __input = [input retain_stub];
  __input_isset = YES;
  __history = [history retain_stub];
  __history_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"task"])
  {
    __task = [[decoder decodeObjectForKey: @"task"] retain_stub];
    __task_isset = YES;
  }
  if ([decoder containsValueForKey: @"assignee"])
  {
    __assignee = [[decoder decodeObjectForKey: @"assignee"] retain_stub];
    __assignee_isset = YES;
  }
  if ([decoder containsValueForKey: @"process"])
  {
    __process = [[decoder decodeObjectForKey: @"process"] retain_stub];
    __process_isset = YES;
  }
  if ([decoder containsValueForKey: @"input"])
  {
    __input = [[decoder decodeObjectForKey: @"input"] retain_stub];
    __input_isset = YES;
  }
  if ([decoder containsValueForKey: @"history"])
  {
    __history = [[decoder decodeObjectForKey: @"history"] retain_stub];
    __history_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__task_isset)
  {
    [encoder encodeObject: __task forKey: @"task"];
  }
  if (__assignee_isset)
  {
    [encoder encodeObject: __assignee forKey: @"assignee"];
  }
  if (__process_isset)
  {
    [encoder encodeObject: __process forKey: @"process"];
  }
  if (__input_isset)
  {
    [encoder encodeObject: __input forKey: @"input"];
  }
  if (__history_isset)
  {
    [encoder encodeObject: __history forKey: @"history"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __task_isset ? 2654435761 : 0;
  if (__task_isset)
  {
    hash = (hash * 31) ^ [__task hash];
  }
  hash = (hash * 31) ^ __assignee_isset ? 2654435761 : 0;
  if (__assignee_isset)
  {
    hash = (hash * 31) ^ [__assignee hash];
  }
  hash = (hash * 31) ^ __process_isset ? 2654435761 : 0;
  if (__process_isset)
  {
    hash = (hash * 31) ^ [__process hash];
  }
  hash = (hash * 31) ^ __input_isset ? 2654435761 : 0;
  if (__input_isset)
  {
    hash = (hash * 31) ^ [__input hash];
  }
  hash = (hash * 31) ^ __history_isset ? 2654435761 : 0;
  if (__history_isset)
  {
    hash = (hash * 31) ^ [__history hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTaskDetail class]]) {
    return NO;
  }
  TTaskDetail *other = (TTaskDetail *)anObject;
  if ((__task_isset != other->__task_isset) ||
      (__task_isset && ((__task || other->__task) && ![__task isEqual:other->__task]))) {
    return NO;
  }
  if ((__assignee_isset != other->__assignee_isset) ||
      (__assignee_isset && ((__assignee || other->__assignee) && ![__assignee isEqual:other->__assignee]))) {
    return NO;
  }
  if ((__process_isset != other->__process_isset) ||
      (__process_isset && ((__process || other->__process) && ![__process isEqual:other->__process]))) {
    return NO;
  }
  if ((__input_isset != other->__input_isset) ||
      (__input_isset && ((__input || other->__input) && ![__input isEqual:other->__input]))) {
    return NO;
  }
  if ((__history_isset != other->__history_isset) ||
      (__history_isset && ((__history || other->__history) && ![__history isEqual:other->__history]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__task release_stub];
  [__assignee release_stub];
  [__process release_stub];
  [__input release_stub];
  [__history release_stub];
  [super dealloc_stub];
}

- (TTask *) task {
  return [[__task retain_stub] autorelease_stub];
}

- (void) setTask: (TTask *) task {
  [task retain_stub];
  [__task release_stub];
  __task = task;
  __task_isset = YES;
}

- (BOOL) taskIsSet {
  return __task_isset;
}

- (void) unsetTask {
  [__task release_stub];
  __task = nil;
  __task_isset = NO;
}

- (TAssignee *) assignee {
  return [[__assignee retain_stub] autorelease_stub];
}

- (void) setAssignee: (TAssignee *) assignee {
  [assignee retain_stub];
  [__assignee release_stub];
  __assignee = assignee;
  __assignee_isset = YES;
}

- (BOOL) assigneeIsSet {
  return __assignee_isset;
}

- (void) unsetAssignee {
  [__assignee release_stub];
  __assignee = nil;
  __assignee_isset = NO;
}

- (TProcess *) process {
  return [[__process retain_stub] autorelease_stub];
}

- (void) setProcess: (TProcess *) process {
  [process retain_stub];
  [__process release_stub];
  __process = process;
  __process_isset = YES;
}

- (BOOL) processIsSet {
  return __process_isset;
}

- (void) unsetProcess {
  [__process release_stub];
  __process = nil;
  __process_isset = NO;
}

- (TTaskInput *) input {
  return [[__input retain_stub] autorelease_stub];
}

- (void) setInput: (TTaskInput *) input {
  [input retain_stub];
  [__input release_stub];
  __input = input;
  __input_isset = YES;
}

- (BOOL) inputIsSet {
  return __input_isset;
}

- (void) unsetInput {
  [__input release_stub];
  __input = nil;
  __input_isset = NO;
}

- (TTaskHistory *) history {
  return [[__history retain_stub] autorelease_stub];
}

- (void) setHistory: (TTaskHistory *) history {
  [history retain_stub];
  [__history release_stub];
  __history = history;
  __history_isset = YES;
}

- (BOOL) historyIsSet {
  return __history_isset;
}

- (void) unsetHistory {
  [__history release_stub];
  __history = nil;
  __history_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TTask *fieldValue = [[TTask alloc] init];
          [fieldValue read: inProtocol];
          [self setTask: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TAssignee *fieldValue = [[TAssignee alloc] init];
          [fieldValue read: inProtocol];
          [self setAssignee: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TProcess *fieldValue = [[TProcess alloc] init];
          [fieldValue read: inProtocol];
          [self setProcess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          TTaskInput *fieldValue = [[TTaskInput alloc] init];
          [fieldValue read: inProtocol];
          [self setInput: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          TTaskHistory *fieldValue = [[TTaskHistory alloc] init];
          [fieldValue read: inProtocol];
          [self setHistory: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TTaskDetail"];
  if (__task_isset) {
    if (__task != nil) {
      [outProtocol writeFieldBeginWithName: @"task" type: TType_STRUCT fieldID: 1];
      [__task write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__assignee_isset) {
    if (__assignee != nil) {
      [outProtocol writeFieldBeginWithName: @"assignee" type: TType_STRUCT fieldID: 2];
      [__assignee write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__process_isset) {
    if (__process != nil) {
      [outProtocol writeFieldBeginWithName: @"process" type: TType_STRUCT fieldID: 3];
      [__process write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__input_isset) {
    if (__input != nil) {
      [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 4];
      [__input write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__history_isset) {
    if (__history != nil) {
      [outProtocol writeFieldBeginWithName: @"history" type: TType_STRUCT fieldID: 5];
      [__history write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__task_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'task' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTaskDetail("];
  [ms appendString: @"task:"];
  [ms appendFormat: @"%@", __task];
  [ms appendString: @",assignee:"];
  [ms appendFormat: @"%@", __assignee];
  [ms appendString: @",process:"];
  [ms appendFormat: @"%@", __process];
  [ms appendString: @",input:"];
  [ms appendFormat: @"%@", __input];
  [ms appendString: @",history:"];
  [ms appendFormat: @"%@", __history];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TProcessType

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id key: (Text) key name: (Text) name category: (Text) category desc: (Text) desc resourceName: (Text) resourceName deploymentId: (Text) deploymentId version: (int32_t) version hasStartForm: (BOOL) hasStartForm isSuspended: (BOOL) isSuspended tenantId: (Text) tenantId bpmnXML: (Text) bpmnXML
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __key = [key retain_stub];
  __key_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __category = [category retain_stub];
  __category_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __resourceName = [resourceName retain_stub];
  __resourceName_isset = YES;
  __deploymentId = [deploymentId retain_stub];
  __deploymentId_isset = YES;
  __version = version;
  __version_isset = YES;
  __hasStartForm = hasStartForm;
  __hasStartForm_isset = YES;
  __isSuspended = isSuspended;
  __isSuspended_isset = YES;
  __tenantId = [tenantId retain_stub];
  __tenantId_isset = YES;
  __bpmnXML = [bpmnXML retain_stub];
  __bpmnXML_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [[decoder decodeObjectForKey: @"key"] retain_stub];
    __key_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"category"])
  {
    __category = [[decoder decodeObjectForKey: @"category"] retain_stub];
    __category_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"resourceName"])
  {
    __resourceName = [[decoder decodeObjectForKey: @"resourceName"] retain_stub];
    __resourceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deploymentId"])
  {
    __deploymentId = [[decoder decodeObjectForKey: @"deploymentId"] retain_stub];
    __deploymentId_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [decoder decodeInt32ForKey: @"version"];
    __version_isset = YES;
  }
  if ([decoder containsValueForKey: @"hasStartForm"])
  {
    __hasStartForm = [decoder decodeBoolForKey: @"hasStartForm"];
    __hasStartForm_isset = YES;
  }
  if ([decoder containsValueForKey: @"isSuspended"])
  {
    __isSuspended = [decoder decodeBoolForKey: @"isSuspended"];
    __isSuspended_isset = YES;
  }
  if ([decoder containsValueForKey: @"tenantId"])
  {
    __tenantId = [[decoder decodeObjectForKey: @"tenantId"] retain_stub];
    __tenantId_isset = YES;
  }
  if ([decoder containsValueForKey: @"bpmnXML"])
  {
    __bpmnXML = [[decoder decodeObjectForKey: @"bpmnXML"] retain_stub];
    __bpmnXML_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__key_isset)
  {
    [encoder encodeObject: __key forKey: @"key"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__category_isset)
  {
    [encoder encodeObject: __category forKey: @"category"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__resourceName_isset)
  {
    [encoder encodeObject: __resourceName forKey: @"resourceName"];
  }
  if (__deploymentId_isset)
  {
    [encoder encodeObject: __deploymentId forKey: @"deploymentId"];
  }
  if (__version_isset)
  {
    [encoder encodeInt32: __version forKey: @"version"];
  }
  if (__hasStartForm_isset)
  {
    [encoder encodeBool: __hasStartForm forKey: @"hasStartForm"];
  }
  if (__isSuspended_isset)
  {
    [encoder encodeBool: __isSuspended forKey: @"isSuspended"];
  }
  if (__tenantId_isset)
  {
    [encoder encodeObject: __tenantId forKey: @"tenantId"];
  }
  if (__bpmnXML_isset)
  {
    [encoder encodeObject: __bpmnXML forKey: @"bpmnXML"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __key_isset ? 2654435761 : 0;
  if (__key_isset)
  {
    hash = (hash * 31) ^ [__key hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __category_isset ? 2654435761 : 0;
  if (__category_isset)
  {
    hash = (hash * 31) ^ [__category hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __resourceName_isset ? 2654435761 : 0;
  if (__resourceName_isset)
  {
    hash = (hash * 31) ^ [__resourceName hash];
  }
  hash = (hash * 31) ^ __deploymentId_isset ? 2654435761 : 0;
  if (__deploymentId_isset)
  {
    hash = (hash * 31) ^ [__deploymentId hash];
  }
  hash = (hash * 31) ^ __version_isset ? 2654435761 : 0;
  if (__version_isset)
  {
    hash = (hash * 31) ^ [@(__version) hash];
  }
  hash = (hash * 31) ^ __hasStartForm_isset ? 2654435761 : 0;
  if (__hasStartForm_isset)
  {
    hash = (hash * 31) ^ [@(__hasStartForm) hash];
  }
  hash = (hash * 31) ^ __isSuspended_isset ? 2654435761 : 0;
  if (__isSuspended_isset)
  {
    hash = (hash * 31) ^ [@(__isSuspended) hash];
  }
  hash = (hash * 31) ^ __tenantId_isset ? 2654435761 : 0;
  if (__tenantId_isset)
  {
    hash = (hash * 31) ^ [__tenantId hash];
  }
  hash = (hash * 31) ^ __bpmnXML_isset ? 2654435761 : 0;
  if (__bpmnXML_isset)
  {
    hash = (hash * 31) ^ [__bpmnXML hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TProcessType class]]) {
    return NO;
  }
  TProcessType *other = (TProcessType *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__key_isset != other->__key_isset) ||
      (__key_isset && ((__key || other->__key) && ![__key isEqual:other->__key]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__category_isset != other->__category_isset) ||
      (__category_isset && ((__category || other->__category) && ![__category isEqual:other->__category]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__resourceName_isset != other->__resourceName_isset) ||
      (__resourceName_isset && ((__resourceName || other->__resourceName) && ![__resourceName isEqual:other->__resourceName]))) {
    return NO;
  }
  if ((__deploymentId_isset != other->__deploymentId_isset) ||
      (__deploymentId_isset && ((__deploymentId || other->__deploymentId) && ![__deploymentId isEqual:other->__deploymentId]))) {
    return NO;
  }
  if ((__version_isset != other->__version_isset) ||
      (__version_isset && (__version != other->__version))) {
    return NO;
  }
  if ((__hasStartForm_isset != other->__hasStartForm_isset) ||
      (__hasStartForm_isset && (__hasStartForm != other->__hasStartForm))) {
    return NO;
  }
  if ((__isSuspended_isset != other->__isSuspended_isset) ||
      (__isSuspended_isset && (__isSuspended != other->__isSuspended))) {
    return NO;
  }
  if ((__tenantId_isset != other->__tenantId_isset) ||
      (__tenantId_isset && ((__tenantId || other->__tenantId) && ![__tenantId isEqual:other->__tenantId]))) {
    return NO;
  }
  if ((__bpmnXML_isset != other->__bpmnXML_isset) ||
      (__bpmnXML_isset && ((__bpmnXML || other->__bpmnXML) && ![__bpmnXML isEqual:other->__bpmnXML]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__key release_stub];
  [__name release_stub];
  [__category release_stub];
  [__desc release_stub];
  [__resourceName release_stub];
  [__deploymentId release_stub];
  [__tenantId release_stub];
  [__bpmnXML release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) key {
  return [[__key retain_stub] autorelease_stub];
}

- (void) setKey: (NSString *) key {
  [key retain_stub];
  [__key release_stub];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release_stub];
  __key = nil;
  __key_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) category {
  return [[__category retain_stub] autorelease_stub];
}

- (void) setCategory: (NSString *) category {
  [category retain_stub];
  [__category release_stub];
  __category = category;
  __category_isset = YES;
}

- (BOOL) categoryIsSet {
  return __category_isset;
}

- (void) unsetCategory {
  [__category release_stub];
  __category = nil;
  __category_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) resourceName {
  return [[__resourceName retain_stub] autorelease_stub];
}

- (void) setResourceName: (NSString *) resourceName {
  [resourceName retain_stub];
  [__resourceName release_stub];
  __resourceName = resourceName;
  __resourceName_isset = YES;
}

- (BOOL) resourceNameIsSet {
  return __resourceName_isset;
}

- (void) unsetResourceName {
  [__resourceName release_stub];
  __resourceName = nil;
  __resourceName_isset = NO;
}

- (NSString *) deploymentId {
  return [[__deploymentId retain_stub] autorelease_stub];
}

- (void) setDeploymentId: (NSString *) deploymentId {
  [deploymentId retain_stub];
  [__deploymentId release_stub];
  __deploymentId = deploymentId;
  __deploymentId_isset = YES;
}

- (BOOL) deploymentIdIsSet {
  return __deploymentId_isset;
}

- (void) unsetDeploymentId {
  [__deploymentId release_stub];
  __deploymentId = nil;
  __deploymentId_isset = NO;
}

- (int32_t) version {
  return __version;
}

- (void) setVersion: (int32_t) version {
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  __version_isset = NO;
}

- (BOOL) hasStartForm {
  return __hasStartForm;
}

- (void) setHasStartForm: (BOOL) hasStartForm {
  __hasStartForm = hasStartForm;
  __hasStartForm_isset = YES;
}

- (BOOL) hasStartFormIsSet {
  return __hasStartForm_isset;
}

- (void) unsetHasStartForm {
  __hasStartForm_isset = NO;
}

- (BOOL) isSuspended {
  return __isSuspended;
}

- (void) setIsSuspended: (BOOL) isSuspended {
  __isSuspended = isSuspended;
  __isSuspended_isset = YES;
}

- (BOOL) isSuspendedIsSet {
  return __isSuspended_isset;
}

- (void) unsetIsSuspended {
  __isSuspended_isset = NO;
}

- (NSString *) tenantId {
  return [[__tenantId retain_stub] autorelease_stub];
}

- (void) setTenantId: (NSString *) tenantId {
  [tenantId retain_stub];
  [__tenantId release_stub];
  __tenantId = tenantId;
  __tenantId_isset = YES;
}

- (BOOL) tenantIdIsSet {
  return __tenantId_isset;
}

- (void) unsetTenantId {
  [__tenantId release_stub];
  __tenantId = nil;
  __tenantId_isset = NO;
}

- (NSString *) bpmnXML {
  return [[__bpmnXML retain_stub] autorelease_stub];
}

- (void) setBpmnXML: (NSString *) bpmnXML {
  [bpmnXML retain_stub];
  [__bpmnXML release_stub];
  __bpmnXML = bpmnXML;
  __bpmnXML_isset = YES;
}

- (BOOL) bpmnXMLIsSet {
  return __bpmnXML_isset;
}

- (void) unsetBpmnXML {
  [__bpmnXML release_stub];
  __bpmnXML = nil;
  __bpmnXML_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCategory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setResourceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeploymentId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHasStartForm: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsSuspended: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTenantId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBpmnXML: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TProcessType"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__category_isset) {
    if (__category != nil) {
      [outProtocol writeFieldBeginWithName: @"category" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __category];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resourceName_isset) {
    if (__resourceName != nil) {
      [outProtocol writeFieldBeginWithName: @"resourceName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __resourceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deploymentId_isset) {
    if (__deploymentId != nil) {
      [outProtocol writeFieldBeginWithName: @"deploymentId" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __deploymentId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__version_isset) {
    [outProtocol writeFieldBeginWithName: @"version" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __version];
    [outProtocol writeFieldEnd];
  }
  if (__hasStartForm_isset) {
    [outProtocol writeFieldBeginWithName: @"hasStartForm" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __hasStartForm];
    [outProtocol writeFieldEnd];
  }
  if (__isSuspended_isset) {
    [outProtocol writeFieldBeginWithName: @"isSuspended" type: TType_BOOL fieldID: 10];
    [outProtocol writeBool: __isSuspended];
    [outProtocol writeFieldEnd];
  }
  if (__tenantId_isset) {
    if (__tenantId != nil) {
      [outProtocol writeFieldBeginWithName: @"tenantId" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __tenantId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bpmnXML_isset) {
    if (__bpmnXML != nil) {
      [outProtocol writeFieldBeginWithName: @"bpmnXML" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __bpmnXML];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__key_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'key' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TProcessType("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",category:"];
  [ms appendFormat: @"\"%@\"", __category];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",resourceName:"];
  [ms appendFormat: @"\"%@\"", __resourceName];
  [ms appendString: @",deploymentId:"];
  [ms appendFormat: @"\"%@\"", __deploymentId];
  [ms appendString: @",version:"];
  [ms appendFormat: @"%i", __version];
  [ms appendString: @",hasStartForm:"];
  [ms appendFormat: @"%i", __hasStartForm];
  [ms appendString: @",isSuspended:"];
  [ms appendFormat: @"%i", __isSuspended];
  [ms appendString: @",tenantId:"];
  [ms appendFormat: @"\"%@\"", __tenantId];
  [ms appendString: @",bpmnXML:"];
  [ms appendFormat: @"\"%@\"", __bpmnXML];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTProcessType

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id name: (Text) name
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTProcessType class]]) {
    return NO;
  }
  TTProcessType *other = (TTProcessType *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__name release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TTProcessType"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTProcessType("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TApplication

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id key: (Text) key name: (Text) name icon: (Text) icon
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __key = [key retain_stub];
  __key_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __icon = [icon retain_stub];
  __icon_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [[decoder decodeObjectForKey: @"key"] retain_stub];
    __key_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"icon"])
  {
    __icon = [[decoder decodeObjectForKey: @"icon"] retain_stub];
    __icon_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__key_isset)
  {
    [encoder encodeObject: __key forKey: @"key"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__icon_isset)
  {
    [encoder encodeObject: __icon forKey: @"icon"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __key_isset ? 2654435761 : 0;
  if (__key_isset)
  {
    hash = (hash * 31) ^ [__key hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __icon_isset ? 2654435761 : 0;
  if (__icon_isset)
  {
    hash = (hash * 31) ^ [__icon hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TApplication class]]) {
    return NO;
  }
  TApplication *other = (TApplication *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__key_isset != other->__key_isset) ||
      (__key_isset && ((__key || other->__key) && ![__key isEqual:other->__key]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__icon_isset != other->__icon_isset) ||
      (__icon_isset && ((__icon || other->__icon) && ![__icon isEqual:other->__icon]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__key release_stub];
  [__name release_stub];
  [__icon release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) key {
  return [[__key retain_stub] autorelease_stub];
}

- (void) setKey: (NSString *) key {
  [key retain_stub];
  [__key release_stub];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release_stub];
  __key = nil;
  __key_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) icon {
  return [[__icon retain_stub] autorelease_stub];
}

- (void) setIcon: (NSString *) icon {
  [icon retain_stub];
  [__icon release_stub];
  __icon = icon;
  __icon_isset = YES;
}

- (BOOL) iconIsSet {
  return __icon_isset;
}

- (void) unsetIcon {
  [__icon release_stub];
  __icon = nil;
  __icon_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIcon: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TApplication"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__icon_isset) {
    if (__icon != nil) {
      [outProtocol writeFieldBeginWithName: @"icon" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __icon];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__key_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'key' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__icon_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'icon' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TApplication("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",icon:"];
  [ms appendFormat: @"\"%@\"", __icon];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TProvider

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTaskname: (Text) taskname taskkey: (Text) taskkey providerid: (Text) providerid
{
  self = [super init];
  __taskname = [taskname retain_stub];
  __taskname_isset = YES;
  __taskkey = [taskkey retain_stub];
  __taskkey_isset = YES;
  __providerid = [providerid retain_stub];
  __providerid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"taskname"])
  {
    __taskname = [[decoder decodeObjectForKey: @"taskname"] retain_stub];
    __taskname_isset = YES;
  }
  if ([decoder containsValueForKey: @"taskkey"])
  {
    __taskkey = [[decoder decodeObjectForKey: @"taskkey"] retain_stub];
    __taskkey_isset = YES;
  }
  if ([decoder containsValueForKey: @"providerid"])
  {
    __providerid = [[decoder decodeObjectForKey: @"providerid"] retain_stub];
    __providerid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__taskname_isset)
  {
    [encoder encodeObject: __taskname forKey: @"taskname"];
  }
  if (__taskkey_isset)
  {
    [encoder encodeObject: __taskkey forKey: @"taskkey"];
  }
  if (__providerid_isset)
  {
    [encoder encodeObject: __providerid forKey: @"providerid"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __taskname_isset ? 2654435761 : 0;
  if (__taskname_isset)
  {
    hash = (hash * 31) ^ [__taskname hash];
  }
  hash = (hash * 31) ^ __taskkey_isset ? 2654435761 : 0;
  if (__taskkey_isset)
  {
    hash = (hash * 31) ^ [__taskkey hash];
  }
  hash = (hash * 31) ^ __providerid_isset ? 2654435761 : 0;
  if (__providerid_isset)
  {
    hash = (hash * 31) ^ [__providerid hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TProvider class]]) {
    return NO;
  }
  TProvider *other = (TProvider *)anObject;
  if ((__taskname_isset != other->__taskname_isset) ||
      (__taskname_isset && ((__taskname || other->__taskname) && ![__taskname isEqual:other->__taskname]))) {
    return NO;
  }
  if ((__taskkey_isset != other->__taskkey_isset) ||
      (__taskkey_isset && ((__taskkey || other->__taskkey) && ![__taskkey isEqual:other->__taskkey]))) {
    return NO;
  }
  if ((__providerid_isset != other->__providerid_isset) ||
      (__providerid_isset && ((__providerid || other->__providerid) && ![__providerid isEqual:other->__providerid]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__taskname release_stub];
  [__taskkey release_stub];
  [__providerid release_stub];
  [super dealloc_stub];
}

- (NSString *) taskname {
  return [[__taskname retain_stub] autorelease_stub];
}

- (void) setTaskname: (NSString *) taskname {
  [taskname retain_stub];
  [__taskname release_stub];
  __taskname = taskname;
  __taskname_isset = YES;
}

- (BOOL) tasknameIsSet {
  return __taskname_isset;
}

- (void) unsetTaskname {
  [__taskname release_stub];
  __taskname = nil;
  __taskname_isset = NO;
}

- (NSString *) taskkey {
  return [[__taskkey retain_stub] autorelease_stub];
}

- (void) setTaskkey: (NSString *) taskkey {
  [taskkey retain_stub];
  [__taskkey release_stub];
  __taskkey = taskkey;
  __taskkey_isset = YES;
}

- (BOOL) taskkeyIsSet {
  return __taskkey_isset;
}

- (void) unsetTaskkey {
  [__taskkey release_stub];
  __taskkey = nil;
  __taskkey_isset = NO;
}

- (NSString *) providerid {
  return [[__providerid retain_stub] autorelease_stub];
}

- (void) setProviderid: (NSString *) providerid {
  [providerid retain_stub];
  [__providerid release_stub];
  __providerid = providerid;
  __providerid_isset = YES;
}

- (BOOL) provideridIsSet {
  return __providerid_isset;
}

- (void) unsetProviderid {
  [__providerid release_stub];
  __providerid = nil;
  __providerid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTaskname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTaskkey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProviderid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TProvider"];
  if (__taskname_isset) {
    if (__taskname != nil) {
      [outProtocol writeFieldBeginWithName: @"taskname" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __taskname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__taskkey_isset) {
    if (__taskkey != nil) {
      [outProtocol writeFieldBeginWithName: @"taskkey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __taskkey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__providerid_isset) {
    if (__providerid != nil) {
      [outProtocol writeFieldBeginWithName: @"providerid" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __providerid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TProvider("];
  [ms appendString: @"taskname:"];
  [ms appendFormat: @"\"%@\"", __taskname];
  [ms appendString: @",taskkey:"];
  [ms appendFormat: @"\"%@\"", __taskkey];
  [ms appendString: @",providerid:"];
  [ms appendFormat: @"\"%@\"", __providerid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TForm

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTaskname: (Text) taskname taskkey: (Text) taskkey formid: (Text) formid formname: (Text) formname
{
  self = [super init];
  __taskname = [taskname retain_stub];
  __taskname_isset = YES;
  __taskkey = [taskkey retain_stub];
  __taskkey_isset = YES;
  __formid = [formid retain_stub];
  __formid_isset = YES;
  __formname = [formname retain_stub];
  __formname_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"taskname"])
  {
    __taskname = [[decoder decodeObjectForKey: @"taskname"] retain_stub];
    __taskname_isset = YES;
  }
  if ([decoder containsValueForKey: @"taskkey"])
  {
    __taskkey = [[decoder decodeObjectForKey: @"taskkey"] retain_stub];
    __taskkey_isset = YES;
  }
  if ([decoder containsValueForKey: @"formid"])
  {
    __formid = [[decoder decodeObjectForKey: @"formid"] retain_stub];
    __formid_isset = YES;
  }
  if ([decoder containsValueForKey: @"formname"])
  {
    __formname = [[decoder decodeObjectForKey: @"formname"] retain_stub];
    __formname_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__taskname_isset)
  {
    [encoder encodeObject: __taskname forKey: @"taskname"];
  }
  if (__taskkey_isset)
  {
    [encoder encodeObject: __taskkey forKey: @"taskkey"];
  }
  if (__formid_isset)
  {
    [encoder encodeObject: __formid forKey: @"formid"];
  }
  if (__formname_isset)
  {
    [encoder encodeObject: __formname forKey: @"formname"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __taskname_isset ? 2654435761 : 0;
  if (__taskname_isset)
  {
    hash = (hash * 31) ^ [__taskname hash];
  }
  hash = (hash * 31) ^ __taskkey_isset ? 2654435761 : 0;
  if (__taskkey_isset)
  {
    hash = (hash * 31) ^ [__taskkey hash];
  }
  hash = (hash * 31) ^ __formid_isset ? 2654435761 : 0;
  if (__formid_isset)
  {
    hash = (hash * 31) ^ [__formid hash];
  }
  hash = (hash * 31) ^ __formname_isset ? 2654435761 : 0;
  if (__formname_isset)
  {
    hash = (hash * 31) ^ [__formname hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TForm class]]) {
    return NO;
  }
  TForm *other = (TForm *)anObject;
  if ((__taskname_isset != other->__taskname_isset) ||
      (__taskname_isset && ((__taskname || other->__taskname) && ![__taskname isEqual:other->__taskname]))) {
    return NO;
  }
  if ((__taskkey_isset != other->__taskkey_isset) ||
      (__taskkey_isset && ((__taskkey || other->__taskkey) && ![__taskkey isEqual:other->__taskkey]))) {
    return NO;
  }
  if ((__formid_isset != other->__formid_isset) ||
      (__formid_isset && ((__formid || other->__formid) && ![__formid isEqual:other->__formid]))) {
    return NO;
  }
  if ((__formname_isset != other->__formname_isset) ||
      (__formname_isset && ((__formname || other->__formname) && ![__formname isEqual:other->__formname]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__taskname release_stub];
  [__taskkey release_stub];
  [__formid release_stub];
  [__formname release_stub];
  [super dealloc_stub];
}

- (NSString *) taskname {
  return [[__taskname retain_stub] autorelease_stub];
}

- (void) setTaskname: (NSString *) taskname {
  [taskname retain_stub];
  [__taskname release_stub];
  __taskname = taskname;
  __taskname_isset = YES;
}

- (BOOL) tasknameIsSet {
  return __taskname_isset;
}

- (void) unsetTaskname {
  [__taskname release_stub];
  __taskname = nil;
  __taskname_isset = NO;
}

- (NSString *) taskkey {
  return [[__taskkey retain_stub] autorelease_stub];
}

- (void) setTaskkey: (NSString *) taskkey {
  [taskkey retain_stub];
  [__taskkey release_stub];
  __taskkey = taskkey;
  __taskkey_isset = YES;
}

- (BOOL) taskkeyIsSet {
  return __taskkey_isset;
}

- (void) unsetTaskkey {
  [__taskkey release_stub];
  __taskkey = nil;
  __taskkey_isset = NO;
}

- (NSString *) formid {
  return [[__formid retain_stub] autorelease_stub];
}

- (void) setFormid: (NSString *) formid {
  [formid retain_stub];
  [__formid release_stub];
  __formid = formid;
  __formid_isset = YES;
}

- (BOOL) formidIsSet {
  return __formid_isset;
}

- (void) unsetFormid {
  [__formid release_stub];
  __formid = nil;
  __formid_isset = NO;
}

- (NSString *) formname {
  return [[__formname retain_stub] autorelease_stub];
}

- (void) setFormname: (NSString *) formname {
  [formname retain_stub];
  [__formname release_stub];
  __formname = formname;
  __formname_isset = YES;
}

- (BOOL) formnameIsSet {
  return __formname_isset;
}

- (void) unsetFormname {
  [__formname release_stub];
  __formname = nil;
  __formname_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTaskname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTaskkey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFormid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFormname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TForm"];
  if (__taskname_isset) {
    if (__taskname != nil) {
      [outProtocol writeFieldBeginWithName: @"taskname" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __taskname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__taskkey_isset) {
    if (__taskkey != nil) {
      [outProtocol writeFieldBeginWithName: @"taskkey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __taskkey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__formid_isset) {
    if (__formid != nil) {
      [outProtocol writeFieldBeginWithName: @"formid" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __formid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__formname_isset) {
    if (__formname != nil) {
      [outProtocol writeFieldBeginWithName: @"formname" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __formname];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__taskname_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'taskname' is not set."];
  }
  if (!__taskkey_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'taskkey' is not set."];
  }
  if (!__formid_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'formid' is not set."];
  }
  if (!__formname_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'formname' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TForm("];
  [ms appendString: @"taskname:"];
  [ms appendFormat: @"\"%@\"", __taskname];
  [ms appendString: @",taskkey:"];
  [ms appendFormat: @"\"%@\"", __taskkey];
  [ms appendString: @",formid:"];
  [ms appendFormat: @"\"%@\"", __formid];
  [ms appendString: @",formname:"];
  [ms appendFormat: @"\"%@\"", __formname];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TOrigin

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id name: (Text) name desc: (Text) desc creatorId: (Text) creatorId createDate: (Timestamp) createDate checksum: (int64_t) checksum
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __creatorId = [creatorId retain_stub];
  __creatorId_isset = YES;
  __createDate = createDate;
  __createDate_isset = YES;
  __checksum = checksum;
  __checksum_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"creatorId"])
  {
    __creatorId = [[decoder decodeObjectForKey: @"creatorId"] retain_stub];
    __creatorId_isset = YES;
  }
  if ([decoder containsValueForKey: @"createDate"])
  {
    __createDate = [decoder decodeInt64ForKey: @"createDate"];
    __createDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"checksum"])
  {
    __checksum = [decoder decodeInt64ForKey: @"checksum"];
    __checksum_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__creatorId_isset)
  {
    [encoder encodeObject: __creatorId forKey: @"creatorId"];
  }
  if (__createDate_isset)
  {
    [encoder encodeInt64: __createDate forKey: @"createDate"];
  }
  if (__checksum_isset)
  {
    [encoder encodeInt64: __checksum forKey: @"checksum"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __creatorId_isset ? 2654435761 : 0;
  if (__creatorId_isset)
  {
    hash = (hash * 31) ^ [__creatorId hash];
  }
  hash = (hash * 31) ^ __createDate_isset ? 2654435761 : 0;
  if (__createDate_isset)
  {
    hash = (hash * 31) ^ [@(__createDate) hash];
  }
  hash = (hash * 31) ^ __checksum_isset ? 2654435761 : 0;
  if (__checksum_isset)
  {
    hash = (hash * 31) ^ [@(__checksum) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TOrigin class]]) {
    return NO;
  }
  TOrigin *other = (TOrigin *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__creatorId_isset != other->__creatorId_isset) ||
      (__creatorId_isset && ((__creatorId || other->__creatorId) && ![__creatorId isEqual:other->__creatorId]))) {
    return NO;
  }
  if ((__createDate_isset != other->__createDate_isset) ||
      (__createDate_isset && (__createDate != other->__createDate))) {
    return NO;
  }
  if ((__checksum_isset != other->__checksum_isset) ||
      (__checksum_isset && (__checksum != other->__checksum))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__name release_stub];
  [__desc release_stub];
  [__creatorId release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) creatorId {
  return [[__creatorId retain_stub] autorelease_stub];
}

- (void) setCreatorId: (NSString *) creatorId {
  [creatorId retain_stub];
  [__creatorId release_stub];
  __creatorId = creatorId;
  __creatorId_isset = YES;
}

- (BOOL) creatorIdIsSet {
  return __creatorId_isset;
}

- (void) unsetCreatorId {
  [__creatorId release_stub];
  __creatorId = nil;
  __creatorId_isset = NO;
}

- (int64_t) createDate {
  return __createDate;
}

- (void) setCreateDate: (int64_t) createDate {
  __createDate = createDate;
  __createDate_isset = YES;
}

- (BOOL) createDateIsSet {
  return __createDate_isset;
}

- (void) unsetCreateDate {
  __createDate_isset = NO;
}

- (int64_t) checksum {
  return __checksum;
}

- (void) setChecksum: (int64_t) checksum {
  __checksum = checksum;
  __checksum_isset = YES;
}

- (BOOL) checksumIsSet {
  return __checksum_isset;
}

- (void) unsetChecksum {
  __checksum_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreatorId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreateDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setChecksum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TOrigin"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__creatorId_isset) {
    if (__creatorId != nil) {
      [outProtocol writeFieldBeginWithName: @"creatorId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __creatorId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createDate_isset) {
    [outProtocol writeFieldBeginWithName: @"createDate" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __createDate];
    [outProtocol writeFieldEnd];
  }
  if (__checksum_isset) {
    [outProtocol writeFieldBeginWithName: @"checksum" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __checksum];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__desc_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'desc' is not set."];
  }
  if (!__creatorId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'creatorId' is not set."];
  }
  if (!__createDate_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'createDate' is not set."];
  }
  if (!__checksum_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'checksum' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TOrigin("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",creatorId:"];
  [ms appendFormat: @"\"%@\"", __creatorId];
  [ms appendString: @",createDate:"];
  [ms appendFormat: @"%qi", __createDate];
  [ms appendString: @",checksum:"];
  [ms appendFormat: @"%qi", __checksum];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStyle: (Text) style forms: (NSMutableArray *) forms processtype: (TTProcessType *) processtype icon: (Text) icon diagram_xml: (Text) diagram_xml providers: (TProvider *) providers facts: (Text) facts
{
  self = [super init];
  __style = [style retain_stub];
  __style_isset = YES;
  __forms = [forms retain_stub];
  __forms_isset = YES;
  __processtype = [processtype retain_stub];
  __processtype_isset = YES;
  __icon = [icon retain_stub];
  __icon_isset = YES;
  __diagram_xml = [diagram_xml retain_stub];
  __diagram_xml_isset = YES;
  __providers = [providers retain_stub];
  __providers_isset = YES;
  __facts = [facts retain_stub];
  __facts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"style"])
  {
    __style = [[decoder decodeObjectForKey: @"style"] retain_stub];
    __style_isset = YES;
  }
  if ([decoder containsValueForKey: @"forms"])
  {
    __forms = [[decoder decodeObjectForKey: @"forms"] retain_stub];
    __forms_isset = YES;
  }
  if ([decoder containsValueForKey: @"processtype"])
  {
    __processtype = [[decoder decodeObjectForKey: @"processtype"] retain_stub];
    __processtype_isset = YES;
  }
  if ([decoder containsValueForKey: @"icon"])
  {
    __icon = [[decoder decodeObjectForKey: @"icon"] retain_stub];
    __icon_isset = YES;
  }
  if ([decoder containsValueForKey: @"diagram_xml"])
  {
    __diagram_xml = [[decoder decodeObjectForKey: @"diagram_xml"] retain_stub];
    __diagram_xml_isset = YES;
  }
  if ([decoder containsValueForKey: @"providers"])
  {
    __providers = [[decoder decodeObjectForKey: @"providers"] retain_stub];
    __providers_isset = YES;
  }
  if ([decoder containsValueForKey: @"facts"])
  {
    __facts = [[decoder decodeObjectForKey: @"facts"] retain_stub];
    __facts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__style_isset)
  {
    [encoder encodeObject: __style forKey: @"style"];
  }
  if (__forms_isset)
  {
    [encoder encodeObject: __forms forKey: @"forms"];
  }
  if (__processtype_isset)
  {
    [encoder encodeObject: __processtype forKey: @"processtype"];
  }
  if (__icon_isset)
  {
    [encoder encodeObject: __icon forKey: @"icon"];
  }
  if (__diagram_xml_isset)
  {
    [encoder encodeObject: __diagram_xml forKey: @"diagram_xml"];
  }
  if (__providers_isset)
  {
    [encoder encodeObject: __providers forKey: @"providers"];
  }
  if (__facts_isset)
  {
    [encoder encodeObject: __facts forKey: @"facts"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __style_isset ? 2654435761 : 0;
  if (__style_isset)
  {
    hash = (hash * 31) ^ [__style hash];
  }
  hash = (hash * 31) ^ __forms_isset ? 2654435761 : 0;
  if (__forms_isset)
  {
    hash = (hash * 31) ^ [__forms hash];
  }
  hash = (hash * 31) ^ __processtype_isset ? 2654435761 : 0;
  if (__processtype_isset)
  {
    hash = (hash * 31) ^ [__processtype hash];
  }
  hash = (hash * 31) ^ __icon_isset ? 2654435761 : 0;
  if (__icon_isset)
  {
    hash = (hash * 31) ^ [__icon hash];
  }
  hash = (hash * 31) ^ __diagram_xml_isset ? 2654435761 : 0;
  if (__diagram_xml_isset)
  {
    hash = (hash * 31) ^ [__diagram_xml hash];
  }
  hash = (hash * 31) ^ __providers_isset ? 2654435761 : 0;
  if (__providers_isset)
  {
    hash = (hash * 31) ^ [__providers hash];
  }
  hash = (hash * 31) ^ __facts_isset ? 2654435761 : 0;
  if (__facts_isset)
  {
    hash = (hash * 31) ^ [__facts hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TData class]]) {
    return NO;
  }
  TData *other = (TData *)anObject;
  if ((__style_isset != other->__style_isset) ||
      (__style_isset && ((__style || other->__style) && ![__style isEqual:other->__style]))) {
    return NO;
  }
  if ((__forms_isset != other->__forms_isset) ||
      (__forms_isset && ((__forms || other->__forms) && ![__forms isEqual:other->__forms]))) {
    return NO;
  }
  if ((__processtype_isset != other->__processtype_isset) ||
      (__processtype_isset && ((__processtype || other->__processtype) && ![__processtype isEqual:other->__processtype]))) {
    return NO;
  }
  if ((__icon_isset != other->__icon_isset) ||
      (__icon_isset && ((__icon || other->__icon) && ![__icon isEqual:other->__icon]))) {
    return NO;
  }
  if ((__diagram_xml_isset != other->__diagram_xml_isset) ||
      (__diagram_xml_isset && ((__diagram_xml || other->__diagram_xml) && ![__diagram_xml isEqual:other->__diagram_xml]))) {
    return NO;
  }
  if ((__providers_isset != other->__providers_isset) ||
      (__providers_isset && ((__providers || other->__providers) && ![__providers isEqual:other->__providers]))) {
    return NO;
  }
  if ((__facts_isset != other->__facts_isset) ||
      (__facts_isset && ((__facts || other->__facts) && ![__facts isEqual:other->__facts]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__style release_stub];
  [__forms release_stub];
  [__processtype release_stub];
  [__icon release_stub];
  [__diagram_xml release_stub];
  [__providers release_stub];
  [__facts release_stub];
  [super dealloc_stub];
}

- (NSString *) style {
  return [[__style retain_stub] autorelease_stub];
}

- (void) setStyle: (NSString *) style {
  [style retain_stub];
  [__style release_stub];
  __style = style;
  __style_isset = YES;
}

- (BOOL) styleIsSet {
  return __style_isset;
}

- (void) unsetStyle {
  [__style release_stub];
  __style = nil;
  __style_isset = NO;
}

- (NSMutableArray *) forms {
  return [[__forms retain_stub] autorelease_stub];
}

- (void) setForms: (NSMutableArray *) forms {
  [forms retain_stub];
  [__forms release_stub];
  __forms = forms;
  __forms_isset = YES;
}

- (BOOL) formsIsSet {
  return __forms_isset;
}

- (void) unsetForms {
  [__forms release_stub];
  __forms = nil;
  __forms_isset = NO;
}

- (TTProcessType *) processtype {
  return [[__processtype retain_stub] autorelease_stub];
}

- (void) setProcesstype: (TTProcessType *) processtype {
  [processtype retain_stub];
  [__processtype release_stub];
  __processtype = processtype;
  __processtype_isset = YES;
}

- (BOOL) processtypeIsSet {
  return __processtype_isset;
}

- (void) unsetProcesstype {
  [__processtype release_stub];
  __processtype = nil;
  __processtype_isset = NO;
}

- (NSString *) icon {
  return [[__icon retain_stub] autorelease_stub];
}

- (void) setIcon: (NSString *) icon {
  [icon retain_stub];
  [__icon release_stub];
  __icon = icon;
  __icon_isset = YES;
}

- (BOOL) iconIsSet {
  return __icon_isset;
}

- (void) unsetIcon {
  [__icon release_stub];
  __icon = nil;
  __icon_isset = NO;
}

- (NSString *) diagram_xml {
  return [[__diagram_xml retain_stub] autorelease_stub];
}

- (void) setDiagram_xml: (NSString *) diagram_xml {
  [diagram_xml retain_stub];
  [__diagram_xml release_stub];
  __diagram_xml = diagram_xml;
  __diagram_xml_isset = YES;
}

- (BOOL) diagram_xmlIsSet {
  return __diagram_xml_isset;
}

- (void) unsetDiagram_xml {
  [__diagram_xml release_stub];
  __diagram_xml = nil;
  __diagram_xml_isset = NO;
}

- (TProvider *) providers {
  return [[__providers retain_stub] autorelease_stub];
}

- (void) setProviders: (TProvider *) providers {
  [providers retain_stub];
  [__providers release_stub];
  __providers = providers;
  __providers_isset = YES;
}

- (BOOL) providersIsSet {
  return __providers_isset;
}

- (void) unsetProviders {
  [__providers release_stub];
  __providers = nil;
  __providers_isset = NO;
}

- (NSString *) facts {
  return [[__facts retain_stub] autorelease_stub];
}

- (void) setFacts: (NSString *) facts {
  [facts retain_stub];
  [__facts release_stub];
  __facts = facts;
  __facts_isset = YES;
}

- (BOOL) factsIsSet {
  return __facts_isset;
}

- (void) unsetFacts {
  [__facts release_stub];
  __facts = nil;
  __facts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStyle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size26;
          [inProtocol readListBeginReturningElementType: NULL size: &_size26];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size26];
          int _i27;
          for (_i27 = 0; _i27 < _size26; ++_i27)
          {
            TForm *_elem28 = [[TForm alloc] init];
            [_elem28 read: inProtocol];
            [fieldValue addObject: _elem28];
            [_elem28 release_stub];
          }
          [inProtocol readListEnd];
          [self setForms: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TTProcessType *fieldValue = [[TTProcessType alloc] init];
          [fieldValue read: inProtocol];
          [self setProcesstype: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIcon: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiagram_xml: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          TProvider *fieldValue = [[TProvider alloc] init];
          [fieldValue read: inProtocol];
          [self setProviders: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFacts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TData"];
  if (__style_isset) {
    if (__style != nil) {
      [outProtocol writeFieldBeginWithName: @"style" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __style];
      [outProtocol writeFieldEnd];
    }
  }
  if (__forms_isset) {
    if (__forms != nil) {
      [outProtocol writeFieldBeginWithName: @"forms" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__forms count]];
        int idx30;
        for (idx30 = 0; idx30 < [__forms count]; idx30++)
        {
          [[__forms objectAtIndex: idx30] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__processtype_isset) {
    if (__processtype != nil) {
      [outProtocol writeFieldBeginWithName: @"processtype" type: TType_STRUCT fieldID: 3];
      [__processtype write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__icon_isset) {
    if (__icon != nil) {
      [outProtocol writeFieldBeginWithName: @"icon" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __icon];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diagram_xml_isset) {
    if (__diagram_xml != nil) {
      [outProtocol writeFieldBeginWithName: @"diagram_xml" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __diagram_xml];
      [outProtocol writeFieldEnd];
    }
  }
  if (__providers_isset) {
    if (__providers != nil) {
      [outProtocol writeFieldBeginWithName: @"providers" type: TType_STRUCT fieldID: 6];
      [__providers write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__facts_isset) {
    if (__facts != nil) {
      [outProtocol writeFieldBeginWithName: @"facts" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __facts];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__style_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'style' is not set."];
  }
  if (!__forms_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'forms' is not set."];
  }
  if (!__processtype_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'processtype' is not set."];
  }
  if (!__icon_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'icon' is not set."];
  }
  if (!__diagram_xml_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'diagram_xml' is not set."];
  }
  if (!__providers_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'providers' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TData("];
  [ms appendString: @"style:"];
  [ms appendFormat: @"\"%@\"", __style];
  [ms appendString: @",forms:"];
  [ms appendFormat: @"%@", __forms];
  [ms appendString: @",processtype:"];
  [ms appendFormat: @"%@", __processtype];
  [ms appendString: @",icon:"];
  [ms appendFormat: @"\"%@\"", __icon];
  [ms appendString: @",diagram_xml:"];
  [ms appendFormat: @"\"%@\"", __diagram_xml];
  [ms appendString: @",providers:"];
  [ms appendFormat: @"%@", __providers];
  [ms appendString: @",facts:"];
  [ms appendFormat: @"\"%@\"", __facts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTemplate

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id recType: (Text) recType name: (Text) name checksum: (Text) checksum desc: (Text) desc icon: (Text) icon fav: (BOOL) fav
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __recType = [recType retain_stub];
  __recType_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __checksum = [checksum retain_stub];
  __checksum_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __icon = [icon retain_stub];
  __icon_isset = YES;
  __fav = fav;
  __fav_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"recType"])
  {
    __recType = [[decoder decodeObjectForKey: @"recType"] retain_stub];
    __recType_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"checksum"])
  {
    __checksum = [[decoder decodeObjectForKey: @"checksum"] retain_stub];
    __checksum_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"icon"])
  {
    __icon = [[decoder decodeObjectForKey: @"icon"] retain_stub];
    __icon_isset = YES;
  }
  if ([decoder containsValueForKey: @"fav"])
  {
    __fav = [decoder decodeBoolForKey: @"fav"];
    __fav_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__recType_isset)
  {
    [encoder encodeObject: __recType forKey: @"recType"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__checksum_isset)
  {
    [encoder encodeObject: __checksum forKey: @"checksum"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__icon_isset)
  {
    [encoder encodeObject: __icon forKey: @"icon"];
  }
  if (__fav_isset)
  {
    [encoder encodeBool: __fav forKey: @"fav"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __recType_isset ? 2654435761 : 0;
  if (__recType_isset)
  {
    hash = (hash * 31) ^ [__recType hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __checksum_isset ? 2654435761 : 0;
  if (__checksum_isset)
  {
    hash = (hash * 31) ^ [__checksum hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __icon_isset ? 2654435761 : 0;
  if (__icon_isset)
  {
    hash = (hash * 31) ^ [__icon hash];
  }
  hash = (hash * 31) ^ __fav_isset ? 2654435761 : 0;
  if (__fav_isset)
  {
    hash = (hash * 31) ^ [@(__fav) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTemplate class]]) {
    return NO;
  }
  TTemplate *other = (TTemplate *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__recType_isset != other->__recType_isset) ||
      (__recType_isset && ((__recType || other->__recType) && ![__recType isEqual:other->__recType]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__checksum_isset != other->__checksum_isset) ||
      (__checksum_isset && ((__checksum || other->__checksum) && ![__checksum isEqual:other->__checksum]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__icon_isset != other->__icon_isset) ||
      (__icon_isset && ((__icon || other->__icon) && ![__icon isEqual:other->__icon]))) {
    return NO;
  }
  if ((__fav_isset != other->__fav_isset) ||
      (__fav_isset && (__fav != other->__fav))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__recType release_stub];
  [__name release_stub];
  [__checksum release_stub];
  [__desc release_stub];
  [__icon release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) recType {
  return [[__recType retain_stub] autorelease_stub];
}

- (void) setRecType: (NSString *) recType {
  [recType retain_stub];
  [__recType release_stub];
  __recType = recType;
  __recType_isset = YES;
}

- (BOOL) recTypeIsSet {
  return __recType_isset;
}

- (void) unsetRecType {
  [__recType release_stub];
  __recType = nil;
  __recType_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) checksum {
  return [[__checksum retain_stub] autorelease_stub];
}

- (void) setChecksum: (NSString *) checksum {
  [checksum retain_stub];
  [__checksum release_stub];
  __checksum = checksum;
  __checksum_isset = YES;
}

- (BOOL) checksumIsSet {
  return __checksum_isset;
}

- (void) unsetChecksum {
  [__checksum release_stub];
  __checksum = nil;
  __checksum_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) icon {
  return [[__icon retain_stub] autorelease_stub];
}

- (void) setIcon: (NSString *) icon {
  [icon retain_stub];
  [__icon release_stub];
  __icon = icon;
  __icon_isset = YES;
}

- (BOOL) iconIsSet {
  return __icon_isset;
}

- (void) unsetIcon {
  [__icon release_stub];
  __icon = nil;
  __icon_isset = NO;
}

- (BOOL) fav {
  return __fav;
}

- (void) setFav: (BOOL) fav {
  __fav = fav;
  __fav_isset = YES;
}

- (BOOL) favIsSet {
  return __fav_isset;
}

- (void) unsetFav {
  __fav_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChecksum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIcon: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setFav: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TTemplate"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recType_isset) {
    if (__recType != nil) {
      [outProtocol writeFieldBeginWithName: @"recType" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __recType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checksum_isset) {
    if (__checksum != nil) {
      [outProtocol writeFieldBeginWithName: @"checksum" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __checksum];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__icon_isset) {
    if (__icon != nil) {
      [outProtocol writeFieldBeginWithName: @"icon" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __icon];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fav_isset) {
    [outProtocol writeFieldBeginWithName: @"fav" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __fav];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__recType_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'recType' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__checksum_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'checksum' is not set."];
  }
  if (!__desc_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'desc' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTemplate("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",recType:"];
  [ms appendFormat: @"\"%@\"", __recType];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",checksum:"];
  [ms appendFormat: @"\"%@\"", __checksum];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",icon:"];
  [ms appendFormat: @"\"%@\"", __icon];
  [ms appendString: @",fav:"];
  [ms appendFormat: @"%i", __fav];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ServiceError

- (id) init
{
  return [super initWithName: @"ServiceError" reason: @"unknown" userInfo: nil];
}

- (id) initWithMessage: (NSString *) message
{
  self = [self init];
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ServiceError class]]) {
    return NO;
  }
  ServiceError *other = (ServiceError *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServiceError"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ServiceError("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation IllegalArgument

- (id) init
{
  return [super initWithName: @"IllegalArgument" reason: @"unknown" userInfo: nil];
}

- (id) initWithMessage: (NSString *) message
{
  self = [self init];
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[IllegalArgument class]]) {
    return NO;
  }
  IllegalArgument *other = (IllegalArgument *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IllegalArgument"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IllegalArgument("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AlreadyExists

- (id) init
{
  return [super initWithName: @"AlreadyExists" reason: @"unknown" userInfo: nil];
}

- (id) initWithMessage: (NSString *) message
{
  self = [self init];
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AlreadyExists class]]) {
    return NO;
  }
  AlreadyExists *other = (AlreadyExists *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AlreadyExists"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AlreadyExists("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation PointFlowConstants
+ (void) initialize {
}
@end

@interface authenticate_args : NSObject <TBase, NSCoding> {
  Text __email;
  Text __password;
  Text __apikey;
  TGeoLocation * __location;

  BOOL __email_isset;
  BOOL __password_isset;
  BOOL __apikey_isset;
  BOOL __location_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=email, setter=setEmail:) Text email;
@property (nonatomic, retain, getter=password, setter=setPassword:) Text password;
@property (nonatomic, retain, getter=apikey, setter=setApikey:) Text apikey;
@property (nonatomic, retain, getter=location, setter=setLocation:) TGeoLocation * location;
#endif

- (id) init;
- (id) initWithEmail: (Text) email password: (Text) password apikey: (Text) apikey location: (TGeoLocation *) location;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) email;
- (void) setEmail: (Text) email;
#endif
- (BOOL) emailIsSet;

#if !__has_feature(objc_arc)
- (Text) password;
- (void) setPassword: (Text) password;
#endif
- (BOOL) passwordIsSet;

#if !__has_feature(objc_arc)
- (Text) apikey;
- (void) setApikey: (Text) apikey;
#endif
- (BOOL) apikeyIsSet;

#if !__has_feature(objc_arc)
- (TGeoLocation *) location;
- (void) setLocation: (TGeoLocation *) location;
#endif
- (BOOL) locationIsSet;

@end

@implementation authenticate_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (Text) email password: (Text) password apikey: (Text) apikey location: (TGeoLocation *) location
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __apikey = [apikey retain_stub];
  __apikey_isset = YES;
  __location = [location retain_stub];
  __location_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"apikey"])
  {
    __apikey = [[decoder decodeObjectForKey: @"apikey"] retain_stub];
    __apikey_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__apikey_isset)
  {
    [encoder encodeObject: __apikey forKey: @"apikey"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __email_isset ? 2654435761 : 0;
  if (__email_isset)
  {
    hash = (hash * 31) ^ [__email hash];
  }
  hash = (hash * 31) ^ __password_isset ? 2654435761 : 0;
  if (__password_isset)
  {
    hash = (hash * 31) ^ [__password hash];
  }
  hash = (hash * 31) ^ __apikey_isset ? 2654435761 : 0;
  if (__apikey_isset)
  {
    hash = (hash * 31) ^ [__apikey hash];
  }
  hash = (hash * 31) ^ __location_isset ? 2654435761 : 0;
  if (__location_isset)
  {
    hash = (hash * 31) ^ [__location hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[authenticate_args class]]) {
    return NO;
  }
  authenticate_args *other = (authenticate_args *)anObject;
  if ((__email_isset != other->__email_isset) ||
      (__email_isset && ((__email || other->__email) && ![__email isEqual:other->__email]))) {
    return NO;
  }
  if ((__password_isset != other->__password_isset) ||
      (__password_isset && ((__password || other->__password) && ![__password isEqual:other->__password]))) {
    return NO;
  }
  if ((__apikey_isset != other->__apikey_isset) ||
      (__apikey_isset && ((__apikey || other->__apikey) && ![__apikey isEqual:other->__apikey]))) {
    return NO;
  }
  if ((__location_isset != other->__location_isset) ||
      (__location_isset && ((__location || other->__location) && ![__location isEqual:other->__location]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__email release_stub];
  [__password release_stub];
  [__apikey release_stub];
  [__location release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) apikey {
  return [[__apikey retain_stub] autorelease_stub];
}

- (void) setApikey: (NSString *) apikey {
  [apikey retain_stub];
  [__apikey release_stub];
  __apikey = apikey;
  __apikey_isset = YES;
}

- (BOOL) apikeyIsSet {
  return __apikey_isset;
}

- (void) unsetApikey {
  [__apikey release_stub];
  __apikey = nil;
  __apikey_isset = NO;
}

- (TGeoLocation *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (TGeoLocation *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApikey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          TGeoLocation *fieldValue = [[TGeoLocation alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"authenticate_args"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__apikey_isset) {
    if (__apikey != nil) {
      [outProtocol writeFieldBeginWithName: @"apikey" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __apikey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 4];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"authenticate_args("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",apikey:"];
  [ms appendFormat: @"\"%@\"", __apikey];
  [ms appendString: @",location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Authenticate_result : NSObject <TBase, NSCoding> {
  TUser * __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TUser * success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (TUser *) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TUser *) success;
- (void) setSuccess: (TUser *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation Authenticate_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TUser *) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Authenticate_result class]]) {
    return NO;
  }
  Authenticate_result *other = (Authenticate_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (TUser *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TUser *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TUser *fieldValue = [[TUser alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Authenticate_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Authenticate_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface exchangeSession_args : NSObject <TBase, NSCoding> {
  Text __brokerToken;

  BOOL __brokerToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=brokerToken, setter=setBrokerToken:) Text brokerToken;
#endif

- (id) init;
- (id) initWithBrokerToken: (Text) brokerToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) brokerToken;
- (void) setBrokerToken: (Text) brokerToken;
#endif
- (BOOL) brokerTokenIsSet;

@end

@implementation exchangeSession_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBrokerToken: (Text) brokerToken
{
  self = [super init];
  __brokerToken = [brokerToken retain_stub];
  __brokerToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"brokerToken"])
  {
    __brokerToken = [[decoder decodeObjectForKey: @"brokerToken"] retain_stub];
    __brokerToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__brokerToken_isset)
  {
    [encoder encodeObject: __brokerToken forKey: @"brokerToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __brokerToken_isset ? 2654435761 : 0;
  if (__brokerToken_isset)
  {
    hash = (hash * 31) ^ [__brokerToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[exchangeSession_args class]]) {
    return NO;
  }
  exchangeSession_args *other = (exchangeSession_args *)anObject;
  if ((__brokerToken_isset != other->__brokerToken_isset) ||
      (__brokerToken_isset && ((__brokerToken || other->__brokerToken) && ![__brokerToken isEqual:other->__brokerToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__brokerToken release_stub];
  [super dealloc_stub];
}

- (NSString *) brokerToken {
  return [[__brokerToken retain_stub] autorelease_stub];
}

- (void) setBrokerToken: (NSString *) brokerToken {
  [brokerToken retain_stub];
  [__brokerToken release_stub];
  __brokerToken = brokerToken;
  __brokerToken_isset = YES;
}

- (BOOL) brokerTokenIsSet {
  return __brokerToken_isset;
}

- (void) unsetBrokerToken {
  [__brokerToken release_stub];
  __brokerToken = nil;
  __brokerToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBrokerToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"exchangeSession_args"];
  if (__brokerToken_isset) {
    if (__brokerToken != nil) {
      [outProtocol writeFieldBeginWithName: @"brokerToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __brokerToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"exchangeSession_args("];
  [ms appendString: @"brokerToken:"];
  [ms appendFormat: @"\"%@\"", __brokerToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ExchangeSession_result : NSObject <TBase, NSCoding> {
  Text __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Text success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (Text) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) success;
- (void) setSuccess: (Text) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation ExchangeSession_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Text) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ExchangeSession_result class]]) {
    return NO;
  }
  ExchangeSession_result *other = (ExchangeSession_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ExchangeSession_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ExchangeSession_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getUserEmail_args : NSObject <TBase, NSCoding> {
  Text __sessionKey;

  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithSessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation getUserEmail_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionKey: (Text) sessionKey
{
  self = [super init];
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getUserEmail_args class]]) {
    return NO;
  }
  getUserEmail_args *other = (getUserEmail_args *)anObject;
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getUserEmail_args"];
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getUserEmail_args("];
  [ms appendString: @"sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetUserEmail_result : NSObject <TBase, NSCoding> {
  Text __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Text success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (Text) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) success;
- (void) setSuccess: (Text) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation GetUserEmail_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Text) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetUserEmail_result class]]) {
    return NO;
  }
  GetUserEmail_result *other = (GetUserEmail_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserEmail_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUserEmail_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface sendGCMToken_args : NSObject <TBase, NSCoding> {
  Text __userid;
  Text __devicetoken;
  Text __deviceGuid;

  BOOL __userid_isset;
  BOOL __devicetoken_isset;
  BOOL __deviceGuid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userid, setter=setUserid:) Text userid;
@property (nonatomic, retain, getter=devicetoken, setter=setDevicetoken:) Text devicetoken;
@property (nonatomic, retain, getter=deviceGuid, setter=setDeviceGuid:) Text deviceGuid;
#endif

- (id) init;
- (id) initWithUserid: (Text) userid devicetoken: (Text) devicetoken deviceGuid: (Text) deviceGuid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) userid;
- (void) setUserid: (Text) userid;
#endif
- (BOOL) useridIsSet;

#if !__has_feature(objc_arc)
- (Text) devicetoken;
- (void) setDevicetoken: (Text) devicetoken;
#endif
- (BOOL) devicetokenIsSet;

#if !__has_feature(objc_arc)
- (Text) deviceGuid;
- (void) setDeviceGuid: (Text) deviceGuid;
#endif
- (BOOL) deviceGuidIsSet;

@end

@implementation sendGCMToken_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserid: (Text) userid devicetoken: (Text) devicetoken deviceGuid: (Text) deviceGuid
{
  self = [super init];
  __userid = [userid retain_stub];
  __userid_isset = YES;
  __devicetoken = [devicetoken retain_stub];
  __devicetoken_isset = YES;
  __deviceGuid = [deviceGuid retain_stub];
  __deviceGuid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userid"])
  {
    __userid = [[decoder decodeObjectForKey: @"userid"] retain_stub];
    __userid_isset = YES;
  }
  if ([decoder containsValueForKey: @"devicetoken"])
  {
    __devicetoken = [[decoder decodeObjectForKey: @"devicetoken"] retain_stub];
    __devicetoken_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceGuid"])
  {
    __deviceGuid = [[decoder decodeObjectForKey: @"deviceGuid"] retain_stub];
    __deviceGuid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userid_isset)
  {
    [encoder encodeObject: __userid forKey: @"userid"];
  }
  if (__devicetoken_isset)
  {
    [encoder encodeObject: __devicetoken forKey: @"devicetoken"];
  }
  if (__deviceGuid_isset)
  {
    [encoder encodeObject: __deviceGuid forKey: @"deviceGuid"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __userid_isset ? 2654435761 : 0;
  if (__userid_isset)
  {
    hash = (hash * 31) ^ [__userid hash];
  }
  hash = (hash * 31) ^ __devicetoken_isset ? 2654435761 : 0;
  if (__devicetoken_isset)
  {
    hash = (hash * 31) ^ [__devicetoken hash];
  }
  hash = (hash * 31) ^ __deviceGuid_isset ? 2654435761 : 0;
  if (__deviceGuid_isset)
  {
    hash = (hash * 31) ^ [__deviceGuid hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[sendGCMToken_args class]]) {
    return NO;
  }
  sendGCMToken_args *other = (sendGCMToken_args *)anObject;
  if ((__userid_isset != other->__userid_isset) ||
      (__userid_isset && ((__userid || other->__userid) && ![__userid isEqual:other->__userid]))) {
    return NO;
  }
  if ((__devicetoken_isset != other->__devicetoken_isset) ||
      (__devicetoken_isset && ((__devicetoken || other->__devicetoken) && ![__devicetoken isEqual:other->__devicetoken]))) {
    return NO;
  }
  if ((__deviceGuid_isset != other->__deviceGuid_isset) ||
      (__deviceGuid_isset && ((__deviceGuid || other->__deviceGuid) && ![__deviceGuid isEqual:other->__deviceGuid]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__userid release_stub];
  [__devicetoken release_stub];
  [__deviceGuid release_stub];
  [super dealloc_stub];
}

- (NSString *) userid {
  return [[__userid retain_stub] autorelease_stub];
}

- (void) setUserid: (NSString *) userid {
  [userid retain_stub];
  [__userid release_stub];
  __userid = userid;
  __userid_isset = YES;
}

- (BOOL) useridIsSet {
  return __userid_isset;
}

- (void) unsetUserid {
  [__userid release_stub];
  __userid = nil;
  __userid_isset = NO;
}

- (NSString *) devicetoken {
  return [[__devicetoken retain_stub] autorelease_stub];
}

- (void) setDevicetoken: (NSString *) devicetoken {
  [devicetoken retain_stub];
  [__devicetoken release_stub];
  __devicetoken = devicetoken;
  __devicetoken_isset = YES;
}

- (BOOL) devicetokenIsSet {
  return __devicetoken_isset;
}

- (void) unsetDevicetoken {
  [__devicetoken release_stub];
  __devicetoken = nil;
  __devicetoken_isset = NO;
}

- (NSString *) deviceGuid {
  return [[__deviceGuid retain_stub] autorelease_stub];
}

- (void) setDeviceGuid: (NSString *) deviceGuid {
  [deviceGuid retain_stub];
  [__deviceGuid release_stub];
  __deviceGuid = deviceGuid;
  __deviceGuid_isset = YES;
}

- (BOOL) deviceGuidIsSet {
  return __deviceGuid_isset;
}

- (void) unsetDeviceGuid {
  [__deviceGuid release_stub];
  __deviceGuid = nil;
  __deviceGuid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDevicetoken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendGCMToken_args"];
  if (__userid_isset) {
    if (__userid != nil) {
      [outProtocol writeFieldBeginWithName: @"userid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__devicetoken_isset) {
    if (__devicetoken != nil) {
      [outProtocol writeFieldBeginWithName: @"devicetoken" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __devicetoken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceGuid_isset) {
    if (__deviceGuid != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceGuid" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __deviceGuid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"sendGCMToken_args("];
  [ms appendString: @"userid:"];
  [ms appendFormat: @"\"%@\"", __userid];
  [ms appendString: @",devicetoken:"];
  [ms appendFormat: @"\"%@\"", __devicetoken];
  [ms appendString: @",deviceGuid:"];
  [ms appendFormat: @"\"%@\"", __deviceGuid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SendGCMToken_result : NSObject <TBase, NSCoding> {
  Text __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Text success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (Text) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) success;
- (void) setSuccess: (Text) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation SendGCMToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Text) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SendGCMToken_result class]]) {
    return NO;
  }
  SendGCMToken_result *other = (SendGCMToken_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendGCMToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendGCMToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getActiveTasks_args : NSObject <TBase, NSCoding> {
  Text __sessionKey;

  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithSessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation getActiveTasks_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionKey: (Text) sessionKey
{
  self = [super init];
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getActiveTasks_args class]]) {
    return NO;
  }
  getActiveTasks_args *other = (getActiveTasks_args *)anObject;
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getActiveTasks_args"];
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getActiveTasks_args("];
  [ms appendString: @"sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetActiveTasks_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation GetActiveTasks_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetActiveTasks_result class]]) {
    return NO;
  }
  GetActiveTasks_result *other = (GetActiveTasks_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size31;
          [inProtocol readListBeginReturningElementType: NULL size: &_size31];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size31];
          int _i32;
          for (_i32 = 0; _i32 < _size31; ++_i32)
          {
            TTask *_elem33 = [[TTask alloc] init];
            [_elem33 read: inProtocol];
            [fieldValue addObject: _elem33];
            [_elem33 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetActiveTasks_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int idx35;
        for (idx35 = 0; idx35 < [__success count]; idx35++)
        {
          [[__success objectAtIndex: idx35] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetActiveTasks_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTaskDetails_args : NSObject <TBase, NSCoding> {
  Text __taskId;
  Text __sessionKey;

  BOOL __taskId_isset;
  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=taskId, setter=setTaskId:) Text taskId;
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithTaskId: (Text) taskId sessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) taskId;
- (void) setTaskId: (Text) taskId;
#endif
- (BOOL) taskIdIsSet;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation getTaskDetails_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTaskId: (Text) taskId sessionKey: (Text) sessionKey
{
  self = [super init];
  __taskId = [taskId retain_stub];
  __taskId_isset = YES;
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"taskId"])
  {
    __taskId = [[decoder decodeObjectForKey: @"taskId"] retain_stub];
    __taskId_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__taskId_isset)
  {
    [encoder encodeObject: __taskId forKey: @"taskId"];
  }
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __taskId_isset ? 2654435761 : 0;
  if (__taskId_isset)
  {
    hash = (hash * 31) ^ [__taskId hash];
  }
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getTaskDetails_args class]]) {
    return NO;
  }
  getTaskDetails_args *other = (getTaskDetails_args *)anObject;
  if ((__taskId_isset != other->__taskId_isset) ||
      (__taskId_isset && ((__taskId || other->__taskId) && ![__taskId isEqual:other->__taskId]))) {
    return NO;
  }
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__taskId release_stub];
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) taskId {
  return [[__taskId retain_stub] autorelease_stub];
}

- (void) setTaskId: (NSString *) taskId {
  [taskId retain_stub];
  [__taskId release_stub];
  __taskId = taskId;
  __taskId_isset = YES;
}

- (BOOL) taskIdIsSet {
  return __taskId_isset;
}

- (void) unsetTaskId {
  [__taskId release_stub];
  __taskId = nil;
  __taskId_isset = NO;
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTaskId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTaskDetails_args"];
  if (__taskId_isset) {
    if (__taskId != nil) {
      [outProtocol writeFieldBeginWithName: @"taskId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __taskId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTaskDetails_args("];
  [ms appendString: @"taskId:"];
  [ms appendFormat: @"\"%@\"", __taskId];
  [ms appendString: @",sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTaskDetails_result : NSObject <TBase, NSCoding> {
  TTaskDetail * __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TTaskDetail * success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (TTaskDetail *) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TTaskDetail *) success;
- (void) setSuccess: (TTaskDetail *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation GetTaskDetails_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TTaskDetail *) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetTaskDetails_result class]]) {
    return NO;
  }
  GetTaskDetails_result *other = (GetTaskDetails_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (TTaskDetail *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TTaskDetail *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TTaskDetail *fieldValue = [[TTaskDetail alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTaskDetails_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTaskDetails_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getProcessTypes_args : NSObject <TBase, NSCoding> {
  Text __sessionKey;

  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithSessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation getProcessTypes_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionKey: (Text) sessionKey
{
  self = [super init];
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getProcessTypes_args class]]) {
    return NO;
  }
  getProcessTypes_args *other = (getProcessTypes_args *)anObject;
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getProcessTypes_args"];
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getProcessTypes_args("];
  [ms appendString: @"sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetProcessTypes_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation GetProcessTypes_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetProcessTypes_result class]]) {
    return NO;
  }
  GetProcessTypes_result *other = (GetProcessTypes_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size36;
          [inProtocol readListBeginReturningElementType: NULL size: &_size36];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size36];
          int _i37;
          for (_i37 = 0; _i37 < _size36; ++_i37)
          {
            TProcessType *_elem38 = [[TProcessType alloc] init];
            [_elem38 read: inProtocol];
            [fieldValue addObject: _elem38];
            [_elem38 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetProcessTypes_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int idx40;
        for (idx40 = 0; idx40 < [__success count]; idx40++)
        {
          [[__success objectAtIndex: idx40] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetProcessTypes_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface deleteProcess_args : NSObject <TBase, NSCoding> {
  Text __processId;

  BOOL __processId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=processId, setter=setProcessId:) Text processId;
#endif

- (id) init;
- (id) initWithProcessId: (Text) processId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) processId;
- (void) setProcessId: (Text) processId;
#endif
- (BOOL) processIdIsSet;

@end

@implementation deleteProcess_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithProcessId: (Text) processId
{
  self = [super init];
  __processId = [processId retain_stub];
  __processId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"processId"])
  {
    __processId = [[decoder decodeObjectForKey: @"processId"] retain_stub];
    __processId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__processId_isset)
  {
    [encoder encodeObject: __processId forKey: @"processId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __processId_isset ? 2654435761 : 0;
  if (__processId_isset)
  {
    hash = (hash * 31) ^ [__processId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[deleteProcess_args class]]) {
    return NO;
  }
  deleteProcess_args *other = (deleteProcess_args *)anObject;
  if ((__processId_isset != other->__processId_isset) ||
      (__processId_isset && ((__processId || other->__processId) && ![__processId isEqual:other->__processId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__processId release_stub];
  [super dealloc_stub];
}

- (NSString *) processId {
  return [[__processId retain_stub] autorelease_stub];
}

- (void) setProcessId: (NSString *) processId {
  [processId retain_stub];
  [__processId release_stub];
  __processId = processId;
  __processId_isset = YES;
}

- (BOOL) processIdIsSet {
  return __processId_isset;
}

- (void) unsetProcessId {
  [__processId release_stub];
  __processId = nil;
  __processId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProcessId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"deleteProcess_args"];
  if (__processId_isset) {
    if (__processId != nil) {
      [outProtocol writeFieldBeginWithName: @"processId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __processId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"deleteProcess_args("];
  [ms appendString: @"processId:"];
  [ms appendFormat: @"\"%@\"", __processId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DeleteProcess_result : NSObject <TBase, NSCoding> {
  Text __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Text success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (Text) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) success;
- (void) setSuccess: (Text) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation DeleteProcess_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Text) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DeleteProcess_result class]]) {
    return NO;
  }
  DeleteProcess_result *other = (DeleteProcess_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteProcess_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeleteProcess_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getApplications_args : NSObject <TBase, NSCoding> {
  Text __sessionKey;
  int32_t __page;
  int32_t __perPage;

  BOOL __sessionKey_isset;
  BOOL __page_isset;
  BOOL __perPage_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
@property (nonatomic, getter=page, setter=setPage:) int32_t page;
@property (nonatomic, getter=perPage, setter=setPerPage:) int32_t perPage;
#endif

- (id) init;
- (id) initWithSessionKey: (Text) sessionKey page: (int32_t) page perPage: (int32_t) perPage;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

#if !__has_feature(objc_arc)
- (int32_t) page;
- (void) setPage: (int32_t) page;
#endif
- (BOOL) pageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) perPage;
- (void) setPerPage: (int32_t) perPage;
#endif
- (BOOL) perPageIsSet;

@end

@implementation getApplications_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionKey: (Text) sessionKey page: (int32_t) page perPage: (int32_t) perPage
{
  self = [super init];
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  __page = page;
  __page_isset = YES;
  __perPage = perPage;
  __perPage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [decoder decodeInt32ForKey: @"page"];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"perPage"])
  {
    __perPage = [decoder decodeInt32ForKey: @"perPage"];
    __perPage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
  if (__page_isset)
  {
    [encoder encodeInt32: __page forKey: @"page"];
  }
  if (__perPage_isset)
  {
    [encoder encodeInt32: __perPage forKey: @"perPage"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [@(__page) hash];
  }
  hash = (hash * 31) ^ __perPage_isset ? 2654435761 : 0;
  if (__perPage_isset)
  {
    hash = (hash * 31) ^ [@(__perPage) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getApplications_args class]]) {
    return NO;
  }
  getApplications_args *other = (getApplications_args *)anObject;
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && (__page != other->__page))) {
    return NO;
  }
  if ((__perPage_isset != other->__perPage_isset) ||
      (__perPage_isset && (__perPage != other->__perPage))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (int32_t) page {
  return __page;
}

- (void) setPage: (int32_t) page {
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  __page_isset = NO;
}

- (int32_t) perPage {
  return __perPage;
}

- (void) setPerPage: (int32_t) perPage {
  __perPage = perPage;
  __perPage_isset = YES;
}

- (BOOL) perPageIsSet {
  return __perPage_isset;
}

- (void) unsetPerPage {
  __perPage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPerPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getApplications_args"];
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page];
    [outProtocol writeFieldEnd];
  }
  if (__perPage_isset) {
    [outProtocol writeFieldBeginWithName: @"perPage" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __perPage];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getApplications_args("];
  [ms appendString: @"sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%i", __page];
  [ms appendString: @",perPage:"];
  [ms appendFormat: @"%i", __perPage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetApplications_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation GetApplications_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetApplications_result class]]) {
    return NO;
  }
  GetApplications_result *other = (GetApplications_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size41;
          [inProtocol readListBeginReturningElementType: NULL size: &_size41];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size41];
          int _i42;
          for (_i42 = 0; _i42 < _size41; ++_i42)
          {
            TApplication *_elem43 = [[TApplication alloc] init];
            [_elem43 read: inProtocol];
            [fieldValue addObject: _elem43];
            [_elem43 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetApplications_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int idx45;
        for (idx45 = 0; idx45 < [__success count]; idx45++)
        {
          [[__success objectAtIndex: idx45] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetApplications_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface startApplication_args : NSObject <TBase, NSCoding> {
  Text __id;
  Text __sessionKey;

  BOOL __id_isset;
  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=id, setter=setId:) Text id;
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithId: (Text) id sessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) id;
- (void) setId: (Text) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation startApplication_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id sessionKey: (Text) sessionKey
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[startApplication_args class]]) {
    return NO;
  }
  startApplication_args *other = (startApplication_args *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"startApplication_args"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"startApplication_args("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface StartApplication_result : NSObject <TBase, NSCoding> {
  TProcessType * __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TProcessType * success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (TProcessType *) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TProcessType *) success;
- (void) setSuccess: (TProcessType *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation StartApplication_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TProcessType *) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[StartApplication_result class]]) {
    return NO;
  }
  StartApplication_result *other = (StartApplication_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (TProcessType *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TProcessType *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TProcessType *fieldValue = [[TProcessType alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StartApplication_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StartApplication_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTemplates_args : NSObject <TBase, NSCoding> {
  int32_t __page;
  int32_t __perPage;

  BOOL __page_isset;
  BOOL __perPage_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=page, setter=setPage:) int32_t page;
@property (nonatomic, getter=perPage, setter=setPerPage:) int32_t perPage;
#endif

- (id) init;
- (id) initWithPage: (int32_t) page perPage: (int32_t) perPage;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) page;
- (void) setPage: (int32_t) page;
#endif
- (BOOL) pageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) perPage;
- (void) setPerPage: (int32_t) perPage;
#endif
- (BOOL) perPageIsSet;

@end

@implementation getTemplates_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage: (int32_t) page perPage: (int32_t) perPage
{
  self = [super init];
  __page = page;
  __page_isset = YES;
  __perPage = perPage;
  __perPage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [decoder decodeInt32ForKey: @"page"];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"perPage"])
  {
    __perPage = [decoder decodeInt32ForKey: @"perPage"];
    __perPage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_isset)
  {
    [encoder encodeInt32: __page forKey: @"page"];
  }
  if (__perPage_isset)
  {
    [encoder encodeInt32: __perPage forKey: @"perPage"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [@(__page) hash];
  }
  hash = (hash * 31) ^ __perPage_isset ? 2654435761 : 0;
  if (__perPage_isset)
  {
    hash = (hash * 31) ^ [@(__perPage) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getTemplates_args class]]) {
    return NO;
  }
  getTemplates_args *other = (getTemplates_args *)anObject;
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && (__page != other->__page))) {
    return NO;
  }
  if ((__perPage_isset != other->__perPage_isset) ||
      (__perPage_isset && (__perPage != other->__perPage))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) page {
  return __page;
}

- (void) setPage: (int32_t) page {
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  __page_isset = NO;
}

- (int32_t) perPage {
  return __perPage;
}

- (void) setPerPage: (int32_t) perPage {
  __perPage = perPage;
  __perPage_isset = YES;
}

- (BOOL) perPageIsSet {
  return __perPage_isset;
}

- (void) unsetPerPage {
  __perPage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPerPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTemplates_args"];
  if (__page_isset) {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __page];
    [outProtocol writeFieldEnd];
  }
  if (__perPage_isset) {
    [outProtocol writeFieldBeginWithName: @"perPage" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __perPage];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTemplates_args("];
  [ms appendString: @"page:"];
  [ms appendFormat: @"%i", __page];
  [ms appendString: @",perPage:"];
  [ms appendFormat: @"%i", __perPage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTemplates_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation GetTemplates_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetTemplates_result class]]) {
    return NO;
  }
  GetTemplates_result *other = (GetTemplates_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size46;
          [inProtocol readListBeginReturningElementType: NULL size: &_size46];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size46];
          int _i47;
          for (_i47 = 0; _i47 < _size46; ++_i47)
          {
            TTemplate *_elem48 = [[TTemplate alloc] init];
            [_elem48 read: inProtocol];
            [fieldValue addObject: _elem48];
            [_elem48 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTemplates_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int idx50;
        for (idx50 = 0; idx50 < [__success count]; idx50++)
        {
          [[__success objectAtIndex: idx50] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTemplates_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTemplateById_args : NSObject <TBase, NSCoding> {
  Text __id;
  Text __sessionKey;

  BOOL __id_isset;
  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=id, setter=setId:) Text id;
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithId: (Text) id sessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) id;
- (void) setId: (Text) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation getTemplateById_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id sessionKey: (Text) sessionKey
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getTemplateById_args class]]) {
    return NO;
  }
  getTemplateById_args *other = (getTemplateById_args *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTemplateById_args"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTemplateById_args("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTemplateById_result : NSObject <TBase, NSCoding> {
  TTemplate * __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TTemplate * success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (TTemplate *) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TTemplate *) success;
- (void) setSuccess: (TTemplate *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation GetTemplateById_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TTemplate *) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetTemplateById_result class]]) {
    return NO;
  }
  GetTemplateById_result *other = (GetTemplateById_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (TTemplate *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TTemplate *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TTemplate *fieldValue = [[TTemplate alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTemplateById_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTemplateById_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface createTemplate_args : NSObject <TBase, NSCoding> {
  Text __body;
  Text __sessionKey;

  BOOL __body_isset;
  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=body, setter=setBody:) Text body;
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithBody: (Text) body sessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) body;
- (void) setBody: (Text) body;
#endif
- (BOOL) bodyIsSet;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation createTemplate_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBody: (Text) body sessionKey: (Text) sessionKey
{
  self = [super init];
  __body = [body retain_stub];
  __body_isset = YES;
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __body_isset ? 2654435761 : 0;
  if (__body_isset)
  {
    hash = (hash * 31) ^ [__body hash];
  }
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[createTemplate_args class]]) {
    return NO;
  }
  createTemplate_args *other = (createTemplate_args *)anObject;
  if ((__body_isset != other->__body_isset) ||
      (__body_isset && ((__body || other->__body) && ![__body isEqual:other->__body]))) {
    return NO;
  }
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__body release_stub];
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"createTemplate_args"];
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"createTemplate_args("];
  [ms appendString: @"body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @",sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CreateTemplate_result : NSObject <TBase, NSCoding> {
  TTemplate * __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TTemplate * success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (TTemplate *) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TTemplate *) success;
- (void) setSuccess: (TTemplate *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation CreateTemplate_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TTemplate *) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CreateTemplate_result class]]) {
    return NO;
  }
  CreateTemplate_result *other = (CreateTemplate_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (TTemplate *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TTemplate *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TTemplate *fieldValue = [[TTemplate alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateTemplate_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateTemplate_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface updateTemplate_args : NSObject <TBase, NSCoding> {
  Text __id;
  Text __sessionKey;

  BOOL __id_isset;
  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=id, setter=setId:) Text id;
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithId: (Text) id sessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) id;
- (void) setId: (Text) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation updateTemplate_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id sessionKey: (Text) sessionKey
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[updateTemplate_args class]]) {
    return NO;
  }
  updateTemplate_args *other = (updateTemplate_args *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"updateTemplate_args"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"updateTemplate_args("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UpdateTemplate_result : NSObject <TBase, NSCoding> {
  Text __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Text success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (Text) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) success;
- (void) setSuccess: (Text) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation UpdateTemplate_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Text) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UpdateTemplate_result class]]) {
    return NO;
  }
  UpdateTemplate_result *other = (UpdateTemplate_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpdateTemplate_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UpdateTemplate_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface deleteTemplate_args : NSObject <TBase, NSCoding> {
  Text __id;
  Text __sessionKey;

  BOOL __id_isset;
  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=id, setter=setId:) Text id;
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithId: (Text) id sessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) id;
- (void) setId: (Text) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation deleteTemplate_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id sessionKey: (Text) sessionKey
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[deleteTemplate_args class]]) {
    return NO;
  }
  deleteTemplate_args *other = (deleteTemplate_args *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"deleteTemplate_args"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"deleteTemplate_args("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DeleteTemplate_result : NSObject <TBase, NSCoding> {
  Text __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Text success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (Text) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) success;
- (void) setSuccess: (Text) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation DeleteTemplate_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Text) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DeleteTemplate_result class]]) {
    return NO;
  }
  DeleteTemplate_result *other = (DeleteTemplate_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteTemplate_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeleteTemplate_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getObjectsFromStore_args : NSObject <TBase, NSCoding> {
  Text __sessionKey;

  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithSessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation getObjectsFromStore_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionKey: (Text) sessionKey
{
  self = [super init];
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getObjectsFromStore_args class]]) {
    return NO;
  }
  getObjectsFromStore_args *other = (getObjectsFromStore_args *)anObject;
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getObjectsFromStore_args"];
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getObjectsFromStore_args("];
  [ms appendString: @"sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetObjectsFromStore_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation GetObjectsFromStore_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetObjectsFromStore_result class]]) {
    return NO;
  }
  GetObjectsFromStore_result *other = (GetObjectsFromStore_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size51;
          [inProtocol readListBeginReturningElementType: NULL size: &_size51];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size51];
          int _i52;
          for (_i52 = 0; _i52 < _size51; ++_i52)
          {
            NSString * _elem53 = [inProtocol readString];
            [fieldValue addObject: _elem53];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetObjectsFromStore_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__success count]];
        int idx55;
        for (idx55 = 0; idx55 < [__success count]; idx55++)
        {
          [outProtocol writeString: [__success objectAtIndex: idx55]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetObjectsFromStore_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getObjectsFromStoreByAgg_args : NSObject <TBase, NSCoding> {
  Text __sessionKey;

  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithSessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation getObjectsFromStoreByAgg_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionKey: (Text) sessionKey
{
  self = [super init];
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getObjectsFromStoreByAgg_args class]]) {
    return NO;
  }
  getObjectsFromStoreByAgg_args *other = (getObjectsFromStoreByAgg_args *)anObject;
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getObjectsFromStoreByAgg_args"];
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getObjectsFromStoreByAgg_args("];
  [ms appendString: @"sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetObjectsFromStoreByAgg_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation GetObjectsFromStoreByAgg_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetObjectsFromStoreByAgg_result class]]) {
    return NO;
  }
  GetObjectsFromStoreByAgg_result *other = (GetObjectsFromStoreByAgg_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size56;
          [inProtocol readListBeginReturningElementType: NULL size: &_size56];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size56];
          int _i57;
          for (_i57 = 0; _i57 < _size56; ++_i57)
          {
            NSString * _elem58 = [inProtocol readString];
            [fieldValue addObject: _elem58];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetObjectsFromStoreByAgg_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__success count]];
        int idx60;
        for (idx60 = 0; idx60 < [__success count]; idx60++)
        {
          [outProtocol writeString: [__success objectAtIndex: idx60]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetObjectsFromStoreByAgg_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getObjectFromStoreById_args : NSObject <TBase, NSCoding> {
  Text __sessionKey;

  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithSessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation getObjectFromStoreById_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionKey: (Text) sessionKey
{
  self = [super init];
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getObjectFromStoreById_args class]]) {
    return NO;
  }
  getObjectFromStoreById_args *other = (getObjectFromStoreById_args *)anObject;
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getObjectFromStoreById_args"];
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getObjectFromStoreById_args("];
  [ms appendString: @"sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetObjectFromStoreById_result : NSObject <TBase, NSCoding> {
  Text __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Text success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (Text) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) success;
- (void) setSuccess: (Text) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation GetObjectFromStoreById_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Text) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetObjectFromStoreById_result class]]) {
    return NO;
  }
  GetObjectFromStoreById_result *other = (GetObjectFromStoreById_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetObjectFromStoreById_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetObjectFromStoreById_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface addObjectInStore_args : NSObject <TBase, NSCoding> {
  Text __body;
  Text __sessionKey;

  BOOL __body_isset;
  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=body, setter=setBody:) Text body;
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithBody: (Text) body sessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) body;
- (void) setBody: (Text) body;
#endif
- (BOOL) bodyIsSet;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation addObjectInStore_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBody: (Text) body sessionKey: (Text) sessionKey
{
  self = [super init];
  __body = [body retain_stub];
  __body_isset = YES;
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __body_isset ? 2654435761 : 0;
  if (__body_isset)
  {
    hash = (hash * 31) ^ [__body hash];
  }
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[addObjectInStore_args class]]) {
    return NO;
  }
  addObjectInStore_args *other = (addObjectInStore_args *)anObject;
  if ((__body_isset != other->__body_isset) ||
      (__body_isset && ((__body || other->__body) && ![__body isEqual:other->__body]))) {
    return NO;
  }
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__body release_stub];
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"addObjectInStore_args"];
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"addObjectInStore_args("];
  [ms appendString: @"body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @",sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AddObjectInStore_result : NSObject <TBase, NSCoding> {
  Text __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Text success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (Text) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) success;
- (void) setSuccess: (Text) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation AddObjectInStore_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Text) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AddObjectInStore_result class]]) {
    return NO;
  }
  AddObjectInStore_result *other = (AddObjectInStore_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddObjectInStore_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddObjectInStore_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface updateObjectInStore_args : NSObject <TBase, NSCoding> {
  Text __id;
  Text __body;
  Text __sessionKey;

  BOOL __id_isset;
  BOOL __body_isset;
  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=id, setter=setId:) Text id;
@property (nonatomic, retain, getter=body, setter=setBody:) Text body;
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithId: (Text) id body: (Text) body sessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) id;
- (void) setId: (Text) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (Text) body;
- (void) setBody: (Text) body;
#endif
- (BOOL) bodyIsSet;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation updateObjectInStore_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id body: (Text) body sessionKey: (Text) sessionKey
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __body = [body retain_stub];
  __body_isset = YES;
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __body_isset ? 2654435761 : 0;
  if (__body_isset)
  {
    hash = (hash * 31) ^ [__body hash];
  }
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[updateObjectInStore_args class]]) {
    return NO;
  }
  updateObjectInStore_args *other = (updateObjectInStore_args *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__body_isset != other->__body_isset) ||
      (__body_isset && ((__body || other->__body) && ![__body isEqual:other->__body]))) {
    return NO;
  }
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__body release_stub];
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"updateObjectInStore_args"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"updateObjectInStore_args("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @",sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UpdateObjectInStore_result : NSObject <TBase, NSCoding> {
  Text __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Text success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (Text) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) success;
- (void) setSuccess: (Text) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation UpdateObjectInStore_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Text) success io: (ServiceError *) io
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UpdateObjectInStore_result class]]) {
    return NO;
  }
  UpdateObjectInStore_result *other = (UpdateObjectInStore_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__io release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpdateObjectInStore_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UpdateObjectInStore_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface deleteObjectFromStore_args : NSObject <TBase, NSCoding> {
  Text __id;
  Text __sessionKey;

  BOOL __id_isset;
  BOOL __sessionKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=id, setter=setId:) Text id;
@property (nonatomic, retain, getter=sessionKey, setter=setSessionKey:) Text sessionKey;
#endif

- (id) init;
- (id) initWithId: (Text) id sessionKey: (Text) sessionKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Text) id;
- (void) setId: (Text) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (Text) sessionKey;
- (void) setSessionKey: (Text) sessionKey;
#endif
- (BOOL) sessionKeyIsSet;

@end

@implementation deleteObjectFromStore_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (Text) id sessionKey: (Text) sessionKey
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __sessionKey = [sessionKey retain_stub];
  __sessionKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionKey"])
  {
    __sessionKey = [[decoder decodeObjectForKey: @"sessionKey"] retain_stub];
    __sessionKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__sessionKey_isset)
  {
    [encoder encodeObject: __sessionKey forKey: @"sessionKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __sessionKey_isset ? 2654435761 : 0;
  if (__sessionKey_isset)
  {
    hash = (hash * 31) ^ [__sessionKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[deleteObjectFromStore_args class]]) {
    return NO;
  }
  deleteObjectFromStore_args *other = (deleteObjectFromStore_args *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__sessionKey_isset != other->__sessionKey_isset) ||
      (__sessionKey_isset && ((__sessionKey || other->__sessionKey) && ![__sessionKey isEqual:other->__sessionKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__sessionKey release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) sessionKey {
  return [[__sessionKey retain_stub] autorelease_stub];
}

- (void) setSessionKey: (NSString *) sessionKey {
  [sessionKey retain_stub];
  [__sessionKey release_stub];
  __sessionKey = sessionKey;
  __sessionKey_isset = YES;
}

- (BOOL) sessionKeyIsSet {
  return __sessionKey_isset;
}

- (void) unsetSessionKey {
  [__sessionKey release_stub];
  __sessionKey = nil;
  __sessionKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"deleteObjectFromStore_args"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionKey_isset) {
    if (__sessionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sessionKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"deleteObjectFromStore_args("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",sessionKey:"];
  [ms appendFormat: @"\"%@\"", __sessionKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DeleteObjectFromStore_result : NSObject <TBase, NSCoding> {
  int32_t __success;
  ServiceError * __io;

  BOOL __success_isset;
  BOOL __io_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
@property (nonatomic, retain, getter=io, setter=setIo:) ServiceError * io;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success io: (ServiceError *) io;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceError *) io;
- (void) setIo: (ServiceError *) io;
#endif
- (BOOL) ioIsSet;

@end

@implementation DeleteObjectFromStore_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int32_t) success io: (ServiceError *) io
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __io = [io retain_stub];
  __io_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"io"])
  {
    __io = [[decoder decodeObjectForKey: @"io"] retain_stub];
    __io_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
  if (__io_isset)
  {
    [encoder encodeObject: __io forKey: @"io"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  hash = (hash * 31) ^ __io_isset ? 2654435761 : 0;
  if (__io_isset)
  {
    hash = (hash * 31) ^ [__io hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DeleteObjectFromStore_result class]]) {
    return NO;
  }
  DeleteObjectFromStore_result *other = (DeleteObjectFromStore_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  if ((__io_isset != other->__io_isset) ||
      (__io_isset && ((__io || other->__io) && ![__io isEqual:other->__io]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__io release_stub];
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (ServiceError *) io {
  return [[__io retain_stub] autorelease_stub];
}

- (void) setIo: (ServiceError *) io {
  [io retain_stub];
  [__io release_stub];
  __io = io;
  __io_isset = YES;
}

- (BOOL) ioIsSet {
  return __io_isset;
}

- (void) unsetIo {
  [__io release_stub];
  __io = nil;
  __io_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceError *fieldValue = [[ServiceError alloc] init];
          [fieldValue read: inProtocol];
          [self setIo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteObjectFromStore_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  } else if (__io_isset) {
    if (__io != nil) {
      [outProtocol writeFieldBeginWithName: @"io" type: TType_STRUCT fieldID: 1];
      [__io write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeleteObjectFromStore_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",io:"];
  [ms appendFormat: @"%@", __io];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PointFlowClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_authenticate: (Text) email password: (Text) password apikey: (Text) apikey location: (TGeoLocation *) location
{
  [outProtocol writeMessageBeginWithName: @"authenticate" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"authenticate_args"];
  if (email != nil)  {
    [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
    [outProtocol writeString: email];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  if (apikey != nil)  {
    [outProtocol writeFieldBeginWithName: @"apikey" type: TType_STRING fieldID: 3];
    [outProtocol writeString: apikey];
    [outProtocol writeFieldEnd];
  }
  if (location != nil)  {
    [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 4];
    [location write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TUser *) recv_authenticate
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Authenticate_result * result = [[[Authenticate_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"authenticate failed: unknown result"];
}

- (TUser *) authenticate: (Text) email password: (Text) password apikey: (Text) apikey location: (TGeoLocation *) location
{
  [self send_authenticate : email password: password apikey: apikey location: location];
  [[outProtocol transport] flush];
  return [self recv_authenticate];
}

- (void) send_exchangeSession: (Text) brokerToken
{
  [outProtocol writeMessageBeginWithName: @"exchangeSession" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"exchangeSession_args"];
  if (brokerToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"brokerToken" type: TType_STRING fieldID: 1];
    [outProtocol writeString: brokerToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Text) recv_exchangeSession
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  ExchangeSession_result * result = [[[ExchangeSession_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"exchangeSession failed: unknown result"];
}

- (Text) exchangeSession: (Text) brokerToken
{
  [self send_exchangeSession : brokerToken];
  [[outProtocol transport] flush];
  return [self recv_exchangeSession];
}

- (void) send_getUserEmail: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"getUserEmail" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getUserEmail_args"];
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Text) recv_getUserEmail
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetUserEmail_result * result = [[[GetUserEmail_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getUserEmail failed: unknown result"];
}

- (Text) getUserEmail: (Text) sessionKey
{
  [self send_getUserEmail : sessionKey];
  [[outProtocol transport] flush];
  return [self recv_getUserEmail];
}

- (void) send_sendGCMToken: (Text) userid devicetoken: (Text) devicetoken deviceGuid: (Text) deviceGuid
{
  [outProtocol writeMessageBeginWithName: @"sendGCMToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendGCMToken_args"];
  if (userid != nil)  {
    [outProtocol writeFieldBeginWithName: @"userid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: userid];
    [outProtocol writeFieldEnd];
  }
  if (devicetoken != nil)  {
    [outProtocol writeFieldBeginWithName: @"devicetoken" type: TType_STRING fieldID: 2];
    [outProtocol writeString: devicetoken];
    [outProtocol writeFieldEnd];
  }
  if (deviceGuid != nil)  {
    [outProtocol writeFieldBeginWithName: @"deviceGuid" type: TType_STRING fieldID: 3];
    [outProtocol writeString: deviceGuid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Text) recv_sendGCMToken
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SendGCMToken_result * result = [[[SendGCMToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"sendGCMToken failed: unknown result"];
}

- (Text) sendGCMToken: (Text) userid devicetoken: (Text) devicetoken deviceGuid: (Text) deviceGuid
{
  [self send_sendGCMToken : userid devicetoken: devicetoken deviceGuid: deviceGuid];
  [[outProtocol transport] flush];
  return [self recv_sendGCMToken];
}

- (void) send_getActiveTasks: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"getActiveTasks" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getActiveTasks_args"];
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getActiveTasks
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetActiveTasks_result * result = [[[GetActiveTasks_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getActiveTasks failed: unknown result"];
}

- (NSMutableArray *) getActiveTasks: (Text) sessionKey
{
  [self send_getActiveTasks : sessionKey];
  [[outProtocol transport] flush];
  return [self recv_getActiveTasks];
}

- (void) send_getTaskDetails: (Text) taskId sessionKey: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"getTaskDetails" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTaskDetails_args"];
  if (taskId != nil)  {
    [outProtocol writeFieldBeginWithName: @"taskId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: taskId];
    [outProtocol writeFieldEnd];
  }
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TTaskDetail *) recv_getTaskDetails
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetTaskDetails_result * result = [[[GetTaskDetails_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTaskDetails failed: unknown result"];
}

- (TTaskDetail *) getTaskDetails: (Text) taskId sessionKey: (Text) sessionKey
{
  [self send_getTaskDetails : taskId sessionKey: sessionKey];
  [[outProtocol transport] flush];
  return [self recv_getTaskDetails];
}

- (void) send_getProcessTypes: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"getProcessTypes" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getProcessTypes_args"];
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getProcessTypes
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetProcessTypes_result * result = [[[GetProcessTypes_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getProcessTypes failed: unknown result"];
}

- (NSMutableArray *) getProcessTypes: (Text) sessionKey
{
  [self send_getProcessTypes : sessionKey];
  [[outProtocol transport] flush];
  return [self recv_getProcessTypes];
}

- (void) send_deleteProcess: (Text) processId
{
  [outProtocol writeMessageBeginWithName: @"deleteProcess" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"deleteProcess_args"];
  if (processId != nil)  {
    [outProtocol writeFieldBeginWithName: @"processId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: processId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Text) recv_deleteProcess
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  DeleteProcess_result * result = [[[DeleteProcess_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"deleteProcess failed: unknown result"];
}

- (Text) deleteProcess: (Text) processId
{
  [self send_deleteProcess : processId];
  [[outProtocol transport] flush];
  return [self recv_deleteProcess];
}

- (void) send_getApplications: (Text) sessionKey page: (int32_t) page perPage: (int32_t) perPage
{
  [outProtocol writeMessageBeginWithName: @"getApplications" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getApplications_args"];
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: page];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"perPage" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: perPage];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getApplications
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetApplications_result * result = [[[GetApplications_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getApplications failed: unknown result"];
}

- (NSMutableArray *) getApplications: (Text) sessionKey page: (int32_t) page perPage: (int32_t) perPage
{
  [self send_getApplications : sessionKey page: page perPage: perPage];
  [[outProtocol transport] flush];
  return [self recv_getApplications];
}

- (void) send_startApplication: (Text) id sessionKey: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"startApplication" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"startApplication_args"];
  if (id != nil)  {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
    [outProtocol writeString: id];
    [outProtocol writeFieldEnd];
  }
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TProcessType *) recv_startApplication
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  StartApplication_result * result = [[[StartApplication_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"startApplication failed: unknown result"];
}

- (TProcessType *) startApplication: (Text) id sessionKey: (Text) sessionKey
{
  [self send_startApplication : id sessionKey: sessionKey];
  [[outProtocol transport] flush];
  return [self recv_startApplication];
}

- (void) send_getTemplates: (int32_t) page perPage: (int32_t) perPage
{
  [outProtocol writeMessageBeginWithName: @"getTemplates" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTemplates_args"];
  [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: page];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"perPage" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: perPage];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getTemplates
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetTemplates_result * result = [[[GetTemplates_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTemplates failed: unknown result"];
}

- (NSMutableArray *) getTemplates: (int32_t) page perPage: (int32_t) perPage
{
  [self send_getTemplates : page perPage: perPage];
  [[outProtocol transport] flush];
  return [self recv_getTemplates];
}

- (void) send_getTemplateById: (Text) id sessionKey: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"getTemplateById" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTemplateById_args"];
  if (id != nil)  {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
    [outProtocol writeString: id];
    [outProtocol writeFieldEnd];
  }
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TTemplate *) recv_getTemplateById
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetTemplateById_result * result = [[[GetTemplateById_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTemplateById failed: unknown result"];
}

- (TTemplate *) getTemplateById: (Text) id sessionKey: (Text) sessionKey
{
  [self send_getTemplateById : id sessionKey: sessionKey];
  [[outProtocol transport] flush];
  return [self recv_getTemplateById];
}

- (void) send_createTemplate: (Text) body sessionKey: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"createTemplate" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"createTemplate_args"];
  if (body != nil)  {
    [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 1];
    [outProtocol writeString: body];
    [outProtocol writeFieldEnd];
  }
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TTemplate *) recv_createTemplate
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  CreateTemplate_result * result = [[[CreateTemplate_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"createTemplate failed: unknown result"];
}

- (TTemplate *) createTemplate: (Text) body sessionKey: (Text) sessionKey
{
  [self send_createTemplate : body sessionKey: sessionKey];
  [[outProtocol transport] flush];
  return [self recv_createTemplate];
}

- (void) send_updateTemplate: (Text) id sessionKey: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"updateTemplate" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"updateTemplate_args"];
  if (id != nil)  {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
    [outProtocol writeString: id];
    [outProtocol writeFieldEnd];
  }
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Text) recv_updateTemplate
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  UpdateTemplate_result * result = [[[UpdateTemplate_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"updateTemplate failed: unknown result"];
}

- (Text) updateTemplate: (Text) id sessionKey: (Text) sessionKey
{
  [self send_updateTemplate : id sessionKey: sessionKey];
  [[outProtocol transport] flush];
  return [self recv_updateTemplate];
}

- (void) send_deleteTemplate: (Text) id sessionKey: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"deleteTemplate" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"deleteTemplate_args"];
  if (id != nil)  {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
    [outProtocol writeString: id];
    [outProtocol writeFieldEnd];
  }
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Text) recv_deleteTemplate
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  DeleteTemplate_result * result = [[[DeleteTemplate_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"deleteTemplate failed: unknown result"];
}

- (Text) deleteTemplate: (Text) id sessionKey: (Text) sessionKey
{
  [self send_deleteTemplate : id sessionKey: sessionKey];
  [[outProtocol transport] flush];
  return [self recv_deleteTemplate];
}

- (void) send_getObjectsFromStore: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"getObjectsFromStore" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getObjectsFromStore_args"];
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getObjectsFromStore
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetObjectsFromStore_result * result = [[[GetObjectsFromStore_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getObjectsFromStore failed: unknown result"];
}

- (NSMutableArray *) getObjectsFromStore: (Text) sessionKey
{
  [self send_getObjectsFromStore : sessionKey];
  [[outProtocol transport] flush];
  return [self recv_getObjectsFromStore];
}

- (void) send_getObjectsFromStoreByAgg: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"getObjectsFromStoreByAgg" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getObjectsFromStoreByAgg_args"];
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getObjectsFromStoreByAgg
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetObjectsFromStoreByAgg_result * result = [[[GetObjectsFromStoreByAgg_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getObjectsFromStoreByAgg failed: unknown result"];
}

- (NSMutableArray *) getObjectsFromStoreByAgg: (Text) sessionKey
{
  [self send_getObjectsFromStoreByAgg : sessionKey];
  [[outProtocol transport] flush];
  return [self recv_getObjectsFromStoreByAgg];
}

- (void) send_getObjectFromStoreById: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"getObjectFromStoreById" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getObjectFromStoreById_args"];
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Text) recv_getObjectFromStoreById
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetObjectFromStoreById_result * result = [[[GetObjectFromStoreById_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getObjectFromStoreById failed: unknown result"];
}

- (Text) getObjectFromStoreById: (Text) sessionKey
{
  [self send_getObjectFromStoreById : sessionKey];
  [[outProtocol transport] flush];
  return [self recv_getObjectFromStoreById];
}

- (void) send_addObjectInStore: (Text) body sessionKey: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"addObjectInStore" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"addObjectInStore_args"];
  if (body != nil)  {
    [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 1];
    [outProtocol writeString: body];
    [outProtocol writeFieldEnd];
  }
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Text) recv_addObjectInStore
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  AddObjectInStore_result * result = [[[AddObjectInStore_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"addObjectInStore failed: unknown result"];
}

- (Text) addObjectInStore: (Text) body sessionKey: (Text) sessionKey
{
  [self send_addObjectInStore : body sessionKey: sessionKey];
  [[outProtocol transport] flush];
  return [self recv_addObjectInStore];
}

- (void) send_updateObjectInStore: (Text) id body: (Text) body sessionKey: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"updateObjectInStore" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"updateObjectInStore_args"];
  if (id != nil)  {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
    [outProtocol writeString: id];
    [outProtocol writeFieldEnd];
  }
  if (body != nil)  {
    [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 2];
    [outProtocol writeString: body];
    [outProtocol writeFieldEnd];
  }
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 3];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Text) recv_updateObjectInStore
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  UpdateObjectInStore_result * result = [[[UpdateObjectInStore_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"updateObjectInStore failed: unknown result"];
}

- (Text) updateObjectInStore: (Text) id body: (Text) body sessionKey: (Text) sessionKey
{
  [self send_updateObjectInStore : id body: body sessionKey: sessionKey];
  [[outProtocol transport] flush];
  return [self recv_updateObjectInStore];
}

- (void) send_deleteObjectFromStore: (Text) id sessionKey: (Text) sessionKey
{
  [outProtocol writeMessageBeginWithName: @"deleteObjectFromStore" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"deleteObjectFromStore_args"];
  if (id != nil)  {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
    [outProtocol writeString: id];
    [outProtocol writeFieldEnd];
  }
  if (sessionKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionKey" type: TType_STRING fieldID: 2];
    [outProtocol writeString: sessionKey];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (int32_t) recv_deleteObjectFromStore
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  DeleteObjectFromStore_result * result = [[[DeleteObjectFromStore_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ioIsSet]) {
    @throw [result io];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"deleteObjectFromStore failed: unknown result"];
}

- (int32_t) deleteObjectFromStore: (Text) id sessionKey: (Text) sessionKey
{
  [self send_deleteObjectFromStore : id sessionKey: sessionKey];
  [[outProtocol transport] flush];
  return [self recv_deleteObjectFromStore];
}

@end

@implementation PointFlowProcessor

- (id) initWithPointFlow: (id <PointFlow>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_authenticate_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"authenticate"];
}
{
  SEL s = @selector(process_exchangeSession_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"exchangeSession"];
}
{
  SEL s = @selector(process_getUserEmail_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getUserEmail"];
}
{
  SEL s = @selector(process_sendGCMToken_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"sendGCMToken"];
}
{
  SEL s = @selector(process_getActiveTasks_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getActiveTasks"];
}
{
  SEL s = @selector(process_getTaskDetails_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getTaskDetails"];
}
{
  SEL s = @selector(process_getProcessTypes_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getProcessTypes"];
}
{
  SEL s = @selector(process_deleteProcess_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"deleteProcess"];
}
{
  SEL s = @selector(process_getApplications_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getApplications"];
}
{
  SEL s = @selector(process_startApplication_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"startApplication"];
}
{
  SEL s = @selector(process_getTemplates_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getTemplates"];
}
{
  SEL s = @selector(process_getTemplateById_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getTemplateById"];
}
{
  SEL s = @selector(process_createTemplate_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"createTemplate"];
}
{
  SEL s = @selector(process_updateTemplate_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"updateTemplate"];
}
{
  SEL s = @selector(process_deleteTemplate_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"deleteTemplate"];
}
{
  SEL s = @selector(process_getObjectsFromStore_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getObjectsFromStore"];
}
{
  SEL s = @selector(process_getObjectsFromStoreByAgg_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getObjectsFromStoreByAgg"];
}
{
  SEL s = @selector(process_getObjectFromStoreById_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getObjectFromStoreById"];
}
{
  SEL s = @selector(process_addObjectInStore_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"addObjectInStore"];
}
{
  SEL s = @selector(process_updateObjectInStore_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"updateObjectInStore"];
}
{
  SEL s = @selector(process_deleteObjectFromStore_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"deleteObjectFromStore"];
}
return self;
}

- (id<PointFlow>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_authenticate_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
authenticate_args * args = [[authenticate_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Authenticate_result * result = [[Authenticate_result alloc] init];
[result setSuccess: [mService authenticate: [args email] password: [args password] apikey: [args apikey] location: [args location]]];
[outProtocol writeMessageBeginWithName: @"authenticate"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_exchangeSession_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
exchangeSession_args * args = [[exchangeSession_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
ExchangeSession_result * result = [[ExchangeSession_result alloc] init];
[result setSuccess: [mService exchangeSession: [args brokerToken]]];
[outProtocol writeMessageBeginWithName: @"exchangeSession"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getUserEmail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getUserEmail_args * args = [[getUserEmail_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetUserEmail_result * result = [[GetUserEmail_result alloc] init];
[result setSuccess: [mService getUserEmail: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"getUserEmail"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_sendGCMToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
sendGCMToken_args * args = [[sendGCMToken_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SendGCMToken_result * result = [[SendGCMToken_result alloc] init];
[result setSuccess: [mService sendGCMToken: [args userid] devicetoken: [args devicetoken] deviceGuid: [args deviceGuid]]];
[outProtocol writeMessageBeginWithName: @"sendGCMToken"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getActiveTasks_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getActiveTasks_args * args = [[getActiveTasks_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetActiveTasks_result * result = [[GetActiveTasks_result alloc] init];
[result setSuccess: [mService getActiveTasks: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"getActiveTasks"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getTaskDetails_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getTaskDetails_args * args = [[getTaskDetails_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetTaskDetails_result * result = [[GetTaskDetails_result alloc] init];
[result setSuccess: [mService getTaskDetails: [args taskId] sessionKey: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"getTaskDetails"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getProcessTypes_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getProcessTypes_args * args = [[getProcessTypes_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetProcessTypes_result * result = [[GetProcessTypes_result alloc] init];
[result setSuccess: [mService getProcessTypes: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"getProcessTypes"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_deleteProcess_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteProcess_args * args = [[deleteProcess_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteProcess_result * result = [[DeleteProcess_result alloc] init];
[result setSuccess: [mService deleteProcess: [args processId]]];
[outProtocol writeMessageBeginWithName: @"deleteProcess"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getApplications_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getApplications_args * args = [[getApplications_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetApplications_result * result = [[GetApplications_result alloc] init];
[result setSuccess: [mService getApplications: [args sessionKey] page: [args page] perPage: [args perPage]]];
[outProtocol writeMessageBeginWithName: @"getApplications"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_startApplication_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
startApplication_args * args = [[startApplication_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
StartApplication_result * result = [[StartApplication_result alloc] init];
[result setSuccess: [mService startApplication: [args id] sessionKey: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"startApplication"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getTemplates_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getTemplates_args * args = [[getTemplates_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetTemplates_result * result = [[GetTemplates_result alloc] init];
[result setSuccess: [mService getTemplates: [args page] perPage: [args perPage]]];
[outProtocol writeMessageBeginWithName: @"getTemplates"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getTemplateById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getTemplateById_args * args = [[getTemplateById_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetTemplateById_result * result = [[GetTemplateById_result alloc] init];
[result setSuccess: [mService getTemplateById: [args id] sessionKey: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"getTemplateById"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_createTemplate_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
createTemplate_args * args = [[createTemplate_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
CreateTemplate_result * result = [[CreateTemplate_result alloc] init];
[result setSuccess: [mService createTemplate: [args body] sessionKey: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"createTemplate"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_updateTemplate_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
updateTemplate_args * args = [[updateTemplate_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UpdateTemplate_result * result = [[UpdateTemplate_result alloc] init];
[result setSuccess: [mService updateTemplate: [args id] sessionKey: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"updateTemplate"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_deleteTemplate_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteTemplate_args * args = [[deleteTemplate_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteTemplate_result * result = [[DeleteTemplate_result alloc] init];
[result setSuccess: [mService deleteTemplate: [args id] sessionKey: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"deleteTemplate"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getObjectsFromStore_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getObjectsFromStore_args * args = [[getObjectsFromStore_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetObjectsFromStore_result * result = [[GetObjectsFromStore_result alloc] init];
[result setSuccess: [mService getObjectsFromStore: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"getObjectsFromStore"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getObjectsFromStoreByAgg_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getObjectsFromStoreByAgg_args * args = [[getObjectsFromStoreByAgg_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetObjectsFromStoreByAgg_result * result = [[GetObjectsFromStoreByAgg_result alloc] init];
[result setSuccess: [mService getObjectsFromStoreByAgg: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"getObjectsFromStoreByAgg"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getObjectFromStoreById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getObjectFromStoreById_args * args = [[getObjectFromStoreById_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetObjectFromStoreById_result * result = [[GetObjectFromStoreById_result alloc] init];
[result setSuccess: [mService getObjectFromStoreById: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"getObjectFromStoreById"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_addObjectInStore_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addObjectInStore_args * args = [[addObjectInStore_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddObjectInStore_result * result = [[AddObjectInStore_result alloc] init];
[result setSuccess: [mService addObjectInStore: [args body] sessionKey: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"addObjectInStore"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_updateObjectInStore_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
updateObjectInStore_args * args = [[updateObjectInStore_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UpdateObjectInStore_result * result = [[UpdateObjectInStore_result alloc] init];
[result setSuccess: [mService updateObjectInStore: [args id] body: [args body] sessionKey: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"updateObjectInStore"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_deleteObjectFromStore_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteObjectFromStore_args * args = [[deleteObjectFromStore_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteObjectFromStore_result * result = [[DeleteObjectFromStore_result alloc] init];
[result setSuccess: [mService deleteObjectFromStore: [args id] sessionKey: [args sessionKey]]];
[outProtocol writeMessageBeginWithName: @"deleteObjectFromStore"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

