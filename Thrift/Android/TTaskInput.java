/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package point.io.securevault.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-10")
public class TTaskInput implements org.apache.thrift.TBase<TTaskInput, TTaskInput._Fields>, java.io.Serializable, Cloneable, Comparable<TTaskInput> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTaskInput");

  private static final org.apache.thrift.protocol.TField RELATEDS_FIELD_DESC = new org.apache.thrift.protocol.TField("relateds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("facts", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("form", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTaskInputStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTaskInputTupleSchemeFactory());
  }

  public List<String> relateds; // optional
  public List<String> options; // optional
  public List<String> fields; // optional
  public Map<String,String> facts; // optional
  public String form; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RELATEDS((short)1, "relateds"),
    OPTIONS((short)2, "options"),
    FIELDS((short)3, "fields"),
    FACTS((short)4, "facts"),
    FORM((short)5, "form");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RELATEDS
          return RELATEDS;
        case 2: // OPTIONS
          return OPTIONS;
        case 3: // FIELDS
          return FIELDS;
        case 4: // FACTS
          return FACTS;
        case 5: // FORM
          return FORM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RELATEDS,_Fields.OPTIONS,_Fields.FIELDS,_Fields.FACTS,_Fields.FORM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATEDS, new org.apache.thrift.meta_data.FieldMetaData("relateds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "Text"))));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "Text"))));
    tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "Text"))));
    tmpMap.put(_Fields.FACTS, new org.apache.thrift.meta_data.FieldMetaData("facts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "Text"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "Text"))));
    tmpMap.put(_Fields.FORM, new org.apache.thrift.meta_data.FieldMetaData("form", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTaskInput.class, metaDataMap);
  }

  public TTaskInput() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTaskInput(TTaskInput other) {
    if (other.isSetRelateds()) {
      List<String> __this__relateds = new ArrayList<String>(other.relateds.size());
      for (String other_element : other.relateds) {
        __this__relateds.add(other_element);
      }
      this.relateds = __this__relateds;
    }
    if (other.isSetOptions()) {
      List<String> __this__options = new ArrayList<String>(other.options.size());
      for (String other_element : other.options) {
        __this__options.add(other_element);
      }
      this.options = __this__options;
    }
    if (other.isSetFields()) {
      List<String> __this__fields = new ArrayList<String>(other.fields.size());
      for (String other_element : other.fields) {
        __this__fields.add(other_element);
      }
      this.fields = __this__fields;
    }
    if (other.isSetFacts()) {
      Map<String,String> __this__facts = new HashMap<String,String>(other.facts.size());
      for (Map.Entry<String, String> other_element : other.facts.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__facts_copy_key = other_element_key;

        String __this__facts_copy_value = other_element_value;

        __this__facts.put(__this__facts_copy_key, __this__facts_copy_value);
      }
      this.facts = __this__facts;
    }
    if (other.isSetForm()) {
      this.form = other.form;
    }
  }

  public TTaskInput deepCopy() {
    return new TTaskInput(this);
  }

  @Override
  public void clear() {
    this.relateds = null;
    this.options = null;
    this.fields = null;
    this.facts = null;
    this.form = null;
  }

  public int getRelatedsSize() {
    return (this.relateds == null) ? 0 : this.relateds.size();
  }

  public java.util.Iterator<String> getRelatedsIterator() {
    return (this.relateds == null) ? null : this.relateds.iterator();
  }

  public void addToRelateds(String elem) {
    if (this.relateds == null) {
      this.relateds = new ArrayList<String>();
    }
    this.relateds.add(elem);
  }

  public List<String> getRelateds() {
    return this.relateds;
  }

  public TTaskInput setRelateds(List<String> relateds) {
    this.relateds = relateds;
    return this;
  }

  public void unsetRelateds() {
    this.relateds = null;
  }

  /** Returns true if field relateds is set (has been assigned a value) and false otherwise */
  public boolean isSetRelateds() {
    return this.relateds != null;
  }

  public void setRelatedsIsSet(boolean value) {
    if (!value) {
      this.relateds = null;
    }
  }

  public int getOptionsSize() {
    return (this.options == null) ? 0 : this.options.size();
  }

  public java.util.Iterator<String> getOptionsIterator() {
    return (this.options == null) ? null : this.options.iterator();
  }

  public void addToOptions(String elem) {
    if (this.options == null) {
      this.options = new ArrayList<String>();
    }
    this.options.add(elem);
  }

  public List<String> getOptions() {
    return this.options;
  }

  public TTaskInput setOptions(List<String> options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public int getFieldsSize() {
    return (this.fields == null) ? 0 : this.fields.size();
  }

  public java.util.Iterator<String> getFieldsIterator() {
    return (this.fields == null) ? null : this.fields.iterator();
  }

  public void addToFields(String elem) {
    if (this.fields == null) {
      this.fields = new ArrayList<String>();
    }
    this.fields.add(elem);
  }

  public List<String> getFields() {
    return this.fields;
  }

  public TTaskInput setFields(List<String> fields) {
    this.fields = fields;
    return this;
  }

  public void unsetFields() {
    this.fields = null;
  }

  /** Returns true if field fields is set (has been assigned a value) and false otherwise */
  public boolean isSetFields() {
    return this.fields != null;
  }

  public void setFieldsIsSet(boolean value) {
    if (!value) {
      this.fields = null;
    }
  }

  public int getFactsSize() {
    return (this.facts == null) ? 0 : this.facts.size();
  }

  public void putToFacts(String key, String val) {
    if (this.facts == null) {
      this.facts = new HashMap<String,String>();
    }
    this.facts.put(key, val);
  }

  public Map<String,String> getFacts() {
    return this.facts;
  }

  public TTaskInput setFacts(Map<String,String> facts) {
    this.facts = facts;
    return this;
  }

  public void unsetFacts() {
    this.facts = null;
  }

  /** Returns true if field facts is set (has been assigned a value) and false otherwise */
  public boolean isSetFacts() {
    return this.facts != null;
  }

  public void setFactsIsSet(boolean value) {
    if (!value) {
      this.facts = null;
    }
  }

  public String getForm() {
    return this.form;
  }

  public TTaskInput setForm(String form) {
    this.form = form;
    return this;
  }

  public void unsetForm() {
    this.form = null;
  }

  /** Returns true if field form is set (has been assigned a value) and false otherwise */
  public boolean isSetForm() {
    return this.form != null;
  }

  public void setFormIsSet(boolean value) {
    if (!value) {
      this.form = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RELATEDS:
      if (value == null) {
        unsetRelateds();
      } else {
        setRelateds((List<String>)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((List<String>)value);
      }
      break;

    case FIELDS:
      if (value == null) {
        unsetFields();
      } else {
        setFields((List<String>)value);
      }
      break;

    case FACTS:
      if (value == null) {
        unsetFacts();
      } else {
        setFacts((Map<String,String>)value);
      }
      break;

    case FORM:
      if (value == null) {
        unsetForm();
      } else {
        setForm((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATEDS:
      return getRelateds();

    case OPTIONS:
      return getOptions();

    case FIELDS:
      return getFields();

    case FACTS:
      return getFacts();

    case FORM:
      return getForm();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RELATEDS:
      return isSetRelateds();
    case OPTIONS:
      return isSetOptions();
    case FIELDS:
      return isSetFields();
    case FACTS:
      return isSetFacts();
    case FORM:
      return isSetForm();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTaskInput)
      return this.equals((TTaskInput)that);
    return false;
  }

  public boolean equals(TTaskInput that) {
    if (that == null)
      return false;

    boolean this_present_relateds = true && this.isSetRelateds();
    boolean that_present_relateds = true && that.isSetRelateds();
    if (this_present_relateds || that_present_relateds) {
      if (!(this_present_relateds && that_present_relateds))
        return false;
      if (!this.relateds.equals(that.relateds))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_fields = true && this.isSetFields();
    boolean that_present_fields = true && that.isSetFields();
    if (this_present_fields || that_present_fields) {
      if (!(this_present_fields && that_present_fields))
        return false;
      if (!this.fields.equals(that.fields))
        return false;
    }

    boolean this_present_facts = true && this.isSetFacts();
    boolean that_present_facts = true && that.isSetFacts();
    if (this_present_facts || that_present_facts) {
      if (!(this_present_facts && that_present_facts))
        return false;
      if (!this.facts.equals(that.facts))
        return false;
    }

    boolean this_present_form = true && this.isSetForm();
    boolean that_present_form = true && that.isSetForm();
    if (this_present_form || that_present_form) {
      if (!(this_present_form && that_present_form))
        return false;
      if (!this.form.equals(that.form))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_relateds = true && (isSetRelateds());
    list.add(present_relateds);
    if (present_relateds)
      list.add(relateds);

    boolean present_options = true && (isSetOptions());
    list.add(present_options);
    if (present_options)
      list.add(options);

    boolean present_fields = true && (isSetFields());
    list.add(present_fields);
    if (present_fields)
      list.add(fields);

    boolean present_facts = true && (isSetFacts());
    list.add(present_facts);
    if (present_facts)
      list.add(facts);

    boolean present_form = true && (isSetForm());
    list.add(present_form);
    if (present_form)
      list.add(form);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTaskInput other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRelateds()).compareTo(other.isSetRelateds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelateds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relateds, other.relateds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacts()).compareTo(other.isSetFacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facts, other.facts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTaskInput(");
    boolean first = true;

    if (isSetRelateds()) {
      sb.append("relateds:");
      if (this.relateds == null) {
        sb.append("null");
      } else {
        sb.append(this.relateds);
      }
      first = false;
    }
    if (isSetOptions()) {
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
    }
    if (isSetFields()) {
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
    }
    if (isSetFacts()) {
      if (!first) sb.append(", ");
      sb.append("facts:");
      if (this.facts == null) {
        sb.append("null");
      } else {
        sb.append(this.facts);
      }
      first = false;
    }
    if (isSetForm()) {
      if (!first) sb.append(", ");
      sb.append("form:");
      if (this.form == null) {
        sb.append("null");
      } else {
        sb.append(this.form);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTaskInputStandardSchemeFactory implements SchemeFactory {
    public TTaskInputStandardScheme getScheme() {
      return new TTaskInputStandardScheme();
    }
  }

  private static class TTaskInputStandardScheme extends StandardScheme<TTaskInput> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTaskInput struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RELATEDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.relateds = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.relateds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setRelatedsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.options = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.options.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.fields = new ArrayList<String>(_list6.size);
                String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.fields.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map9 = iprot.readMapBegin();
                struct.facts = new HashMap<String,String>(2*_map9.size);
                String _key10;
                String _val11;
                for (int _i12 = 0; _i12 < _map9.size; ++_i12)
                {
                  _key10 = iprot.readString();
                  _val11 = iprot.readString();
                  struct.facts.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setFactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.form = iprot.readString();
              struct.setFormIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTaskInput struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.relateds != null) {
        if (struct.isSetRelateds()) {
          oprot.writeFieldBegin(RELATEDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.relateds.size()));
            for (String _iter13 : struct.relateds)
            {
              oprot.writeString(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.options != null) {
        if (struct.isSetOptions()) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.options.size()));
            for (String _iter14 : struct.options)
            {
              oprot.writeString(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fields != null) {
        if (struct.isSetFields()) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fields.size()));
            for (String _iter15 : struct.fields)
            {
              oprot.writeString(_iter15);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.facts != null) {
        if (struct.isSetFacts()) {
          oprot.writeFieldBegin(FACTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.facts.size()));
            for (Map.Entry<String, String> _iter16 : struct.facts.entrySet())
            {
              oprot.writeString(_iter16.getKey());
              oprot.writeString(_iter16.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.form != null) {
        if (struct.isSetForm()) {
          oprot.writeFieldBegin(FORM_FIELD_DESC);
          oprot.writeString(struct.form);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTaskInputTupleSchemeFactory implements SchemeFactory {
    public TTaskInputTupleScheme getScheme() {
      return new TTaskInputTupleScheme();
    }
  }

  private static class TTaskInputTupleScheme extends TupleScheme<TTaskInput> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTaskInput struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRelateds()) {
        optionals.set(0);
      }
      if (struct.isSetOptions()) {
        optionals.set(1);
      }
      if (struct.isSetFields()) {
        optionals.set(2);
      }
      if (struct.isSetFacts()) {
        optionals.set(3);
      }
      if (struct.isSetForm()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRelateds()) {
        {
          oprot.writeI32(struct.relateds.size());
          for (String _iter17 : struct.relateds)
          {
            oprot.writeString(_iter17);
          }
        }
      }
      if (struct.isSetOptions()) {
        {
          oprot.writeI32(struct.options.size());
          for (String _iter18 : struct.options)
          {
            oprot.writeString(_iter18);
          }
        }
      }
      if (struct.isSetFields()) {
        {
          oprot.writeI32(struct.fields.size());
          for (String _iter19 : struct.fields)
          {
            oprot.writeString(_iter19);
          }
        }
      }
      if (struct.isSetFacts()) {
        {
          oprot.writeI32(struct.facts.size());
          for (Map.Entry<String, String> _iter20 : struct.facts.entrySet())
          {
            oprot.writeString(_iter20.getKey());
            oprot.writeString(_iter20.getValue());
          }
        }
      }
      if (struct.isSetForm()) {
        oprot.writeString(struct.form);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTaskInput struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.relateds = new ArrayList<String>(_list21.size);
          String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.relateds.add(_elem22);
          }
        }
        struct.setRelatedsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list24 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.options = new ArrayList<String>(_list24.size);
          String _elem25;
          for (int _i26 = 0; _i26 < _list24.size; ++_i26)
          {
            _elem25 = iprot.readString();
            struct.options.add(_elem25);
          }
        }
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list27 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fields = new ArrayList<String>(_list27.size);
          String _elem28;
          for (int _i29 = 0; _i29 < _list27.size; ++_i29)
          {
            _elem28 = iprot.readString();
            struct.fields.add(_elem28);
          }
        }
        struct.setFieldsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.facts = new HashMap<String,String>(2*_map30.size);
          String _key31;
          String _val32;
          for (int _i33 = 0; _i33 < _map30.size; ++_i33)
          {
            _key31 = iprot.readString();
            _val32 = iprot.readString();
            struct.facts.put(_key31, _val32);
          }
        }
        struct.setFactsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.form = iprot.readString();
        struct.setFormIsSet(true);
      }
    }
  }

}

