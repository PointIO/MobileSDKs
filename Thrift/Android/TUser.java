/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package point.io.securevault.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A User object is used to specify details of a Point.io user.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-10")
public class TUser implements org.apache.thrift.TBase<TUser, TUser._Fields>, java.io.Serializable, Cloneable, Comparable<TUser> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUser");

  private static final org.apache.thrift.protocol.TField SESSION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("organizationName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField F_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField L_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField INBOX_FOLDER_FIELD_DESC = new org.apache.thrift.protocol.TField("InboxFolder", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TZ_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("tzOffset", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_USERS_PER_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxUsersPerShare", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MAX_FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxFileSize", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TUserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TUserTupleSchemeFactory());
  }

  public String sessionKey; // required
  public String organizationName; // required
  public String email; // required
  public String fName; // optional
  public String lName; // optional
  public String sex; // optional
  public String InboxFolder; // optional
  public String userId; // optional
  public int groupId; // optional
  public int tzOffset; // optional
  public int maxUsersPerShare; // optional
  public long maxFileSize; // optional
  public TGeoLocation location; // optional
  public int error; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_KEY((short)1, "sessionKey"),
    ORGANIZATION_NAME((short)2, "organizationName"),
    EMAIL((short)3, "email"),
    F_NAME((short)4, "fName"),
    L_NAME((short)5, "lName"),
    SEX((short)6, "sex"),
    INBOX_FOLDER((short)7, "InboxFolder"),
    USER_ID((short)8, "userId"),
    GROUP_ID((short)9, "groupId"),
    TZ_OFFSET((short)10, "tzOffset"),
    MAX_USERS_PER_SHARE((short)11, "maxUsersPerShare"),
    MAX_FILE_SIZE((short)12, "maxFileSize"),
    LOCATION((short)13, "location"),
    ERROR((short)14, "error");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_KEY
          return SESSION_KEY;
        case 2: // ORGANIZATION_NAME
          return ORGANIZATION_NAME;
        case 3: // EMAIL
          return EMAIL;
        case 4: // F_NAME
          return F_NAME;
        case 5: // L_NAME
          return L_NAME;
        case 6: // SEX
          return SEX;
        case 7: // INBOX_FOLDER
          return INBOX_FOLDER;
        case 8: // USER_ID
          return USER_ID;
        case 9: // GROUP_ID
          return GROUP_ID;
        case 10: // TZ_OFFSET
          return TZ_OFFSET;
        case 11: // MAX_USERS_PER_SHARE
          return MAX_USERS_PER_SHARE;
        case 12: // MAX_FILE_SIZE
          return MAX_FILE_SIZE;
        case 13: // LOCATION
          return LOCATION;
        case 14: // ERROR
          return ERROR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GROUPID_ISSET_ID = 0;
  private static final int __TZOFFSET_ISSET_ID = 1;
  private static final int __MAXUSERSPERSHARE_ISSET_ID = 2;
  private static final int __MAXFILESIZE_ISSET_ID = 3;
  private static final int __ERROR_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.F_NAME,_Fields.L_NAME,_Fields.SEX,_Fields.INBOX_FOLDER,_Fields.USER_ID,_Fields.GROUP_ID,_Fields.TZ_OFFSET,_Fields.MAX_USERS_PER_SHARE,_Fields.MAX_FILE_SIZE,_Fields.LOCATION,_Fields.ERROR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_KEY, new org.apache.thrift.meta_data.FieldMetaData("sessionKey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.ORGANIZATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("organizationName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.F_NAME, new org.apache.thrift.meta_data.FieldMetaData("fName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.L_NAME, new org.apache.thrift.meta_data.FieldMetaData("lName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.INBOX_FOLDER, new org.apache.thrift.meta_data.FieldMetaData("InboxFolder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TZ_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("tzOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_USERS_PER_SHARE, new org.apache.thrift.meta_data.FieldMetaData("maxUsersPerShare", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("maxFileSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGeoLocation.class)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUser.class, metaDataMap);
  }

  public TUser() {
    this.tzOffset = 0;

  }

  public TUser(
    String sessionKey,
    String organizationName,
    String email)
  {
    this();
    this.sessionKey = sessionKey;
    this.organizationName = organizationName;
    this.email = email;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUser(TUser other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSessionKey()) {
      this.sessionKey = other.sessionKey;
    }
    if (other.isSetOrganizationName()) {
      this.organizationName = other.organizationName;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetFName()) {
      this.fName = other.fName;
    }
    if (other.isSetLName()) {
      this.lName = other.lName;
    }
    if (other.isSetSex()) {
      this.sex = other.sex;
    }
    if (other.isSetInboxFolder()) {
      this.InboxFolder = other.InboxFolder;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    this.groupId = other.groupId;
    this.tzOffset = other.tzOffset;
    this.maxUsersPerShare = other.maxUsersPerShare;
    this.maxFileSize = other.maxFileSize;
    if (other.isSetLocation()) {
      this.location = new TGeoLocation(other.location);
    }
    this.error = other.error;
  }

  public TUser deepCopy() {
    return new TUser(this);
  }

  @Override
  public void clear() {
    this.sessionKey = null;
    this.organizationName = null;
    this.email = null;
    this.fName = null;
    this.lName = null;
    this.sex = null;
    this.InboxFolder = null;
    this.userId = null;
    setGroupIdIsSet(false);
    this.groupId = 0;
    this.tzOffset = 0;

    setMaxUsersPerShareIsSet(false);
    this.maxUsersPerShare = 0;
    setMaxFileSizeIsSet(false);
    this.maxFileSize = 0;
    this.location = null;
    setErrorIsSet(false);
    this.error = 0;
  }

  public String getSessionKey() {
    return this.sessionKey;
  }

  public TUser setSessionKey(String sessionKey) {
    this.sessionKey = sessionKey;
    return this;
  }

  public void unsetSessionKey() {
    this.sessionKey = null;
  }

  /** Returns true if field sessionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionKey() {
    return this.sessionKey != null;
  }

  public void setSessionKeyIsSet(boolean value) {
    if (!value) {
      this.sessionKey = null;
    }
  }

  public String getOrganizationName() {
    return this.organizationName;
  }

  public TUser setOrganizationName(String organizationName) {
    this.organizationName = organizationName;
    return this;
  }

  public void unsetOrganizationName() {
    this.organizationName = null;
  }

  /** Returns true if field organizationName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganizationName() {
    return this.organizationName != null;
  }

  public void setOrganizationNameIsSet(boolean value) {
    if (!value) {
      this.organizationName = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public TUser setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getFName() {
    return this.fName;
  }

  public TUser setFName(String fName) {
    this.fName = fName;
    return this;
  }

  public void unsetFName() {
    this.fName = null;
  }

  /** Returns true if field fName is set (has been assigned a value) and false otherwise */
  public boolean isSetFName() {
    return this.fName != null;
  }

  public void setFNameIsSet(boolean value) {
    if (!value) {
      this.fName = null;
    }
  }

  public String getLName() {
    return this.lName;
  }

  public TUser setLName(String lName) {
    this.lName = lName;
    return this;
  }

  public void unsetLName() {
    this.lName = null;
  }

  /** Returns true if field lName is set (has been assigned a value) and false otherwise */
  public boolean isSetLName() {
    return this.lName != null;
  }

  public void setLNameIsSet(boolean value) {
    if (!value) {
      this.lName = null;
    }
  }

  public String getSex() {
    return this.sex;
  }

  public TUser setSex(String sex) {
    this.sex = sex;
    return this;
  }

  public void unsetSex() {
    this.sex = null;
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return this.sex != null;
  }

  public void setSexIsSet(boolean value) {
    if (!value) {
      this.sex = null;
    }
  }

  public String getInboxFolder() {
    return this.InboxFolder;
  }

  public TUser setInboxFolder(String InboxFolder) {
    this.InboxFolder = InboxFolder;
    return this;
  }

  public void unsetInboxFolder() {
    this.InboxFolder = null;
  }

  /** Returns true if field InboxFolder is set (has been assigned a value) and false otherwise */
  public boolean isSetInboxFolder() {
    return this.InboxFolder != null;
  }

  public void setInboxFolderIsSet(boolean value) {
    if (!value) {
      this.InboxFolder = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public TUser setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public int getGroupId() {
    return this.groupId;
  }

  public TUser setGroupId(int groupId) {
    this.groupId = groupId;
    setGroupIdIsSet(true);
    return this;
  }

  public void unsetGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public int getTzOffset() {
    return this.tzOffset;
  }

  public TUser setTzOffset(int tzOffset) {
    this.tzOffset = tzOffset;
    setTzOffsetIsSet(true);
    return this;
  }

  public void unsetTzOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TZOFFSET_ISSET_ID);
  }

  /** Returns true if field tzOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetTzOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __TZOFFSET_ISSET_ID);
  }

  public void setTzOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TZOFFSET_ISSET_ID, value);
  }

  public int getMaxUsersPerShare() {
    return this.maxUsersPerShare;
  }

  public TUser setMaxUsersPerShare(int maxUsersPerShare) {
    this.maxUsersPerShare = maxUsersPerShare;
    setMaxUsersPerShareIsSet(true);
    return this;
  }

  public void unsetMaxUsersPerShare() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXUSERSPERSHARE_ISSET_ID);
  }

  /** Returns true if field maxUsersPerShare is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxUsersPerShare() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXUSERSPERSHARE_ISSET_ID);
  }

  public void setMaxUsersPerShareIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXUSERSPERSHARE_ISSET_ID, value);
  }

  public long getMaxFileSize() {
    return this.maxFileSize;
  }

  public TUser setMaxFileSize(long maxFileSize) {
    this.maxFileSize = maxFileSize;
    setMaxFileSizeIsSet(true);
    return this;
  }

  public void unsetMaxFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXFILESIZE_ISSET_ID);
  }

  /** Returns true if field maxFileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXFILESIZE_ISSET_ID);
  }

  public void setMaxFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXFILESIZE_ISSET_ID, value);
  }

  public TGeoLocation getLocation() {
    return this.location;
  }

  public TUser setLocation(TGeoLocation location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getError() {
    return this.error;
  }

  public TUser setError(int error) {
    this.error = error;
    setErrorIsSet(true);
    return this;
  }

  public void unsetError() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERROR_ISSET_ID);
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return EncodingUtils.testBit(__isset_bitfield, __ERROR_ISSET_ID);
  }

  public void setErrorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERROR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SESSION_KEY:
      if (value == null) {
        unsetSessionKey();
      } else {
        setSessionKey((String)value);
      }
      break;

    case ORGANIZATION_NAME:
      if (value == null) {
        unsetOrganizationName();
      } else {
        setOrganizationName((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case F_NAME:
      if (value == null) {
        unsetFName();
      } else {
        setFName((String)value);
      }
      break;

    case L_NAME:
      if (value == null) {
        unsetLName();
      } else {
        setLName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((String)value);
      }
      break;

    case INBOX_FOLDER:
      if (value == null) {
        unsetInboxFolder();
      } else {
        setInboxFolder((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((Integer)value);
      }
      break;

    case TZ_OFFSET:
      if (value == null) {
        unsetTzOffset();
      } else {
        setTzOffset((Integer)value);
      }
      break;

    case MAX_USERS_PER_SHARE:
      if (value == null) {
        unsetMaxUsersPerShare();
      } else {
        setMaxUsersPerShare((Integer)value);
      }
      break;

    case MAX_FILE_SIZE:
      if (value == null) {
        unsetMaxFileSize();
      } else {
        setMaxFileSize((Long)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((TGeoLocation)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_KEY:
      return getSessionKey();

    case ORGANIZATION_NAME:
      return getOrganizationName();

    case EMAIL:
      return getEmail();

    case F_NAME:
      return getFName();

    case L_NAME:
      return getLName();

    case SEX:
      return getSex();

    case INBOX_FOLDER:
      return getInboxFolder();

    case USER_ID:
      return getUserId();

    case GROUP_ID:
      return getGroupId();

    case TZ_OFFSET:
      return getTzOffset();

    case MAX_USERS_PER_SHARE:
      return getMaxUsersPerShare();

    case MAX_FILE_SIZE:
      return getMaxFileSize();

    case LOCATION:
      return getLocation();

    case ERROR:
      return getError();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SESSION_KEY:
      return isSetSessionKey();
    case ORGANIZATION_NAME:
      return isSetOrganizationName();
    case EMAIL:
      return isSetEmail();
    case F_NAME:
      return isSetFName();
    case L_NAME:
      return isSetLName();
    case SEX:
      return isSetSex();
    case INBOX_FOLDER:
      return isSetInboxFolder();
    case USER_ID:
      return isSetUserId();
    case GROUP_ID:
      return isSetGroupId();
    case TZ_OFFSET:
      return isSetTzOffset();
    case MAX_USERS_PER_SHARE:
      return isSetMaxUsersPerShare();
    case MAX_FILE_SIZE:
      return isSetMaxFileSize();
    case LOCATION:
      return isSetLocation();
    case ERROR:
      return isSetError();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUser)
      return this.equals((TUser)that);
    return false;
  }

  public boolean equals(TUser that) {
    if (that == null)
      return false;

    boolean this_present_sessionKey = true && this.isSetSessionKey();
    boolean that_present_sessionKey = true && that.isSetSessionKey();
    if (this_present_sessionKey || that_present_sessionKey) {
      if (!(this_present_sessionKey && that_present_sessionKey))
        return false;
      if (!this.sessionKey.equals(that.sessionKey))
        return false;
    }

    boolean this_present_organizationName = true && this.isSetOrganizationName();
    boolean that_present_organizationName = true && that.isSetOrganizationName();
    if (this_present_organizationName || that_present_organizationName) {
      if (!(this_present_organizationName && that_present_organizationName))
        return false;
      if (!this.organizationName.equals(that.organizationName))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_fName = true && this.isSetFName();
    boolean that_present_fName = true && that.isSetFName();
    if (this_present_fName || that_present_fName) {
      if (!(this_present_fName && that_present_fName))
        return false;
      if (!this.fName.equals(that.fName))
        return false;
    }

    boolean this_present_lName = true && this.isSetLName();
    boolean that_present_lName = true && that.isSetLName();
    if (this_present_lName || that_present_lName) {
      if (!(this_present_lName && that_present_lName))
        return false;
      if (!this.lName.equals(that.lName))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (!this.sex.equals(that.sex))
        return false;
    }

    boolean this_present_InboxFolder = true && this.isSetInboxFolder();
    boolean that_present_InboxFolder = true && that.isSetInboxFolder();
    if (this_present_InboxFolder || that_present_InboxFolder) {
      if (!(this_present_InboxFolder && that_present_InboxFolder))
        return false;
      if (!this.InboxFolder.equals(that.InboxFolder))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_groupId = true && this.isSetGroupId();
    boolean that_present_groupId = true && that.isSetGroupId();
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (this.groupId != that.groupId)
        return false;
    }

    boolean this_present_tzOffset = true && this.isSetTzOffset();
    boolean that_present_tzOffset = true && that.isSetTzOffset();
    if (this_present_tzOffset || that_present_tzOffset) {
      if (!(this_present_tzOffset && that_present_tzOffset))
        return false;
      if (this.tzOffset != that.tzOffset)
        return false;
    }

    boolean this_present_maxUsersPerShare = true && this.isSetMaxUsersPerShare();
    boolean that_present_maxUsersPerShare = true && that.isSetMaxUsersPerShare();
    if (this_present_maxUsersPerShare || that_present_maxUsersPerShare) {
      if (!(this_present_maxUsersPerShare && that_present_maxUsersPerShare))
        return false;
      if (this.maxUsersPerShare != that.maxUsersPerShare)
        return false;
    }

    boolean this_present_maxFileSize = true && this.isSetMaxFileSize();
    boolean that_present_maxFileSize = true && that.isSetMaxFileSize();
    if (this_present_maxFileSize || that_present_maxFileSize) {
      if (!(this_present_maxFileSize && that_present_maxFileSize))
        return false;
      if (this.maxFileSize != that.maxFileSize)
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (this.error != that.error)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sessionKey = true && (isSetSessionKey());
    list.add(present_sessionKey);
    if (present_sessionKey)
      list.add(sessionKey);

    boolean present_organizationName = true && (isSetOrganizationName());
    list.add(present_organizationName);
    if (present_organizationName)
      list.add(organizationName);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_fName = true && (isSetFName());
    list.add(present_fName);
    if (present_fName)
      list.add(fName);

    boolean present_lName = true && (isSetLName());
    list.add(present_lName);
    if (present_lName)
      list.add(lName);

    boolean present_sex = true && (isSetSex());
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_InboxFolder = true && (isSetInboxFolder());
    list.add(present_InboxFolder);
    if (present_InboxFolder)
      list.add(InboxFolder);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_groupId = true && (isSetGroupId());
    list.add(present_groupId);
    if (present_groupId)
      list.add(groupId);

    boolean present_tzOffset = true && (isSetTzOffset());
    list.add(present_tzOffset);
    if (present_tzOffset)
      list.add(tzOffset);

    boolean present_maxUsersPerShare = true && (isSetMaxUsersPerShare());
    list.add(present_maxUsersPerShare);
    if (present_maxUsersPerShare)
      list.add(maxUsersPerShare);

    boolean present_maxFileSize = true && (isSetMaxFileSize());
    list.add(present_maxFileSize);
    if (present_maxFileSize)
      list.add(maxFileSize);

    boolean present_location = true && (isSetLocation());
    list.add(present_location);
    if (present_location)
      list.add(location);

    boolean present_error = true && (isSetError());
    list.add(present_error);
    if (present_error)
      list.add(error);

    return list.hashCode();
  }

  @Override
  public int compareTo(TUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSessionKey()).compareTo(other.isSetSessionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionKey, other.sessionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganizationName()).compareTo(other.isSetOrganizationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganizationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizationName, other.organizationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFName()).compareTo(other.isSetFName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fName, other.fName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLName()).compareTo(other.isSetLName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lName, other.lName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInboxFolder()).compareTo(other.isSetInboxFolder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInboxFolder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.InboxFolder, other.InboxFolder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTzOffset()).compareTo(other.isSetTzOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTzOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tzOffset, other.tzOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxUsersPerShare()).compareTo(other.isSetMaxUsersPerShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxUsersPerShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxUsersPerShare, other.maxUsersPerShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxFileSize()).compareTo(other.isSetMaxFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxFileSize, other.maxFileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUser(");
    boolean first = true;

    sb.append("sessionKey:");
    if (this.sessionKey == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("organizationName:");
    if (this.organizationName == null) {
      sb.append("null");
    } else {
      sb.append(this.organizationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (isSetFName()) {
      if (!first) sb.append(", ");
      sb.append("fName:");
      if (this.fName == null) {
        sb.append("null");
      } else {
        sb.append(this.fName);
      }
      first = false;
    }
    if (isSetLName()) {
      if (!first) sb.append(", ");
      sb.append("lName:");
      if (this.lName == null) {
        sb.append("null");
      } else {
        sb.append(this.lName);
      }
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      if (this.sex == null) {
        sb.append("null");
      } else {
        sb.append(this.sex);
      }
      first = false;
    }
    if (isSetInboxFolder()) {
      if (!first) sb.append(", ");
      sb.append("InboxFolder:");
      if (this.InboxFolder == null) {
        sb.append("null");
      } else {
        sb.append(this.InboxFolder);
      }
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
    }
    if (isSetGroupId()) {
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
    }
    if (isSetTzOffset()) {
      if (!first) sb.append(", ");
      sb.append("tzOffset:");
      sb.append(this.tzOffset);
      first = false;
    }
    if (isSetMaxUsersPerShare()) {
      if (!first) sb.append(", ");
      sb.append("maxUsersPerShare:");
      sb.append(this.maxUsersPerShare);
      first = false;
    }
    if (isSetMaxFileSize()) {
      if (!first) sb.append(", ");
      sb.append("maxFileSize:");
      sb.append(this.maxFileSize);
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      sb.append(this.error);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sessionKey == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionKey' was not present! Struct: " + toString());
    }
    if (organizationName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'organizationName' was not present! Struct: " + toString());
    }
    if (email == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'email' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (location != null) {
      location.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUserStandardSchemeFactory implements SchemeFactory {
    public TUserStandardScheme getScheme() {
      return new TUserStandardScheme();
    }
  }

  private static class TUserStandardScheme extends StandardScheme<TUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionKey = iprot.readString();
              struct.setSessionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORGANIZATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organizationName = iprot.readString();
              struct.setOrganizationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // F_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fName = iprot.readString();
              struct.setFNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // L_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lName = iprot.readString();
              struct.setLNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sex = iprot.readString();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INBOX_FOLDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.InboxFolder = iprot.readString();
              struct.setInboxFolderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupId = iprot.readI32();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TZ_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tzOffset = iprot.readI32();
              struct.setTzOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_USERS_PER_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxUsersPerShare = iprot.readI32();
              struct.setMaxUsersPerShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAX_FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxFileSize = iprot.readI64();
              struct.setMaxFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.location = new TGeoLocation();
              struct.location.read(iprot);
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.error = iprot.readI32();
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUser struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sessionKey != null) {
        oprot.writeFieldBegin(SESSION_KEY_FIELD_DESC);
        oprot.writeString(struct.sessionKey);
        oprot.writeFieldEnd();
      }
      if (struct.organizationName != null) {
        oprot.writeFieldBegin(ORGANIZATION_NAME_FIELD_DESC);
        oprot.writeString(struct.organizationName);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.fName != null) {
        if (struct.isSetFName()) {
          oprot.writeFieldBegin(F_NAME_FIELD_DESC);
          oprot.writeString(struct.fName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lName != null) {
        if (struct.isSetLName()) {
          oprot.writeFieldBegin(L_NAME_FIELD_DESC);
          oprot.writeString(struct.lName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sex != null) {
        if (struct.isSetSex()) {
          oprot.writeFieldBegin(SEX_FIELD_DESC);
          oprot.writeString(struct.sex);
          oprot.writeFieldEnd();
        }
      }
      if (struct.InboxFolder != null) {
        if (struct.isSetInboxFolder()) {
          oprot.writeFieldBegin(INBOX_FOLDER_FIELD_DESC);
          oprot.writeString(struct.InboxFolder);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userId != null) {
        if (struct.isSetUserId()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGroupId()) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.groupId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTzOffset()) {
        oprot.writeFieldBegin(TZ_OFFSET_FIELD_DESC);
        oprot.writeI32(struct.tzOffset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxUsersPerShare()) {
        oprot.writeFieldBegin(MAX_USERS_PER_SHARE_FIELD_DESC);
        oprot.writeI32(struct.maxUsersPerShare);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxFileSize()) {
        oprot.writeFieldBegin(MAX_FILE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.maxFileSize);
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        oprot.writeI32(struct.error);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUserTupleSchemeFactory implements SchemeFactory {
    public TUserTupleScheme getScheme() {
      return new TUserTupleScheme();
    }
  }

  private static class TUserTupleScheme extends TupleScheme<TUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUser struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sessionKey);
      oprot.writeString(struct.organizationName);
      oprot.writeString(struct.email);
      BitSet optionals = new BitSet();
      if (struct.isSetFName()) {
        optionals.set(0);
      }
      if (struct.isSetLName()) {
        optionals.set(1);
      }
      if (struct.isSetSex()) {
        optionals.set(2);
      }
      if (struct.isSetInboxFolder()) {
        optionals.set(3);
      }
      if (struct.isSetUserId()) {
        optionals.set(4);
      }
      if (struct.isSetGroupId()) {
        optionals.set(5);
      }
      if (struct.isSetTzOffset()) {
        optionals.set(6);
      }
      if (struct.isSetMaxUsersPerShare()) {
        optionals.set(7);
      }
      if (struct.isSetMaxFileSize()) {
        optionals.set(8);
      }
      if (struct.isSetLocation()) {
        optionals.set(9);
      }
      if (struct.isSetError()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetFName()) {
        oprot.writeString(struct.fName);
      }
      if (struct.isSetLName()) {
        oprot.writeString(struct.lName);
      }
      if (struct.isSetSex()) {
        oprot.writeString(struct.sex);
      }
      if (struct.isSetInboxFolder()) {
        oprot.writeString(struct.InboxFolder);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetGroupId()) {
        oprot.writeI32(struct.groupId);
      }
      if (struct.isSetTzOffset()) {
        oprot.writeI32(struct.tzOffset);
      }
      if (struct.isSetMaxUsersPerShare()) {
        oprot.writeI32(struct.maxUsersPerShare);
      }
      if (struct.isSetMaxFileSize()) {
        oprot.writeI64(struct.maxFileSize);
      }
      if (struct.isSetLocation()) {
        struct.location.write(oprot);
      }
      if (struct.isSetError()) {
        oprot.writeI32(struct.error);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUser struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sessionKey = iprot.readString();
      struct.setSessionKeyIsSet(true);
      struct.organizationName = iprot.readString();
      struct.setOrganizationNameIsSet(true);
      struct.email = iprot.readString();
      struct.setEmailIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.fName = iprot.readString();
        struct.setFNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lName = iprot.readString();
        struct.setLNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sex = iprot.readString();
        struct.setSexIsSet(true);
      }
      if (incoming.get(3)) {
        struct.InboxFolder = iprot.readString();
        struct.setInboxFolderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.groupId = iprot.readI32();
        struct.setGroupIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tzOffset = iprot.readI32();
        struct.setTzOffsetIsSet(true);
      }
      if (incoming.get(7)) {
        struct.maxUsersPerShare = iprot.readI32();
        struct.setMaxUsersPerShareIsSet(true);
      }
      if (incoming.get(8)) {
        struct.maxFileSize = iprot.readI64();
        struct.setMaxFileSizeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.location = new TGeoLocation();
        struct.location.read(iprot);
        struct.setLocationIsSet(true);
      }
      if (incoming.get(10)) {
        struct.error = iprot.readI32();
        struct.setErrorIsSet(true);
      }
    }
  }

}

