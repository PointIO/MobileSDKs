/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package point.io.securevault.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-10")
public class TProcessType implements org.apache.thrift.TBase<TProcessType, TProcessType._Fields>, java.io.Serializable, Cloneable, Comparable<TProcessType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TProcessType");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RESOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEPLOYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deploymentId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField HAS_START_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("hasStartForm", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField IS_SUSPENDED_FIELD_DESC = new org.apache.thrift.protocol.TField("isSuspended", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BPMN_XML_FIELD_DESC = new org.apache.thrift.protocol.TField("bpmnXML", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TProcessTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TProcessTypeTupleSchemeFactory());
  }

  public String id; // required
  public String key; // required
  public String name; // required
  public String category; // optional
  public String desc; // optional
  public String resourceName; // optional
  public String deploymentId; // optional
  public int version; // optional
  public boolean hasStartForm; // optional
  public boolean isSuspended; // optional
  public String tenantId; // optional
  public String bpmnXML; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    KEY((short)2, "key"),
    NAME((short)3, "name"),
    CATEGORY((short)4, "category"),
    DESC((short)5, "desc"),
    RESOURCE_NAME((short)6, "resourceName"),
    DEPLOYMENT_ID((short)7, "deploymentId"),
    VERSION((short)8, "version"),
    HAS_START_FORM((short)9, "hasStartForm"),
    IS_SUSPENDED((short)10, "isSuspended"),
    TENANT_ID((short)11, "tenantId"),
    BPMN_XML((short)12, "bpmnXML");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // KEY
          return KEY;
        case 3: // NAME
          return NAME;
        case 4: // CATEGORY
          return CATEGORY;
        case 5: // DESC
          return DESC;
        case 6: // RESOURCE_NAME
          return RESOURCE_NAME;
        case 7: // DEPLOYMENT_ID
          return DEPLOYMENT_ID;
        case 8: // VERSION
          return VERSION;
        case 9: // HAS_START_FORM
          return HAS_START_FORM;
        case 10: // IS_SUSPENDED
          return IS_SUSPENDED;
        case 11: // TENANT_ID
          return TENANT_ID;
        case 12: // BPMN_XML
          return BPMN_XML;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __HASSTARTFORM_ISSET_ID = 1;
  private static final int __ISSUSPENDED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CATEGORY,_Fields.DESC,_Fields.RESOURCE_NAME,_Fields.DEPLOYMENT_ID,_Fields.VERSION,_Fields.HAS_START_FORM,_Fields.IS_SUSPENDED,_Fields.TENANT_ID,_Fields.BPMN_XML};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.RESOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("resourceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.DEPLOYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("deploymentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_START_FORM, new org.apache.thrift.meta_data.FieldMetaData("hasStartForm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SUSPENDED, new org.apache.thrift.meta_data.FieldMetaData("isSuspended", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.BPMN_XML, new org.apache.thrift.meta_data.FieldMetaData("bpmnXML", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TProcessType.class, metaDataMap);
  }

  public TProcessType() {
  }

  public TProcessType(
    String id,
    String key,
    String name)
  {
    this();
    this.id = id;
    this.key = key;
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TProcessType(TProcessType other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetResourceName()) {
      this.resourceName = other.resourceName;
    }
    if (other.isSetDeploymentId()) {
      this.deploymentId = other.deploymentId;
    }
    this.version = other.version;
    this.hasStartForm = other.hasStartForm;
    this.isSuspended = other.isSuspended;
    if (other.isSetTenantId()) {
      this.tenantId = other.tenantId;
    }
    if (other.isSetBpmnXML()) {
      this.bpmnXML = other.bpmnXML;
    }
  }

  public TProcessType deepCopy() {
    return new TProcessType(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.key = null;
    this.name = null;
    this.category = null;
    this.desc = null;
    this.resourceName = null;
    this.deploymentId = null;
    setVersionIsSet(false);
    this.version = 0;
    setHasStartFormIsSet(false);
    this.hasStartForm = false;
    setIsSuspendedIsSet(false);
    this.isSuspended = false;
    this.tenantId = null;
    this.bpmnXML = null;
  }

  public String getId() {
    return this.id;
  }

  public TProcessType setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getKey() {
    return this.key;
  }

  public TProcessType setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TProcessType setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getCategory() {
    return this.category;
  }

  public TProcessType setCategory(String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public TProcessType setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getResourceName() {
    return this.resourceName;
  }

  public TProcessType setResourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  public void unsetResourceName() {
    this.resourceName = null;
  }

  /** Returns true if field resourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceName() {
    return this.resourceName != null;
  }

  public void setResourceNameIsSet(boolean value) {
    if (!value) {
      this.resourceName = null;
    }
  }

  public String getDeploymentId() {
    return this.deploymentId;
  }

  public TProcessType setDeploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
    return this;
  }

  public void unsetDeploymentId() {
    this.deploymentId = null;
  }

  /** Returns true if field deploymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeploymentId() {
    return this.deploymentId != null;
  }

  public void setDeploymentIdIsSet(boolean value) {
    if (!value) {
      this.deploymentId = null;
    }
  }

  public int getVersion() {
    return this.version;
  }

  public TProcessType setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public boolean isHasStartForm() {
    return this.hasStartForm;
  }

  public TProcessType setHasStartForm(boolean hasStartForm) {
    this.hasStartForm = hasStartForm;
    setHasStartFormIsSet(true);
    return this;
  }

  public void unsetHasStartForm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASSTARTFORM_ISSET_ID);
  }

  /** Returns true if field hasStartForm is set (has been assigned a value) and false otherwise */
  public boolean isSetHasStartForm() {
    return EncodingUtils.testBit(__isset_bitfield, __HASSTARTFORM_ISSET_ID);
  }

  public void setHasStartFormIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASSTARTFORM_ISSET_ID, value);
  }

  public boolean isIsSuspended() {
    return this.isSuspended;
  }

  public TProcessType setIsSuspended(boolean isSuspended) {
    this.isSuspended = isSuspended;
    setIsSuspendedIsSet(true);
    return this;
  }

  public void unsetIsSuspended() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUSPENDED_ISSET_ID);
  }

  /** Returns true if field isSuspended is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSuspended() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUSPENDED_ISSET_ID);
  }

  public void setIsSuspendedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUSPENDED_ISSET_ID, value);
  }

  public String getTenantId() {
    return this.tenantId;
  }

  public TProcessType setTenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  public void unsetTenantId() {
    this.tenantId = null;
  }

  /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
  public boolean isSetTenantId() {
    return this.tenantId != null;
  }

  public void setTenantIdIsSet(boolean value) {
    if (!value) {
      this.tenantId = null;
    }
  }

  public String getBpmnXML() {
    return this.bpmnXML;
  }

  public TProcessType setBpmnXML(String bpmnXML) {
    this.bpmnXML = bpmnXML;
    return this;
  }

  public void unsetBpmnXML() {
    this.bpmnXML = null;
  }

  /** Returns true if field bpmnXML is set (has been assigned a value) and false otherwise */
  public boolean isSetBpmnXML() {
    return this.bpmnXML != null;
  }

  public void setBpmnXMLIsSet(boolean value) {
    if (!value) {
      this.bpmnXML = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case RESOURCE_NAME:
      if (value == null) {
        unsetResourceName();
      } else {
        setResourceName((String)value);
      }
      break;

    case DEPLOYMENT_ID:
      if (value == null) {
        unsetDeploymentId();
      } else {
        setDeploymentId((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case HAS_START_FORM:
      if (value == null) {
        unsetHasStartForm();
      } else {
        setHasStartForm((Boolean)value);
      }
      break;

    case IS_SUSPENDED:
      if (value == null) {
        unsetIsSuspended();
      } else {
        setIsSuspended((Boolean)value);
      }
      break;

    case TENANT_ID:
      if (value == null) {
        unsetTenantId();
      } else {
        setTenantId((String)value);
      }
      break;

    case BPMN_XML:
      if (value == null) {
        unsetBpmnXML();
      } else {
        setBpmnXML((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case KEY:
      return getKey();

    case NAME:
      return getName();

    case CATEGORY:
      return getCategory();

    case DESC:
      return getDesc();

    case RESOURCE_NAME:
      return getResourceName();

    case DEPLOYMENT_ID:
      return getDeploymentId();

    case VERSION:
      return getVersion();

    case HAS_START_FORM:
      return isHasStartForm();

    case IS_SUSPENDED:
      return isIsSuspended();

    case TENANT_ID:
      return getTenantId();

    case BPMN_XML:
      return getBpmnXML();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case KEY:
      return isSetKey();
    case NAME:
      return isSetName();
    case CATEGORY:
      return isSetCategory();
    case DESC:
      return isSetDesc();
    case RESOURCE_NAME:
      return isSetResourceName();
    case DEPLOYMENT_ID:
      return isSetDeploymentId();
    case VERSION:
      return isSetVersion();
    case HAS_START_FORM:
      return isSetHasStartForm();
    case IS_SUSPENDED:
      return isSetIsSuspended();
    case TENANT_ID:
      return isSetTenantId();
    case BPMN_XML:
      return isSetBpmnXML();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TProcessType)
      return this.equals((TProcessType)that);
    return false;
  }

  public boolean equals(TProcessType that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_resourceName = true && this.isSetResourceName();
    boolean that_present_resourceName = true && that.isSetResourceName();
    if (this_present_resourceName || that_present_resourceName) {
      if (!(this_present_resourceName && that_present_resourceName))
        return false;
      if (!this.resourceName.equals(that.resourceName))
        return false;
    }

    boolean this_present_deploymentId = true && this.isSetDeploymentId();
    boolean that_present_deploymentId = true && that.isSetDeploymentId();
    if (this_present_deploymentId || that_present_deploymentId) {
      if (!(this_present_deploymentId && that_present_deploymentId))
        return false;
      if (!this.deploymentId.equals(that.deploymentId))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_hasStartForm = true && this.isSetHasStartForm();
    boolean that_present_hasStartForm = true && that.isSetHasStartForm();
    if (this_present_hasStartForm || that_present_hasStartForm) {
      if (!(this_present_hasStartForm && that_present_hasStartForm))
        return false;
      if (this.hasStartForm != that.hasStartForm)
        return false;
    }

    boolean this_present_isSuspended = true && this.isSetIsSuspended();
    boolean that_present_isSuspended = true && that.isSetIsSuspended();
    if (this_present_isSuspended || that_present_isSuspended) {
      if (!(this_present_isSuspended && that_present_isSuspended))
        return false;
      if (this.isSuspended != that.isSuspended)
        return false;
    }

    boolean this_present_tenantId = true && this.isSetTenantId();
    boolean that_present_tenantId = true && that.isSetTenantId();
    if (this_present_tenantId || that_present_tenantId) {
      if (!(this_present_tenantId && that_present_tenantId))
        return false;
      if (!this.tenantId.equals(that.tenantId))
        return false;
    }

    boolean this_present_bpmnXML = true && this.isSetBpmnXML();
    boolean that_present_bpmnXML = true && that.isSetBpmnXML();
    if (this_present_bpmnXML || that_present_bpmnXML) {
      if (!(this_present_bpmnXML && that_present_bpmnXML))
        return false;
      if (!this.bpmnXML.equals(that.bpmnXML))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_key = true && (isSetKey());
    list.add(present_key);
    if (present_key)
      list.add(key);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_category = true && (isSetCategory());
    list.add(present_category);
    if (present_category)
      list.add(category);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_resourceName = true && (isSetResourceName());
    list.add(present_resourceName);
    if (present_resourceName)
      list.add(resourceName);

    boolean present_deploymentId = true && (isSetDeploymentId());
    list.add(present_deploymentId);
    if (present_deploymentId)
      list.add(deploymentId);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_hasStartForm = true && (isSetHasStartForm());
    list.add(present_hasStartForm);
    if (present_hasStartForm)
      list.add(hasStartForm);

    boolean present_isSuspended = true && (isSetIsSuspended());
    list.add(present_isSuspended);
    if (present_isSuspended)
      list.add(isSuspended);

    boolean present_tenantId = true && (isSetTenantId());
    list.add(present_tenantId);
    if (present_tenantId)
      list.add(tenantId);

    boolean present_bpmnXML = true && (isSetBpmnXML());
    list.add(present_bpmnXML);
    if (present_bpmnXML)
      list.add(bpmnXML);

    return list.hashCode();
  }

  @Override
  public int compareTo(TProcessType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceName()).compareTo(other.isSetResourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceName, other.resourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeploymentId()).compareTo(other.isSetDeploymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeploymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deploymentId, other.deploymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasStartForm()).compareTo(other.isSetHasStartForm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasStartForm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasStartForm, other.hasStartForm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSuspended()).compareTo(other.isSetIsSuspended());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSuspended()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSuspended, other.isSuspended);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBpmnXML()).compareTo(other.isSetBpmnXML());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBpmnXML()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bpmnXML, other.bpmnXML);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TProcessType(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetCategory()) {
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetResourceName()) {
      if (!first) sb.append(", ");
      sb.append("resourceName:");
      if (this.resourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceName);
      }
      first = false;
    }
    if (isSetDeploymentId()) {
      if (!first) sb.append(", ");
      sb.append("deploymentId:");
      if (this.deploymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.deploymentId);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetHasStartForm()) {
      if (!first) sb.append(", ");
      sb.append("hasStartForm:");
      sb.append(this.hasStartForm);
      first = false;
    }
    if (isSetIsSuspended()) {
      if (!first) sb.append(", ");
      sb.append("isSuspended:");
      sb.append(this.isSuspended);
      first = false;
    }
    if (isSetTenantId()) {
      if (!first) sb.append(", ");
      sb.append("tenantId:");
      if (this.tenantId == null) {
        sb.append("null");
      } else {
        sb.append(this.tenantId);
      }
      first = false;
    }
    if (isSetBpmnXML()) {
      if (!first) sb.append(", ");
      sb.append("bpmnXML:");
      if (this.bpmnXML == null) {
        sb.append("null");
      } else {
        sb.append(this.bpmnXML);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TProcessTypeStandardSchemeFactory implements SchemeFactory {
    public TProcessTypeStandardScheme getScheme() {
      return new TProcessTypeStandardScheme();
    }
  }

  private static class TProcessTypeStandardScheme extends StandardScheme<TProcessType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TProcessType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceName = iprot.readString();
              struct.setResourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEPLOYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deploymentId = iprot.readString();
              struct.setDeploymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HAS_START_FORM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasStartForm = iprot.readBool();
              struct.setHasStartFormIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_SUSPENDED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSuspended = iprot.readBool();
              struct.setIsSuspendedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TENANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tenantId = iprot.readString();
              struct.setTenantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BPMN_XML
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bpmnXML = iprot.readString();
              struct.setBpmnXMLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TProcessType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.category != null) {
        if (struct.isSetCategory()) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeString(struct.category);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceName != null) {
        if (struct.isSetResourceName()) {
          oprot.writeFieldBegin(RESOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.resourceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deploymentId != null) {
        if (struct.isSetDeploymentId()) {
          oprot.writeFieldBegin(DEPLOYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.deploymentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHasStartForm()) {
        oprot.writeFieldBegin(HAS_START_FORM_FIELD_DESC);
        oprot.writeBool(struct.hasStartForm);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsSuspended()) {
        oprot.writeFieldBegin(IS_SUSPENDED_FIELD_DESC);
        oprot.writeBool(struct.isSuspended);
        oprot.writeFieldEnd();
      }
      if (struct.tenantId != null) {
        if (struct.isSetTenantId()) {
          oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
          oprot.writeString(struct.tenantId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bpmnXML != null) {
        if (struct.isSetBpmnXML()) {
          oprot.writeFieldBegin(BPMN_XML_FIELD_DESC);
          oprot.writeString(struct.bpmnXML);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TProcessTypeTupleSchemeFactory implements SchemeFactory {
    public TProcessTypeTupleScheme getScheme() {
      return new TProcessTypeTupleScheme();
    }
  }

  private static class TProcessTypeTupleScheme extends TupleScheme<TProcessType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TProcessType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.key);
      oprot.writeString(struct.name);
      BitSet optionals = new BitSet();
      if (struct.isSetCategory()) {
        optionals.set(0);
      }
      if (struct.isSetDesc()) {
        optionals.set(1);
      }
      if (struct.isSetResourceName()) {
        optionals.set(2);
      }
      if (struct.isSetDeploymentId()) {
        optionals.set(3);
      }
      if (struct.isSetVersion()) {
        optionals.set(4);
      }
      if (struct.isSetHasStartForm()) {
        optionals.set(5);
      }
      if (struct.isSetIsSuspended()) {
        optionals.set(6);
      }
      if (struct.isSetTenantId()) {
        optionals.set(7);
      }
      if (struct.isSetBpmnXML()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetCategory()) {
        oprot.writeString(struct.category);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetResourceName()) {
        oprot.writeString(struct.resourceName);
      }
      if (struct.isSetDeploymentId()) {
        oprot.writeString(struct.deploymentId);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetHasStartForm()) {
        oprot.writeBool(struct.hasStartForm);
      }
      if (struct.isSetIsSuspended()) {
        oprot.writeBool(struct.isSuspended);
      }
      if (struct.isSetTenantId()) {
        oprot.writeString(struct.tenantId);
      }
      if (struct.isSetBpmnXML()) {
        oprot.writeString(struct.bpmnXML);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TProcessType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.key = iprot.readString();
      struct.setKeyIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resourceName = iprot.readString();
        struct.setResourceNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deploymentId = iprot.readString();
        struct.setDeploymentIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hasStartForm = iprot.readBool();
        struct.setHasStartFormIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isSuspended = iprot.readBool();
        struct.setIsSuspendedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tenantId = iprot.readString();
        struct.setTenantIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bpmnXML = iprot.readString();
        struct.setBpmnXMLIsSet(true);
      }
    }
  }

}

