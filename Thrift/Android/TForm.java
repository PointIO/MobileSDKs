/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package point.io.securevault.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-10")
public class TForm implements org.apache.thrift.TBase<TForm, TForm._Fields>, java.io.Serializable, Cloneable, Comparable<TForm> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TForm");

  private static final org.apache.thrift.protocol.TField TASKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TASKKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("taskkey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FORMID_FIELD_DESC = new org.apache.thrift.protocol.TField("formid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FORMNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("formname", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TFormStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TFormTupleSchemeFactory());
  }

  public String taskname; // required
  public String taskkey; // required
  public String formid; // required
  public String formname; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASKNAME((short)1, "taskname"),
    TASKKEY((short)2, "taskkey"),
    FORMID((short)3, "formid"),
    FORMNAME((short)4, "formname");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASKNAME
          return TASKNAME;
        case 2: // TASKKEY
          return TASKKEY;
        case 3: // FORMID
          return FORMID;
        case 4: // FORMNAME
          return FORMNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASKNAME, new org.apache.thrift.meta_data.FieldMetaData("taskname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.TASKKEY, new org.apache.thrift.meta_data.FieldMetaData("taskkey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.FORMID, new org.apache.thrift.meta_data.FieldMetaData("formid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.FORMNAME, new org.apache.thrift.meta_data.FieldMetaData("formname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TForm.class, metaDataMap);
  }

  public TForm() {
  }

  public TForm(
    String taskname,
    String taskkey,
    String formid,
    String formname)
  {
    this();
    this.taskname = taskname;
    this.taskkey = taskkey;
    this.formid = formid;
    this.formname = formname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TForm(TForm other) {
    if (other.isSetTaskname()) {
      this.taskname = other.taskname;
    }
    if (other.isSetTaskkey()) {
      this.taskkey = other.taskkey;
    }
    if (other.isSetFormid()) {
      this.formid = other.formid;
    }
    if (other.isSetFormname()) {
      this.formname = other.formname;
    }
  }

  public TForm deepCopy() {
    return new TForm(this);
  }

  @Override
  public void clear() {
    this.taskname = null;
    this.taskkey = null;
    this.formid = null;
    this.formname = null;
  }

  public String getTaskname() {
    return this.taskname;
  }

  public TForm setTaskname(String taskname) {
    this.taskname = taskname;
    return this;
  }

  public void unsetTaskname() {
    this.taskname = null;
  }

  /** Returns true if field taskname is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskname() {
    return this.taskname != null;
  }

  public void setTasknameIsSet(boolean value) {
    if (!value) {
      this.taskname = null;
    }
  }

  public String getTaskkey() {
    return this.taskkey;
  }

  public TForm setTaskkey(String taskkey) {
    this.taskkey = taskkey;
    return this;
  }

  public void unsetTaskkey() {
    this.taskkey = null;
  }

  /** Returns true if field taskkey is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskkey() {
    return this.taskkey != null;
  }

  public void setTaskkeyIsSet(boolean value) {
    if (!value) {
      this.taskkey = null;
    }
  }

  public String getFormid() {
    return this.formid;
  }

  public TForm setFormid(String formid) {
    this.formid = formid;
    return this;
  }

  public void unsetFormid() {
    this.formid = null;
  }

  /** Returns true if field formid is set (has been assigned a value) and false otherwise */
  public boolean isSetFormid() {
    return this.formid != null;
  }

  public void setFormidIsSet(boolean value) {
    if (!value) {
      this.formid = null;
    }
  }

  public String getFormname() {
    return this.formname;
  }

  public TForm setFormname(String formname) {
    this.formname = formname;
    return this;
  }

  public void unsetFormname() {
    this.formname = null;
  }

  /** Returns true if field formname is set (has been assigned a value) and false otherwise */
  public boolean isSetFormname() {
    return this.formname != null;
  }

  public void setFormnameIsSet(boolean value) {
    if (!value) {
      this.formname = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASKNAME:
      if (value == null) {
        unsetTaskname();
      } else {
        setTaskname((String)value);
      }
      break;

    case TASKKEY:
      if (value == null) {
        unsetTaskkey();
      } else {
        setTaskkey((String)value);
      }
      break;

    case FORMID:
      if (value == null) {
        unsetFormid();
      } else {
        setFormid((String)value);
      }
      break;

    case FORMNAME:
      if (value == null) {
        unsetFormname();
      } else {
        setFormname((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASKNAME:
      return getTaskname();

    case TASKKEY:
      return getTaskkey();

    case FORMID:
      return getFormid();

    case FORMNAME:
      return getFormname();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASKNAME:
      return isSetTaskname();
    case TASKKEY:
      return isSetTaskkey();
    case FORMID:
      return isSetFormid();
    case FORMNAME:
      return isSetFormname();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TForm)
      return this.equals((TForm)that);
    return false;
  }

  public boolean equals(TForm that) {
    if (that == null)
      return false;

    boolean this_present_taskname = true && this.isSetTaskname();
    boolean that_present_taskname = true && that.isSetTaskname();
    if (this_present_taskname || that_present_taskname) {
      if (!(this_present_taskname && that_present_taskname))
        return false;
      if (!this.taskname.equals(that.taskname))
        return false;
    }

    boolean this_present_taskkey = true && this.isSetTaskkey();
    boolean that_present_taskkey = true && that.isSetTaskkey();
    if (this_present_taskkey || that_present_taskkey) {
      if (!(this_present_taskkey && that_present_taskkey))
        return false;
      if (!this.taskkey.equals(that.taskkey))
        return false;
    }

    boolean this_present_formid = true && this.isSetFormid();
    boolean that_present_formid = true && that.isSetFormid();
    if (this_present_formid || that_present_formid) {
      if (!(this_present_formid && that_present_formid))
        return false;
      if (!this.formid.equals(that.formid))
        return false;
    }

    boolean this_present_formname = true && this.isSetFormname();
    boolean that_present_formname = true && that.isSetFormname();
    if (this_present_formname || that_present_formname) {
      if (!(this_present_formname && that_present_formname))
        return false;
      if (!this.formname.equals(that.formname))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskname = true && (isSetTaskname());
    list.add(present_taskname);
    if (present_taskname)
      list.add(taskname);

    boolean present_taskkey = true && (isSetTaskkey());
    list.add(present_taskkey);
    if (present_taskkey)
      list.add(taskkey);

    boolean present_formid = true && (isSetFormid());
    list.add(present_formid);
    if (present_formid)
      list.add(formid);

    boolean present_formname = true && (isSetFormname());
    list.add(present_formname);
    if (present_formname)
      list.add(formname);

    return list.hashCode();
  }

  @Override
  public int compareTo(TForm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskname()).compareTo(other.isSetTaskname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskname, other.taskname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskkey()).compareTo(other.isSetTaskkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskkey, other.taskkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormid()).compareTo(other.isSetFormid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formid, other.formid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormname()).compareTo(other.isSetFormname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formname, other.formname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TForm(");
    boolean first = true;

    sb.append("taskname:");
    if (this.taskname == null) {
      sb.append("null");
    } else {
      sb.append(this.taskname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskkey:");
    if (this.taskkey == null) {
      sb.append("null");
    } else {
      sb.append(this.taskkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("formid:");
    if (this.formid == null) {
      sb.append("null");
    } else {
      sb.append(this.formid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("formname:");
    if (this.formname == null) {
      sb.append("null");
    } else {
      sb.append(this.formname);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (taskname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskname' was not present! Struct: " + toString());
    }
    if (taskkey == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskkey' was not present! Struct: " + toString());
    }
    if (formid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'formid' was not present! Struct: " + toString());
    }
    if (formname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'formname' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFormStandardSchemeFactory implements SchemeFactory {
    public TFormStandardScheme getScheme() {
      return new TFormStandardScheme();
    }
  }

  private static class TFormStandardScheme extends StandardScheme<TForm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TForm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskname = iprot.readString();
              struct.setTasknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASKKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskkey = iprot.readString();
              struct.setTaskkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FORMID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.formid = iprot.readString();
              struct.setFormidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FORMNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.formname = iprot.readString();
              struct.setFormnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TForm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskname != null) {
        oprot.writeFieldBegin(TASKNAME_FIELD_DESC);
        oprot.writeString(struct.taskname);
        oprot.writeFieldEnd();
      }
      if (struct.taskkey != null) {
        oprot.writeFieldBegin(TASKKEY_FIELD_DESC);
        oprot.writeString(struct.taskkey);
        oprot.writeFieldEnd();
      }
      if (struct.formid != null) {
        oprot.writeFieldBegin(FORMID_FIELD_DESC);
        oprot.writeString(struct.formid);
        oprot.writeFieldEnd();
      }
      if (struct.formname != null) {
        oprot.writeFieldBegin(FORMNAME_FIELD_DESC);
        oprot.writeString(struct.formname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFormTupleSchemeFactory implements SchemeFactory {
    public TFormTupleScheme getScheme() {
      return new TFormTupleScheme();
    }
  }

  private static class TFormTupleScheme extends TupleScheme<TForm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TForm struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.taskname);
      oprot.writeString(struct.taskkey);
      oprot.writeString(struct.formid);
      oprot.writeString(struct.formname);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TForm struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.taskname = iprot.readString();
      struct.setTasknameIsSet(true);
      struct.taskkey = iprot.readString();
      struct.setTaskkeyIsSet(true);
      struct.formid = iprot.readString();
      struct.setFormidIsSet(true);
      struct.formname = iprot.readString();
      struct.setFormnameIsSet(true);
    }
  }

}

