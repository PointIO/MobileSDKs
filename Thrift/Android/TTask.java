/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package point.io.securevault.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A Task object is used to specify task details.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-10")
public class TTask implements org.apache.thrift.TBase<TTask, TTask._Fields>, java.io.Serializable, Cloneable, Comparable<TTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTask");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ASSIGNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("assignee", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PROCESS_DEFINITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processDefinitionId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PROCESS_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processInstanceId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXECUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executionId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DUE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("dueDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TASK_DEFINITION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("taskDefinitionKey", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IS_SUSPENDED_FIELD_DESC = new org.apache.thrift.protocol.TField("isSuspended", org.apache.thrift.protocol.TType.BOOL, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTaskTupleSchemeFactory());
  }

  public String id; // required
  public String name; // required
  public String desc; // optional
  public int priority; // required
  public String owner; // optional
  public String assignee; // optional
  public String processDefinitionId; // optional
  public String processInstanceId; // optional
  public String executionId; // optional
  public String createTime; // optional
  public String dueDate; // optional
  public String taskDefinitionKey; // optional
  public boolean isSuspended; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    DESC((short)3, "desc"),
    PRIORITY((short)4, "priority"),
    OWNER((short)5, "owner"),
    ASSIGNEE((short)6, "assignee"),
    PROCESS_DEFINITION_ID((short)7, "processDefinitionId"),
    PROCESS_INSTANCE_ID((short)8, "processInstanceId"),
    EXECUTION_ID((short)9, "executionId"),
    CREATE_TIME((short)10, "createTime"),
    DUE_DATE((short)11, "dueDate"),
    TASK_DEFINITION_KEY((short)12, "taskDefinitionKey"),
    IS_SUSPENDED((short)13, "isSuspended");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESC
          return DESC;
        case 4: // PRIORITY
          return PRIORITY;
        case 5: // OWNER
          return OWNER;
        case 6: // ASSIGNEE
          return ASSIGNEE;
        case 7: // PROCESS_DEFINITION_ID
          return PROCESS_DEFINITION_ID;
        case 8: // PROCESS_INSTANCE_ID
          return PROCESS_INSTANCE_ID;
        case 9: // EXECUTION_ID
          return EXECUTION_ID;
        case 10: // CREATE_TIME
          return CREATE_TIME;
        case 11: // DUE_DATE
          return DUE_DATE;
        case 12: // TASK_DEFINITION_KEY
          return TASK_DEFINITION_KEY;
        case 13: // IS_SUSPENDED
          return IS_SUSPENDED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRIORITY_ISSET_ID = 0;
  private static final int __ISSUSPENDED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DESC,_Fields.OWNER,_Fields.ASSIGNEE,_Fields.PROCESS_DEFINITION_ID,_Fields.PROCESS_INSTANCE_ID,_Fields.EXECUTION_ID,_Fields.CREATE_TIME,_Fields.DUE_DATE,_Fields.TASK_DEFINITION_KEY,_Fields.IS_SUSPENDED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.ASSIGNEE, new org.apache.thrift.meta_data.FieldMetaData("assignee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.PROCESS_DEFINITION_ID, new org.apache.thrift.meta_data.FieldMetaData("processDefinitionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.PROCESS_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("processInstanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.EXECUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("executionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Date")));
    tmpMap.put(_Fields.DUE_DATE, new org.apache.thrift.meta_data.FieldMetaData("dueDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Date")));
    tmpMap.put(_Fields.TASK_DEFINITION_KEY, new org.apache.thrift.meta_data.FieldMetaData("taskDefinitionKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Text")));
    tmpMap.put(_Fields.IS_SUSPENDED, new org.apache.thrift.meta_data.FieldMetaData("isSuspended", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTask.class, metaDataMap);
  }

  public TTask() {
  }

  public TTask(
    String id,
    String name,
    int priority)
  {
    this();
    this.id = id;
    this.name = name;
    this.priority = priority;
    setPriorityIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTask(TTask other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.priority = other.priority;
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetAssignee()) {
      this.assignee = other.assignee;
    }
    if (other.isSetProcessDefinitionId()) {
      this.processDefinitionId = other.processDefinitionId;
    }
    if (other.isSetProcessInstanceId()) {
      this.processInstanceId = other.processInstanceId;
    }
    if (other.isSetExecutionId()) {
      this.executionId = other.executionId;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetDueDate()) {
      this.dueDate = other.dueDate;
    }
    if (other.isSetTaskDefinitionKey()) {
      this.taskDefinitionKey = other.taskDefinitionKey;
    }
    this.isSuspended = other.isSuspended;
  }

  public TTask deepCopy() {
    return new TTask(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.desc = null;
    setPriorityIsSet(false);
    this.priority = 0;
    this.owner = null;
    this.assignee = null;
    this.processDefinitionId = null;
    this.processInstanceId = null;
    this.executionId = null;
    this.createTime = null;
    this.dueDate = null;
    this.taskDefinitionKey = null;
    setIsSuspendedIsSet(false);
    this.isSuspended = false;
  }

  public String getId() {
    return this.id;
  }

  public TTask setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TTask setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public TTask setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public int getPriority() {
    return this.priority;
  }

  public TTask setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public String getOwner() {
    return this.owner;
  }

  public TTask setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public String getAssignee() {
    return this.assignee;
  }

  public TTask setAssignee(String assignee) {
    this.assignee = assignee;
    return this;
  }

  public void unsetAssignee() {
    this.assignee = null;
  }

  /** Returns true if field assignee is set (has been assigned a value) and false otherwise */
  public boolean isSetAssignee() {
    return this.assignee != null;
  }

  public void setAssigneeIsSet(boolean value) {
    if (!value) {
      this.assignee = null;
    }
  }

  public String getProcessDefinitionId() {
    return this.processDefinitionId;
  }

  public TTask setProcessDefinitionId(String processDefinitionId) {
    this.processDefinitionId = processDefinitionId;
    return this;
  }

  public void unsetProcessDefinitionId() {
    this.processDefinitionId = null;
  }

  /** Returns true if field processDefinitionId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessDefinitionId() {
    return this.processDefinitionId != null;
  }

  public void setProcessDefinitionIdIsSet(boolean value) {
    if (!value) {
      this.processDefinitionId = null;
    }
  }

  public String getProcessInstanceId() {
    return this.processInstanceId;
  }

  public TTask setProcessInstanceId(String processInstanceId) {
    this.processInstanceId = processInstanceId;
    return this;
  }

  public void unsetProcessInstanceId() {
    this.processInstanceId = null;
  }

  /** Returns true if field processInstanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessInstanceId() {
    return this.processInstanceId != null;
  }

  public void setProcessInstanceIdIsSet(boolean value) {
    if (!value) {
      this.processInstanceId = null;
    }
  }

  public String getExecutionId() {
    return this.executionId;
  }

  public TTask setExecutionId(String executionId) {
    this.executionId = executionId;
    return this;
  }

  public void unsetExecutionId() {
    this.executionId = null;
  }

  /** Returns true if field executionId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutionId() {
    return this.executionId != null;
  }

  public void setExecutionIdIsSet(boolean value) {
    if (!value) {
      this.executionId = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public TTask setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getDueDate() {
    return this.dueDate;
  }

  public TTask setDueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  public void unsetDueDate() {
    this.dueDate = null;
  }

  /** Returns true if field dueDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDueDate() {
    return this.dueDate != null;
  }

  public void setDueDateIsSet(boolean value) {
    if (!value) {
      this.dueDate = null;
    }
  }

  public String getTaskDefinitionKey() {
    return this.taskDefinitionKey;
  }

  public TTask setTaskDefinitionKey(String taskDefinitionKey) {
    this.taskDefinitionKey = taskDefinitionKey;
    return this;
  }

  public void unsetTaskDefinitionKey() {
    this.taskDefinitionKey = null;
  }

  /** Returns true if field taskDefinitionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskDefinitionKey() {
    return this.taskDefinitionKey != null;
  }

  public void setTaskDefinitionKeyIsSet(boolean value) {
    if (!value) {
      this.taskDefinitionKey = null;
    }
  }

  public boolean isIsSuspended() {
    return this.isSuspended;
  }

  public TTask setIsSuspended(boolean isSuspended) {
    this.isSuspended = isSuspended;
    setIsSuspendedIsSet(true);
    return this;
  }

  public void unsetIsSuspended() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUSPENDED_ISSET_ID);
  }

  /** Returns true if field isSuspended is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSuspended() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUSPENDED_ISSET_ID);
  }

  public void setIsSuspendedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUSPENDED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case ASSIGNEE:
      if (value == null) {
        unsetAssignee();
      } else {
        setAssignee((String)value);
      }
      break;

    case PROCESS_DEFINITION_ID:
      if (value == null) {
        unsetProcessDefinitionId();
      } else {
        setProcessDefinitionId((String)value);
      }
      break;

    case PROCESS_INSTANCE_ID:
      if (value == null) {
        unsetProcessInstanceId();
      } else {
        setProcessInstanceId((String)value);
      }
      break;

    case EXECUTION_ID:
      if (value == null) {
        unsetExecutionId();
      } else {
        setExecutionId((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case DUE_DATE:
      if (value == null) {
        unsetDueDate();
      } else {
        setDueDate((String)value);
      }
      break;

    case TASK_DEFINITION_KEY:
      if (value == null) {
        unsetTaskDefinitionKey();
      } else {
        setTaskDefinitionKey((String)value);
      }
      break;

    case IS_SUSPENDED:
      if (value == null) {
        unsetIsSuspended();
      } else {
        setIsSuspended((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESC:
      return getDesc();

    case PRIORITY:
      return getPriority();

    case OWNER:
      return getOwner();

    case ASSIGNEE:
      return getAssignee();

    case PROCESS_DEFINITION_ID:
      return getProcessDefinitionId();

    case PROCESS_INSTANCE_ID:
      return getProcessInstanceId();

    case EXECUTION_ID:
      return getExecutionId();

    case CREATE_TIME:
      return getCreateTime();

    case DUE_DATE:
      return getDueDate();

    case TASK_DEFINITION_KEY:
      return getTaskDefinitionKey();

    case IS_SUSPENDED:
      return isIsSuspended();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESC:
      return isSetDesc();
    case PRIORITY:
      return isSetPriority();
    case OWNER:
      return isSetOwner();
    case ASSIGNEE:
      return isSetAssignee();
    case PROCESS_DEFINITION_ID:
      return isSetProcessDefinitionId();
    case PROCESS_INSTANCE_ID:
      return isSetProcessInstanceId();
    case EXECUTION_ID:
      return isSetExecutionId();
    case CREATE_TIME:
      return isSetCreateTime();
    case DUE_DATE:
      return isSetDueDate();
    case TASK_DEFINITION_KEY:
      return isSetTaskDefinitionKey();
    case IS_SUSPENDED:
      return isSetIsSuspended();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTask)
      return this.equals((TTask)that);
    return false;
  }

  public boolean equals(TTask that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_assignee = true && this.isSetAssignee();
    boolean that_present_assignee = true && that.isSetAssignee();
    if (this_present_assignee || that_present_assignee) {
      if (!(this_present_assignee && that_present_assignee))
        return false;
      if (!this.assignee.equals(that.assignee))
        return false;
    }

    boolean this_present_processDefinitionId = true && this.isSetProcessDefinitionId();
    boolean that_present_processDefinitionId = true && that.isSetProcessDefinitionId();
    if (this_present_processDefinitionId || that_present_processDefinitionId) {
      if (!(this_present_processDefinitionId && that_present_processDefinitionId))
        return false;
      if (!this.processDefinitionId.equals(that.processDefinitionId))
        return false;
    }

    boolean this_present_processInstanceId = true && this.isSetProcessInstanceId();
    boolean that_present_processInstanceId = true && that.isSetProcessInstanceId();
    if (this_present_processInstanceId || that_present_processInstanceId) {
      if (!(this_present_processInstanceId && that_present_processInstanceId))
        return false;
      if (!this.processInstanceId.equals(that.processInstanceId))
        return false;
    }

    boolean this_present_executionId = true && this.isSetExecutionId();
    boolean that_present_executionId = true && that.isSetExecutionId();
    if (this_present_executionId || that_present_executionId) {
      if (!(this_present_executionId && that_present_executionId))
        return false;
      if (!this.executionId.equals(that.executionId))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_dueDate = true && this.isSetDueDate();
    boolean that_present_dueDate = true && that.isSetDueDate();
    if (this_present_dueDate || that_present_dueDate) {
      if (!(this_present_dueDate && that_present_dueDate))
        return false;
      if (!this.dueDate.equals(that.dueDate))
        return false;
    }

    boolean this_present_taskDefinitionKey = true && this.isSetTaskDefinitionKey();
    boolean that_present_taskDefinitionKey = true && that.isSetTaskDefinitionKey();
    if (this_present_taskDefinitionKey || that_present_taskDefinitionKey) {
      if (!(this_present_taskDefinitionKey && that_present_taskDefinitionKey))
        return false;
      if (!this.taskDefinitionKey.equals(that.taskDefinitionKey))
        return false;
    }

    boolean this_present_isSuspended = true && this.isSetIsSuspended();
    boolean that_present_isSuspended = true && that.isSetIsSuspended();
    if (this_present_isSuspended || that_present_isSuspended) {
      if (!(this_present_isSuspended && that_present_isSuspended))
        return false;
      if (this.isSuspended != that.isSuspended)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_priority = true;
    list.add(present_priority);
    if (present_priority)
      list.add(priority);

    boolean present_owner = true && (isSetOwner());
    list.add(present_owner);
    if (present_owner)
      list.add(owner);

    boolean present_assignee = true && (isSetAssignee());
    list.add(present_assignee);
    if (present_assignee)
      list.add(assignee);

    boolean present_processDefinitionId = true && (isSetProcessDefinitionId());
    list.add(present_processDefinitionId);
    if (present_processDefinitionId)
      list.add(processDefinitionId);

    boolean present_processInstanceId = true && (isSetProcessInstanceId());
    list.add(present_processInstanceId);
    if (present_processInstanceId)
      list.add(processInstanceId);

    boolean present_executionId = true && (isSetExecutionId());
    list.add(present_executionId);
    if (present_executionId)
      list.add(executionId);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_dueDate = true && (isSetDueDate());
    list.add(present_dueDate);
    if (present_dueDate)
      list.add(dueDate);

    boolean present_taskDefinitionKey = true && (isSetTaskDefinitionKey());
    list.add(present_taskDefinitionKey);
    if (present_taskDefinitionKey)
      list.add(taskDefinitionKey);

    boolean present_isSuspended = true && (isSetIsSuspended());
    list.add(present_isSuspended);
    if (present_isSuspended)
      list.add(isSuspended);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssignee()).compareTo(other.isSetAssignee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignee, other.assignee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessDefinitionId()).compareTo(other.isSetProcessDefinitionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessDefinitionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processDefinitionId, other.processDefinitionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessInstanceId()).compareTo(other.isSetProcessInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processInstanceId, other.processInstanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutionId()).compareTo(other.isSetExecutionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executionId, other.executionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDueDate()).compareTo(other.isSetDueDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDueDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dueDate, other.dueDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskDefinitionKey()).compareTo(other.isSetTaskDefinitionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskDefinitionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskDefinitionKey, other.taskDefinitionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSuspended()).compareTo(other.isSetIsSuspended());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSuspended()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSuspended, other.isSuspended);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTask(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (isSetOwner()) {
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
    }
    if (isSetAssignee()) {
      if (!first) sb.append(", ");
      sb.append("assignee:");
      if (this.assignee == null) {
        sb.append("null");
      } else {
        sb.append(this.assignee);
      }
      first = false;
    }
    if (isSetProcessDefinitionId()) {
      if (!first) sb.append(", ");
      sb.append("processDefinitionId:");
      if (this.processDefinitionId == null) {
        sb.append("null");
      } else {
        sb.append(this.processDefinitionId);
      }
      first = false;
    }
    if (isSetProcessInstanceId()) {
      if (!first) sb.append(", ");
      sb.append("processInstanceId:");
      if (this.processInstanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.processInstanceId);
      }
      first = false;
    }
    if (isSetExecutionId()) {
      if (!first) sb.append(", ");
      sb.append("executionId:");
      if (this.executionId == null) {
        sb.append("null");
      } else {
        sb.append(this.executionId);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetDueDate()) {
      if (!first) sb.append(", ");
      sb.append("dueDate:");
      if (this.dueDate == null) {
        sb.append("null");
      } else {
        sb.append(this.dueDate);
      }
      first = false;
    }
    if (isSetTaskDefinitionKey()) {
      if (!first) sb.append(", ");
      sb.append("taskDefinitionKey:");
      if (this.taskDefinitionKey == null) {
        sb.append("null");
      } else {
        sb.append(this.taskDefinitionKey);
      }
      first = false;
    }
    if (isSetIsSuspended()) {
      if (!first) sb.append(", ");
      sb.append("isSuspended:");
      sb.append(this.isSuspended);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'priority' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTaskStandardSchemeFactory implements SchemeFactory {
    public TTaskStandardScheme getScheme() {
      return new TTaskStandardScheme();
    }
  }

  private static class TTaskStandardScheme extends StandardScheme<TTask> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASSIGNEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assignee = iprot.readString();
              struct.setAssigneeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROCESS_DEFINITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processDefinitionId = iprot.readString();
              struct.setProcessDefinitionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROCESS_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processInstanceId = iprot.readString();
              struct.setProcessInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXECUTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executionId = iprot.readString();
              struct.setExecutionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DUE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dueDate = iprot.readString();
              struct.setDueDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TASK_DEFINITION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskDefinitionKey = iprot.readString();
              struct.setTaskDefinitionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_SUSPENDED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSuspended = iprot.readBool();
              struct.setIsSuspendedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPriority()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'priority' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      if (struct.owner != null) {
        if (struct.isSetOwner()) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
      }
      if (struct.assignee != null) {
        if (struct.isSetAssignee()) {
          oprot.writeFieldBegin(ASSIGNEE_FIELD_DESC);
          oprot.writeString(struct.assignee);
          oprot.writeFieldEnd();
        }
      }
      if (struct.processDefinitionId != null) {
        if (struct.isSetProcessDefinitionId()) {
          oprot.writeFieldBegin(PROCESS_DEFINITION_ID_FIELD_DESC);
          oprot.writeString(struct.processDefinitionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.processInstanceId != null) {
        if (struct.isSetProcessInstanceId()) {
          oprot.writeFieldBegin(PROCESS_INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.processInstanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.executionId != null) {
        if (struct.isSetExecutionId()) {
          oprot.writeFieldBegin(EXECUTION_ID_FIELD_DESC);
          oprot.writeString(struct.executionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dueDate != null) {
        if (struct.isSetDueDate()) {
          oprot.writeFieldBegin(DUE_DATE_FIELD_DESC);
          oprot.writeString(struct.dueDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.taskDefinitionKey != null) {
        if (struct.isSetTaskDefinitionKey()) {
          oprot.writeFieldBegin(TASK_DEFINITION_KEY_FIELD_DESC);
          oprot.writeString(struct.taskDefinitionKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsSuspended()) {
        oprot.writeFieldBegin(IS_SUSPENDED_FIELD_DESC);
        oprot.writeBool(struct.isSuspended);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTaskTupleSchemeFactory implements SchemeFactory {
    public TTaskTupleScheme getScheme() {
      return new TTaskTupleScheme();
    }
  }

  private static class TTaskTupleScheme extends TupleScheme<TTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTask struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.name);
      oprot.writeI32(struct.priority);
      BitSet optionals = new BitSet();
      if (struct.isSetDesc()) {
        optionals.set(0);
      }
      if (struct.isSetOwner()) {
        optionals.set(1);
      }
      if (struct.isSetAssignee()) {
        optionals.set(2);
      }
      if (struct.isSetProcessDefinitionId()) {
        optionals.set(3);
      }
      if (struct.isSetProcessInstanceId()) {
        optionals.set(4);
      }
      if (struct.isSetExecutionId()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetDueDate()) {
        optionals.set(7);
      }
      if (struct.isSetTaskDefinitionKey()) {
        optionals.set(8);
      }
      if (struct.isSetIsSuspended()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetAssignee()) {
        oprot.writeString(struct.assignee);
      }
      if (struct.isSetProcessDefinitionId()) {
        oprot.writeString(struct.processDefinitionId);
      }
      if (struct.isSetProcessInstanceId()) {
        oprot.writeString(struct.processInstanceId);
      }
      if (struct.isSetExecutionId()) {
        oprot.writeString(struct.executionId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetDueDate()) {
        oprot.writeString(struct.dueDate);
      }
      if (struct.isSetTaskDefinitionKey()) {
        oprot.writeString(struct.taskDefinitionKey);
      }
      if (struct.isSetIsSuspended()) {
        oprot.writeBool(struct.isSuspended);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTask struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.priority = iprot.readI32();
      struct.setPriorityIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(1)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.assignee = iprot.readString();
        struct.setAssigneeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.processDefinitionId = iprot.readString();
        struct.setProcessDefinitionIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.processInstanceId = iprot.readString();
        struct.setProcessInstanceIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.executionId = iprot.readString();
        struct.setExecutionIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dueDate = iprot.readString();
        struct.setDueDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.taskDefinitionKey = iprot.readString();
        struct.setTaskDefinitionKeyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isSuspended = iprot.readBool();
        struct.setIsSuspendedIsSet(true);
      }
    }
  }

}

